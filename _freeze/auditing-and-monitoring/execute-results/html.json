{
  "hash": "ad9f1db0058d9ca04d2e1075b68f6c78",
  "result": {
    "markdown": "---\nknit: quarto render\n---\n\n# Auditing and Monitoring {.pro-header}\n\n## Auditing Configuration\n\n### R Console Auditing\n\nRStudio Workbench can be optionally configured to audit all R console activity by writing console input and output to a central location (the `/var/lib/rstudio-server/audit/r-console` directory by default). This feature can be enabled using the `audit-r-console` setting. For example:\n\n*/etc/rstudio/rserver.conf*\n\n```ini\naudit-r-console=input\n```\n\nThis will audit all R console *input*. If you wish to record both console input and output then you can use the `all` setting. For example:\n\n*/etc/rstudio/rserver.conf*\n\n```ini\naudit-r-console=all\n```\n\nNote that if you choose to record both input and output you'll need considerably more storage available than if you record input only. See the [Storage Options] section below for additional discussion of storage requirements and configuration.\n\n#### Data Format\n\nThe R console activity for each user is written into individual files within the `r-console` data directory (by default `/var/lib/rstudio-server/audit/r-console`). The following fields are included:\n\n|       |      | \n|:--------------------|:--------------------------------------------------|\n| session_id    | Unique identifier for R session where this action occurred. |\n| project   | Path to RStudio project directory if the action occurred within a project.  |\n| pid    |  Unix process ID where this console action occurred.  |\n| username    | Unix user which executed this console action. |\n| timestamp   | Timestamp of action in milliseconds since the epoch.  |\n| type    | Console action type (prompt, input, output, or error).    |\n| data    | Console data associated with this action (e.g. output text).  |\n\nThe `session_id` field refers to a concurrent R session as described in the section on [Multiple R Sessions] (i.e. it can span multiple projects and/or pids).\n\nThe default format for the log file is CSV (Comma Separated Values). It's also possible to write the data to [Newline Delimited JSON](http://ndjson.org/) by using the `audit-r-console-format` option. For example:\n\n```ini\naudit-r-console-format=json\n```\n\nNote that when using the JSON format the entire file is not a valid JSON object but rather each individual line is one. This follows the Newline Delimited JSON specification supported by several libraries including the R **jsonlite** package.\n\n#### Storage Options\n\nYou can customize both the location where audit data is written as well as the maximum amount of data to log per-user (by default this is 50 MB). To specify the root directory for audit data you use the `audit-data-path` setting. For example:\n\n*/etc/rstudio/rserver.conf*\n\n```ini\naudit-data-path=/audit-data\n```\n\nNote that this path affects the location of both R console auditing and R session auditing data.\n\nTo specify the maximum amount of data to write to an individual user's R console log file you use the `audit-r-console-user-limit-mb` setting. For example:\n\n*/etc/rstudio/rserver.conf*\n\n```ini\naudit-r-console-user-limit-mb=100\n```\n\nThe default maximum R console log file size is 50 megabytes per-user. To configure no limit to the size of files which can be written you set the value to `0`, for example:\n\n*/etc/rstudio/rserver.conf*\n\n```ini\naudit-r-console-user-limit-mb=0\n```\n\nIf you wish for RStudio to automatically roll the log files once the maximum size is reached, set the `audit-r-console-user-limit-months` setting. For example:\n\n*/etc/rstudio/rserver.conf*\n\n```ini\naudit-r-console-user-limit-months=2\n```\n\nThis will cause log files to be rolled over once the maximum size is reached, and only two months of data will be kept. Note that this setting is not set by default.\n\nNote that if the month limit is not set, then log files will not be rolled automatically. Depending on the number of users and their activity level this means that you should either create a scheduled (e.g. cron) job to periodically move the files off the server onto auxiliary storage and/or ensure that the volume they are stored on has sufficient capacity. \n\n### R Session Auditing\n\nRStudio Workbench can be optionally configured to write an audit log of session related events (e.g. login/logout, session start/suspend/exit) to a central location (the `/var/lib/rstudio-server/audit/r-sessions` directory by default). This feature can be enabled using the `audit-r-sessions` setting. For example:\n\n*/etc/rstudio/rserver.conf*\n\n```ini\naudit-r-sessions=1\n```\n\nNote that this is enabled by default if you are using named user licenses.\n\n::: {.callout-note}\nSession auditing is only supported for RStudio IDE R Sessions and is not currently supported for Jupyter or VS Code sessions.\n:::\n\n#### Data Format\n\nThe R session event log is written by default to the file at `/var/lib/rstudio-server/audit/r-sessions/r-sessions.csv`. The following fields are included:\n\n|       |      | \n|:--------------------|:--------------------------------------------------|\n| pid    |  Unix process ID the event is associated with (for auth events this will be the main `rserver` process, for session events the `rsession` process).  |\n| username    | Unix user that the event is associated with. |\n| timestamp   | Timestamp of event in milliseconds since the epoch.  |\n| type    | Event type (see documentation on event types below).    |\n| data    | Event data (see documentation on event types below).    |\n\nThe following values are valid for the event `type` field:\n\n|       |      | \n|:--------------------|:--------------------------------------------------|\n| auth_login    | User logged in to RStudio Workbench; `data` contains name of admin user if they are impersonating the user |\n| auth_throttled | User temporarily blocked due to multiple login attempts (as defined by the option `auth-sign-in-throttle-seconds`) |\n| auth_unlicensed | User is locked or there is no license available |\n| auth_license_failed | User blocked due to a failure in obtaining a license |\n| auth_logout    | User logged out of RStudio Workbench |\n| auth_login_failed | User login attempt failed because a local account may not exist |\n| session_start    |  R session started   |\n| session_suicide    | R session exiting due to suicide (internal error)    |\n| session_suspend    |  R session exiting due to suspend   |\n| session_file_upload | File uploaded from browser to R session; `data` field contains file name |\n| session_file_download | File downloaded from R session to browser; `data` field contains file name |\n| session_quit    |  R session exiting due to user quit  |\n| session_exit    |  R session exited    |\n| session\\_admin\\_suspend    | Administrator attempt to suspend R session; `data` field contains administrative user who initiated the event    |\n| session\\_admin\\_terminate    |  Administrator attempt to terminate R session ; `data` field contains administrative user who initiated the event   |\n\nThe default format for the log file is CSV (Comma Separated Values). It's also possible to write the data to [Newline Delimited JSON](http://ndjson.org/) by using the `audit-r-sessions-format` option. For example:\n\n```ini\naudit-r-sessions-format=json\n```\n\nNote that when using the JSON format the entire file is not a valid JSON object but rather each individual line is one. This follows the Newline Delimited JSON specification supported by several libraries including the R **jsonlite** package.\n\n#### Storage Options\n\nYou can customize both the location where audit data is written as well as the maximum amount of R session event data to log (by default this is 1 GB). To specify the root directory for audit data you use the `audit-data-path` setting. For example:\n\n*/etc/rstudio/rserver.conf*\n\n```ini\naudit-data-path=/audit-data\n```\n\nNote that this path affects the location of both R console auditing and R session auditing data.\n\nTo specify the maximum amount of R session event data to log you use the `audit-r-sessions-limit-mb` setting. For example:\n\n*/etc/rstudio/rserver.conf*\n\n```ini\naudit-r-sessions-limit-mb=2048\n```\n\nThe default maximum R session event log file size is 1 GB (1024 MB). To configure no limit to the size of files which can be written you set the value to `0`, for example:\n\n*/etc/rstudio/rserver.conf*\n\n```ini\naudit-r-sessions-limit-mb=0\n```\n\nIf you wish for RStudio to automatically roll the log files once the maximum size is reached, set the `audit-r-sessions-limit-months` setting. The default is set to 13 months. To set it manually, for example:\n\n*/etc/rstudio/rserver.conf*\n\n```ini\naudit-r-sessions-limit-months=13\n```\n\nThis will cause log files to be rolled over once the maximum size is reached, and only thirteen months of data will be kept. We do not recommend you change this setting if using named user licenses.\n\nNote that if the month limit is not set, then log files will not be rolled automatically. This means that you should either create a scheduled (e.g. cron) job to periodically move the file off the server onto auxiliary storage and/or ensure that the volume that it is stored on has sufficient capacity. \n\nIn any case, the amount of data written to the R session event log file is not large (less than 1 KB per session) so a large number of session events can be stored within the default 1 GB maximum log file size.\n\n## Monitoring Configuration\n\n### System and Per-User Resources\n\nRStudio Workbench monitors the use of resources (CPU, memory, etc.) on both a per-user and system wide basis. By default, monitoring data is written to a set of RRD ([http://oss.oetiker.ch/rrdtool/](http://oss.oetiker.ch/rrdtool/)) files and can be viewed using the [Administrative Dashboard]. \n\nThe storage of system monitoring data requires about 20MB of disk space and the storage of user monitoring data requires about 3.5MB per user. This data is stored by default at `/var/lib/rstudio-server/monitor`. If you have a large number of users you may wish to specify an alternate volume for monitoring data. You can do this using the `monitor-data-path` setting. For example:\n\n*/etc/rstudio/rserver.conf*\n\n```ini\nmonitor-data-path=/monitor-data\n```\n\nYou also might wish to disable monitoring with RRD entirely. You can do this using the `monitor-rrd-enabled` setting. For example:\n\n*/etc/rstudio/rserver.conf*\n\n```ini\nmonitor-rrd-enabled=0\n```\n\nNote that changes to the configuration will not take effect until the server is restarted.\n\n#### Analyzing RRD files\n\nThe RRD files powering RStudio's Administrative Dashboard are available for your own analysis, too. You can find them in `/var/lib/rstudio-server/monitor/rrd` (unless you've changed `monitor-data-path` as described above); they store all the metrics you can see on the dashboard, so you can use the information for your own reports and insights.\n\nMore information on how to read and visualize RRD data from R is available in the following blog post:\n\n[Reading and analysing log files in the RRD database format](https://rviews.rstudio.com/2018/06/20/reading-rrd-files/)\n\n### Using Graphite\n\nIf you are managing several servers it might be convenient to send server monitoring data to a centralized database and graphing facility as opposed to local RRD files. You can do this by configuring the server to send monitoring data to [Graphite](http://graphite.wikidot.com/) (or any other engine compatible with the Carbon protocol). This can be done in addition to or entirely in place of RRD.\n\nThere are four settings that control interaction with Graphite:\n\n|                    |                                                            |\n|--------------------|--------------------------------------------------|\n| **`monitor-graphite-enabled`**    | Write monitoring data to Graphite (defaults to `0`) |\n| **`monitor-graphite-host`**       | Host running Graphite (defaults to `127.0.0.1`) |\n| **`monitor-graphite-port`**       | Port Graphite is listening on (defaults to `2003`) |\n| **`monitor-graphite-client-id`**  | Optional client ID for sender |\n\nFor example, to enable Graphite monitoring on a remote host with the default Graphite port you would use these settings:\n\n*/etc/rstudio/rserver.conf*\n\n```ini\nmonitor-graphite-enabled=1\nmonitor-graphite-host=134.47.22.6\n```\n\nIf you are using a service like hosted graphite.com that requires that you provide an API key as part of reporting metrics you can use the `monitor-graphite-client-id` setting. For example:\n\n*/etc/rstudio/rserver.conf*\n\n```ini\nmonitor-graphite-enabled=1\nmonitor-graphite-host=carbon.hostedgraphite.com\nmonitor-graphite-client-id=490662a4-1d8c-11e5-b06d-000c298f3d04\n```\n\nNote that changes to the configuration will not take effect until the server is restarted. \n\n## Server Health Checks\n\n### Enabling Health Checks\n\nYou may wish to periodically poll RStudio Workbench to ensure that it's still responding to requests as well as to examine various indicators of server load. You can enable a health check endpoint using the `server-health-check-enabled` setting. For example:\n\n*/etc/rstudio/rserver.conf*\n\n```ini\nserver-health-check-enabled=1\n```\n\nAfter restarting the server, the following health-check endpoint will be available:\n\n```html\nhttp://<server-address-and-port>/health-check\n```\n\nBy default, the output of the health check will appear as follows:\n\n```coldfusion\nactive-sessions: 1\nidle-seconds: 0\ncpu-percent: 0.0\nmemory-percent: 64.2\nswap-percent: 0.0\nload-average: 4.1\n```\n\n### Customizing Responses \n\nThe response to the health check is determined by processing a template that includes several variables. The default template is:\n\n```coldfusion\nactive-sessions: #active-sessions#\nidle-seconds: #idle-seconds#\ncpu-percent: #cpu-percent#\nmemory-percent: #memory-percent#\nswap-percent: #swap-percent#\nload-average: #load-average#\n```\n\nYou can customize this template to return an alternate format (e.g. XML or JSON) that is parse-able by an external monitoring system. To do this you simply create a template and copy it to **`/etc/rstudio/health-check`** For example, an XML format:\n\n*/etc/rstudio/health-check*\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<health-check>\n  <active-sessions>#active-sessions#</active-sessions>\n  <idle-seconds>#idle-seconds#</idle-seconds>\n  <cpu-percent>#cpu-percent#</cpu-percent>\n  <memory-percent>#memory-percent#</memory-percent>\n  <swap-percent>#swap-percent#</swap-percent>\n  <load-average>#load-average#</load-average>\n</health-check>\n```\n\nOr a [Prometheus](https://prometheus.io/docs/introduction/overview/) endpoint. Prometheus is an open-source systems monitoring and alerting toolkit with a custom input format:\n\n*/etc/rstudio/health-check*\n\n```\n# HELP active_sessions health_check metric Active RStudio sessions\n# TYPE active_sessions gauge\nactive_sessions #active-sessions#\n# HELP idle_seconds health_check metric Time since active RStudio sessions\n# TYPE idle_seconds gauge\nidle_seconds #idle-seconds#\n# HELP cpu_percent health_check metric cpu (percentage)\n# TYPE cpu_percent gauge\ncpu_percent #cpu-percent#\n# HELP memory_percent health_check metric memory used (percentage)\n# TYPE memory_percent gauge\nmemory_percent #memory-percent#\n# HELP swap_percent health_check metric swap used (percentage)\n# TYPE swap_percent gauge\nswap_percent #swap-percent#\n# HELP load_average health_check metric cpu load average\n# TYPE load_average gauge\nload_average #load-average#\n```\n\n### Changing the URL\n\nIt's also possible to customize the URL used for health checks. RStudio Workbench will use the first file whose name begins with `health-check` in the `/etc/rstudio` directory as the template, and require that the full file name be specified in the URL. For example, a health check template located at the following path:\n\n```bash\n/etc/rstudio/health-check-B64C900E\n```\n\nWould be accessed using this URL:\n\n```html\nhttp://<server-address-and-port>/health-check-B64C900E\n```\n\nNote that changes to the health check template will not take effect until the server is restarted.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "dependencies": {
      "type": "includes",
      "data": []
    },
    "preserve": {},
    "postProcess": null
  }
}