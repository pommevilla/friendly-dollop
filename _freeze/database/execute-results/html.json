{
  "hash": "67c8169f3bb0d28bf9a6600b47c6f10d",
  "result": {
    "markdown": "---\nknit: quarto render\n---\n\n# Database\n\nRStudio supports multiple database options. Currently, the supported databases are SQLite and PostgreSQL. When running RStudio Workbench in a load balanced configuration, you *must* use a PostgreSQL database, as SQLite is insufficient for managing state between multiple nodes.\n\n## Configuration\n\nIn order to set up a database connection, modify the file */etc/rstudio/database.conf*. The file contains documentation about how to use it, and you can simply uncomment any lines that are relevant to your configuration. Note that because the file can contain password data, this file must be user read/write **only** (file mask 600).\n\n### SQLite\n\nBy default, RStudio creates a SQLite database for you automatically under the `/var/lib/rstudio-server` directory. For single-node installations, this is sufficient, but as stated before, will not be sufficient for load balanced deployments.\n\nYou should **never** specify a SQLite directory that is on shared storage, such as NFS. Per the [SQLite documentation](https://www.sqlite.org/lockingv3.html), this can cause data corruption.\n\nSample configuration:\n\n*/etc/rstudio/database.conf*\n\n```ini\nprovider=sqlite\n\n# Directory in which the sqlite database will be written\ndirectory=/var/lib/rstudio-server\n```\n\n### PostgreSQL\n\nIf you wish to use PostgreSQL, you must create an empty database for RStudio to connect to. You must not share this database with other products or services. If running an HA setup, it is strongly recommended to run the database on a separate server than the RStudio services to ensure maximum availability. The minimum supported PostgreSQL version is 9.5.\n\nSample configuration:\n\n*/etc/rstudio/database.conf*\n\n\n```ini\n# Note: when connecting to a PostgreSQL database, a default empty rstudio database must first be created!\nprovider=postgresql\n\n# Specifies the host (hostname or IP address) of the database host\nhost=localhost\n\n# Specifies the database to connect to\ndatabase=rstudio\n\n# Specifies the TCP port where the database is listening for connections\nport=5432\n\n# Specifies the database connection username\nusername=postgres\n\n# Specifies the database connection password. This may be encrypted with the secure-cookie-key.\n# The encrypted password can be generated using the helper command rstudio-server encrypt-password.\n# It is strongly recommended that you encrypt the password!\npassword=postgres\n```\n\nPostgreSQL connection URIs are also supported if preferred. If specifying additional options other than the ones provided above, such as `sslmode`, the use of a URI is required.\n\nFor example:\n\n*/etc/rstudio/database.conf*\n\n```ini\nprovider=postgresql\n\n# Specifies the connection URL in the form of a postgresql:// connection URL. This can be used if you need\n# to set special database settings that are not available with the other parameters. If set, this parameter will\n# override any other postgresql parameters that have been set, with the exception of the password. A password in \n# the URI is supported as a convenience but we strongly recommend using the separate password field, which will\n# always replace any password specified in the URI.\nconnection-uri=postgresql://postgres@localhost:5432/rstudio?sslmode=allow&options=-csearch_path=public\n```\n\nAvailable PostgreSQL connection string parameters are documented in the [official PostgreSQL documentation](https://www.postgresql.org/docs/10/libpq-connect.html#LIBPQ-PARAMKEYWORDS).\n\n::: {.callout-note}\nThe password in `connection-uri` may contain characters that may need to be URL-encoded to work properly. Avoid encoding the password by using the separate `password` field in the configuration.\n:::\n\n#### SSL\n\nSSL for the PostgreSQL database can be used with RStudio by specifying `sslmode=allow` within the `connection-uri` parameter. The `connection-uri` mode of configuration must be used to specify additional database connection options such as these, beyond the simple name/value pairs that are supported.\n\nFor example:\n\n*/etc/rstudio/database.conf*\n\n```ini\nprovider=postgresql\nconnection-uri=postgresql://postgres@localhost:5432/rstudio?sslmode=allow\n```\n\n#### Schemas\n\nIf you need to, you can tell RStudio to restrict itself to keeping its tables within a specific schema. You control this by giving PostgreSQL a search path as part of the URL by adding `options=-csearch_path=<schema-name>` to the `connection-uri`. If it's the only item you're adding, separate it from the rest of the URL with ? (just like the sslmode item above). Otherwise, separate it from other items with '&'.\n\nFor example:\n\n```ini\nprovider=postgresql\nconnection-uri=postgresql://postgres@localhost:5432/rstudio?sslmode=allow&options=-csearch_path=rstudio_schema\n```\n\nRStudio will refuse to start when given a schema that does not already exist. The schema must be owned by the connecting user or by a group that contains the connecting user.\n\n#### PostgreSQL Account\n\nWhen setting up your PostgreSQL database for use with RStudio, ensure that you do not use the default `postgres` user account that comes with a standard installation. This is to ensure that your database is secure. Always ensure that whichever account that is used to access the database contains a strong password - do **not** use an account that has no password! You should also ensure that only one PostgreSQL user has access to the RStudio database for maximum security.\n\n#### PostgreSQL Password Encryption\n\nA plain-text password in the `password` or `connection-uri` options of the `/etc/rstudio/database.conf` file must only be used temporarily for testing purposes. A warning will be present in RStudio log output when a plain-text password is being used.\n\nWe strongly recommend encrypting the password using the command `rstudio-server encrypt-password`. This way, if you have to backup your configuration, save it to a repository or share it with RStudio Support, your PostgreSQL password will be protected.\n\nUse the following steps to encrypt the PostgreSQL password:\n\n- Remove the password from the `connection-uri` option if defined in the `database.conf` file.\n- Run the command `sudo rstudio-server encrypt-password` and enter the PostgreSQL password.\n- Copy the resulting encrypted password printed in the terminal.\n- Add or replace the `password` option in the `database.conf` file using the encrypted password copied above.\n- Restart RStudio. Confirm it operates normally. You should no longer see a warning about plain-text password in RStudio logs.\n\n::: {.callout-note}\nAlternatively, you can also \"pipe\" your password to the `rstudio-server encrypt-password` command to skip the prompt. Useful when the password is already stored elsewhere. For example:\n\n```bash\ncat passwordfile | sudo rstudio-server encrypt-password\n```\n:::\n\nThe password encryption uses the `secure-cookie-key` value. By default RStudio generates this key during installation and stores it in `/var/lib/rstudio-server/secure-cookie-key`.\n\nThe same key value must be used for both encryption and decryption. If the key value used to encrypt the PostgreSQL password changes, the password must be re-encrypted with the new key and updated in `/etc/rstudio/database.conf`.\n\nIf preparing RStudio configuration files on one system for deployment on other system(s), you must manually generate a key and store it in `/etc/rstudio/secure-cookie-key`, then encrypt the password again, update `/etc/rstudio/database.conf`, and ensure this `secure-cookie-key` file is deployed along with other RStudio configuration files. The technique for creating this file is described in [Generating a Key].\n\n#### PostgreSQL Connection Testing and Troubleshooting\n\nOnce the settings have been entered in `/etc/rstudio/database.conf`, use the `sudo rstudio-server verify-installation` command to test connectivity and quickly view errors and warnings.\n\n### Connection Pool\n\nRStudio will create a pool of connections to the database at startup. The size of this pool defaults to the number of logical CPUs on the host running RStudio Workbench, up to 20. It is not generally recommended that you adjust the size of this pool manually unless you need to address a specific problem, such as exceeding a connection limit on the database or experiencing delays in RStudio Workbench caused by unavailable connections. \n\nIf you do need to adjust the size of the pool, you can do so by setting `pool-size` in `database.conf` as follows:\n\n*/etc/rstudio/database.conf*\n\n```ini\npool-size=5\n```\n\n## Migration\n\nWhen changing database providers, you **must** migrate your existing database data from your current database provider to the new provider to prevent unexpected data loss.\n\nThe following steps should be taken to perform a successful migration from SQLite to PostgreSQL:\n\n1. Create an empty database called `rstudio` in PostgreSQL (or any custom name according to your RStudio configuration below). Ensure the connection credentials work for the new database.\n2. Stop RStudio.\n3. Switch to PostgreSQL by modifying the *`/etc/rstudio/database.conf`* file. If you are storing the SQLite database in a different location be sure to keep the `directory` option in the file during the migration.\n4. Run the command `sudo rstudio-server migrate-db`. Watch for the output and confirm that the migration was successful.\n5. Once the data has been imported to the new database, restart RStudio.\n\n::: {.callout-note}\nThe migration from PostgreSQL to SQLite is not currently supported.\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "dependencies": {
      "type": "includes",
      "data": []
    },
    "preserve": {},
    "postProcess": null
  }
}