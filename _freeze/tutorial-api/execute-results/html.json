{
  "hash": "8b111a599172e9f3a7f64e402ea9d641",
  "result": {
    "markdown": "---\nknit: quarto render\n---\n\n# Tutorial API {.pro-header}\n \n## Overview\nThe Tutorial API provides an interface for driving automated interactions with the RStudio IDE. The Tutorial API assumes that RStudio is hosted within an `<iframe>` with the hosting page content surrounding it (e.g. in a sidebar).\n\nThe hosting `<iframe>` must be connected to the DOM and have non-zero dimensions (including not having the `display: none` style) when the IDE is loaded into it.\n\nThe API supports a variety of interactions with the IDE including typing console input, opening source files, opening projects, creating projects, showing help topics, and executing arbitrary R code.\n\nThis document describes the basic workings of the Tutorial API, and related settings. A simple example page is provided to demonstrate invoking the APIs.\n\nThe Tutorial API files are installed with RStudio Workbench in:\n\n*/usr/lib/rstudio-server/extras/tutorial*\n\n- **demo.htm** is an example host page\n- **rstudio.js** is used by a hosting page to interact with the Tutorial API; always use the version of rstudio.js that came with the installed version of RStudio Workbench and ensure it is cache-busted to prevent web browsers from using an older cached version (one option would be to rename it and reference it via that new name, e.g. rstudio001.js)\n\n::: {.callout-important}\nThese instructions, and the example page itself, assume the following regarding the domains utilized:\n\n  - The demo host page is served from domain <http://localhost:8080>\n  - The RStudio IDE is served from domain <http://localhost:8787>\n\nIf the IDE is being served from a different domain than <http://localhost:8787> edit the **demo.htm** file and change all instances of <http://localhost:8787> to the actual domain where the IDE is available.\n:::\n\n\n## Configuration\n\nThis section describes how to configure the example page, shown below. The upper-region has controls for experimenting with the Tutorial API calls, and the lower region is an `<iframe>` hosting RStudio Workbench.\n\n![Example Page](images/TutorialAPIDemo.png)\n\n### Allow IFrame\nFor security reasons, RStudio will not load inside a browser frame (such as an IFrame) by default. You can modify this behavior by using the `www-frame-origin` option. See [Frame Origin] for full details.\n\nTo enable the Tutorial API example page to host RStudio Workbench on a **non-production localhost server**, do the following:\n\n*/etc/rstudio/rserver.conf*\n\n```ini\nwww-frame-origin=http://localhost:8080\n```\n\n::: {.callout-note}\nIf the `www-frame-origin` option is set to `same` or `any` instead of a URI, you must add the following setting with the actual URI:\n:::\n\n\n*/etc/rstudio/rsession.conf*\n\n```ini\ntutorial-api-client-origin=http://localhost:8080\n```\n\n### Enable API Calls from Host Page\nTo enable calling the Tutorial APIs from the hosting page:\n\n*/etc/rstudio/rsession.conf*\n\n```ini\ntutorial-api-enabled=1\n```\n\n### Enable Callbacks from RStudio to Host Page\nRStudio may optionally notify the hosting page of certain events using the JavaScript PostMessage mechanism.\n\nThe receiver is responsible for parsing, interpreting, and reacting to the value of the callbacks. Any JavaScript running in the context of the IDE IFrame could do an arbitrary SendMessage to the parent (in addition to those being generated by the RStudio IDE JavaScript). The host page should ensure the response string is valid JSON, and follows one of the patterns described in [Tutorial API Callbacks].\n\nTo enable callbacks:\n\n*/etc/rstudio/rsession.conf*\n\n```ini\ntutorial-api-parent-notify-enabled=1\n```\n\n### Disable RStudio Workbench Home Page\nThe Tutorial API cannot be used to manipulate the RStudio Workbench Home Page. To disable the home page:\n\n*/etc/rstudio/rserver.conf*\n\n```ini\nserver-user-home-page=0\n```\n\n::: {.callout-note}\nThe `server-user-home-page` setting is automatically forced on if Job Launcher sessions are enabled via `launcher-sessions-enabled=true` in `/etc/rstudio/rserver.conf`.\n:::\n\n\n### Disable Multiple Session Support\nEven with the Home Page disabled, a user can still open new sessions via Session / New Session which will open a new IDE instance outside of the host page. To prevent this:\n\n*/etc/rstudio/rserver.conf*\n\n```ini\nserver-multiple-sessions=0\n```\n\nIf multiple sessions are disabled, the Home Page is automatically turned off, so not necessary to include both settings.\n\n::: {.callout-note}\nThe `server-multiple-sessions` setting is automatically forced on when Job Launcher sessions are enabled via `launcher-sessions-enabled=true` in `/etc/rstudio/rserver.conf`.\n:::\n\n\n### Serve the Example Page\n\nServe the folder `/usr/lib/rstudio-server/extras/tutorial` with a web server. For example, change to that directory in a terminal and run this command:\n\n`python -m SimpleHTTPServer 8080`\n\nLoad <http://localhost:8080/demo.htm> in a web browser and you should see the page shown earlier.\n\n## Interface\n\nYou can access the Tutorial API by including `rstudio.js` within your host page. This will enable you to instantiate an **RStudio** object that has a connection to the RStudio IDE within an IFrame. For example, if the IDE were hosted in an IFrame as follows:\n\n```html\n<iframe id=\"rstudio\" src=\"http://localhost:8787\"></iframe>\n```\n\nThen you would instantiate an RStudio object as follows:\n\n```js\nvar RStudio = new RStudio(document.getElementById(\"rstudio\"), \n                          \"http://localhost:8787\",\n                          function() { // onReady callback\n                             console.log(\"API is ready!\");\n                          },\n                          function(responseJSON) { // parent-notify callback\n                             console.log(responseJSON);\n                          });\n```\n\nThe third argument is a callback that will be invoked once the RStudio API is ready to be called (i.e. once the IDE has loaded). Note that you should be sure to instantiate this object before the IFrame containing the IDE is fully loaded (if you don't then you might miss the onReady callback). The best way to do this is to either:\n\n1. Create the object immediately after defining the IFrame within the host page; or\n\n2. More conservatively, create the IFrame, then create the object, then provide the src to the IFrame (this is however almost certainly not necessary and #1 should suffice). \n\nThe fourth argument is a callback that will be invoked when certain events described below in [Tutorial API Callbacks] are emitted by the IDE. These are only emitted if `tutorial-api-parent-notify-enabled=1` was set as described earlier. The response will be a text string in JSON format, as described below in [Tutorial API Callbacks].\n\n## Tutorial API Methods\n\nMethods are asynchronous and do not directly return a result.\n\nIf **Report Result** is **true** below then that API will attempt to invoke a **success** or **error** callback when it completes, but this is never guaranteed.\n\nMethods which report a result take an optional final string parameter **callerID** which will be returned in both success and error callbacks. This can be used to correlate calls and responses.\n\nThe **RStudio** object supports the following methods:\n\nMethod                   | Description                                                                                        | Reports Result\n------------------------ | -------------------------------------------------------------------------------------------------- | ---\n`isReady()` | Is the RStudio API available yet? (has the IDE loaded) | No\n`consoleInput(code)` | Type input in the R console and execute it. | No\n`consoleClear()` | Clear all previous input and output from the console. | No\n`consoleMaximize()` | Maximize the console so it occupies the full height of the IDE. | No\n`executeR(code)` | Execute arbitrary R code within the global environment. | No\n`openFile(file, location)` | Open the specified source file and (optionally) navigate it to a specific location. The `location` parameter can either be a line number (e.g. `42`) or a regular expression delimited by `/` (e.g. `/foo/`). | No\n`helpTopic(topic)` | Navigate the help pane to a topic. The topic should be a namespace qualified reference to package documentation (e.g. `graphics::plot`). Note that help topics defined within the base package do not need qualification. | No\n`helpDoc(doc)` | Show a markdown (.md) or R Markdown (.Rmd) document within the help pane. | No\n`saveAllSourceDocs()`| Save all unsaved source documents. | No\n`quitSession()` | Quit session. User cannot cancel but is prompted to save files and workspace if needed. | No\n`createProjFromGit(repoUrl, projDir, parentDir, [callerID])` | Clone a project from Git and open it. | Yes\n`createNewProj(projDir, parentDir, createRepo, [callerID])` | Create and open a new project. | Yes\n`openProj(projFile, [callerID])` | Open an existing project, can specify existing .Rproj, or just the folder. | Yes\n`getState([callerID])` | Request info on current RStudio IDE state. | Yes\n\n### Example Calls\nHere are some sample JavaScript calls, followed by the response JSON.\n\n#### Clone project from github and open it (with callerID = 'abcd')\n```js\ncreateProjFromGit('https://github.com/rstudio/rstudioapi', 'rstudioapi', '~/R', 'abcd');\n```\n```json\n{\n  \"message\":\"success\",\n  \"api\":\"createProjFromGit\",\n  \"result\":\"\",\n  \"callerID\":\"abcd\"\n}\n```\n\n#### Create an new project but don't create a git repo (no callerID)\n```js\ncreateNewProj('myproj', '~/R', false);\n```\n```json\n{\n  \"message\":\"success\",\n  \"api\":\"createNewProj\",\n  \"result\":\"\"\n}\n```\n\n#### Try to open a project that doesn't exist\n```js\nopenProj('~/myproj', 'abcd');\n```\n```json\n{\n  \"message\":\"error\",\n  \"api\":\"openProj\",\n  \"result\":\"Unable to find .Rproj file in [~/myproj]\",\n  \"callerID\":\"abcd\"\n}\n```\n\n## Tutorial API Callbacks\n\nAs seen in the examples above, the callback returns JSON. The following are examples of calls that trigger callbacks.\n\nMethod                   | Description                                   | Example payload\n------------------------ | --------------------------------------------- | -----------------------------------------------------\ngetState | response from `getState` | See examples below\nerror | a prior API call failed | {\"message\": \"error\", \"api\": \"createProjFromGit\", \"result\": \"access denied\", \"callerID\": \"abcd\"}\nsuccess | a prior API call succeeded | {\"message\": \"success\", \"api\": \"createProjFromGit\", \"callerID\": \"abcd\"}\n\nThere are also callbacks sent directly by RStudio (i.e. not in response to Tutorial API calls).\n\nMethod                   | Description                                   | Example payload\n------------------------ | --------------------------------------------- | -----------------------------------------------------\nfileSave | contents of a file loaded in RStudio IDE were saved (including auto-save of content and/or metadata) | {\"message\": \"fileSave\"}\nsessionDisconnect | connection between RStudio IDE and its rsession process was closed | {\"message\": \"sessionDisconnect\"}\nsessionSuspend | the rsession process has been suspended | {\"message\": \"sessionSuspend\"}\n\n### getState\n\nThe `getState()` method returns the path to the currently loaded .Rproj (if any) and any git remotes.\n\nThe results come via the callback. Here are some examples.\n\n#### Project with remotes\n```json\n{\n  \"message\": \"getState\",\n  \"callerID\": \"abcd\",\n  \"project\": \"~/aaa/aaa.Rproj\",\n  \"remotes\": [\n    {\n      \"active\": true,\n      \"remote\": \"origin\",\n      \"type\": \"fetch\",\n      \"url\": \"https://github.com/rstudio/aaa\"\n    },\n    {\n      \"active\": true,\n      \"remote\": \"origin\",\n      \"type\": \"push\",\n      \"url\": \"https://github.com/rstudio/aaa\"\n    }\n  ]\n}\n```\n#### Project with no remotes\n```json\n{\n  \"message\": \"getState\",\n  \"callerID\": \"abcd\",\n  \"project\": \"~/localproj/localproj.Rproj\",\n  \"remotes\": []\n}\n```\n\n#### No project and no remotes\n```json\n{\n  \"message\": \"getState\",\n  \"callerID\": \"abcd\",\n  \"project\": null,\n  \"remotes\": []\n}\n```",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "dependencies": {
      "type": "includes",
      "data": []
    },
    "preserve": {},
    "postProcess": null
  }
}