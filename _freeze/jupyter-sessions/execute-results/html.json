{
  "hash": "9669e3ec9383bb1ebd54c35c9009f36e",
  "result": {
    "markdown": "---\nknit: quarto render\n---\n\n# Jupyter Sessions {.pro-header}\n \n## Overview\n\nRStudio Workbench allows you to launch Jupyter sessions from the home page via the Job Launcher, if configured. Users have the option of starting either JupyterLab or Jupyter Notebook sessions that allow them to work with Jupyter while still working within the administrative framework provided by RStudio, such as authentication, PAM session management, etc. \n\n::: {.callout-note}\nBefore Jupyter sessions can be launched, the Job Launcher must be setup correctly. For more information, see the [Job Launcher] section.\n:::\n\n## Configuration\n\n### Jupyter configuration\n\nConfiguration of the Jupyter feature is handled via the config file `/etc/rstudio/jupyter.conf`. Note that this file is not automatically created by RStudio, and must be created before being configured, and the Jupyter feature is disabled by default. The following table lists the various configuration options that are available to be specified in the `jupyter.conf` configuration file:\n\n**/etc/rstudio/jupyter.conf**\n\nConfig Option | Description | Default Value\n------------------------ | --------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------ | -------------------------\nlabs-enabled | Enables launching of JupyterLab sessions. | 0 (disabled)\nnotebooks-enabled | Enabled launching of Jupyter Notebook sessions. | 0 (disabled)\njupyter-exe | Path to the Jupyter executable. | /usr/local/bin/jupyter\nlab-command | The Jupyter command to run when starting a Lab session. | lab\nlab-version | The version of Jupyter Lab being used. If set to `auto`, the version is automatically detected by running the Jupyter Lab version command. If Jupyter is being launched via the Launcher and is not installed locally, you are strongly encouraged to set this to the version in use. Running against multiple different Jupyter versions simultaneously in different Launcher clusters is not supported - they must all be running the same version, or proxying issues will occur. | auto\nlab-args | Arguments to be passed to the Jupyter Lab command. Note that this does not override the default value - if you wish to use some of the default arguments, you must contain the default arguments in the configuration value. It is strongly recommended that you do not change this unless you know what you're doing! | \\--no-browser \\--allow-root \\--ip=0.0.0.0 \nnotebook-command | The Jupyter comman to run when starting a Notebook session. | notebook\nnotebook-version | The version of Jupyter Notebook being used. If set to `auto`, the version is automatically detected by running the Jupyter Notebook version command. If Jupyter is being launched via the Launcher and is not installed locally, you are strongly encouraged to set this to the version in use. Running against multiple different Jupyter versions simultaneously in different Launcher clusters is not supported - they must all be running the same version, or proxying issues will occur. | auto\nnotebook-args | Arguments to be passed to the Jupyter Notebook command. Note that this does not override the default value - if you wish to use some of the default arguments, you must contain the default arguments in the configuration value. It is strongly recommended that you do not change this unless you know what you're doing! | \\--no-browser \\--allow-root \\--ip=0.0.0.0\nsession-clusters | List of available Job Launcher clusters for launching Jupyter sessions. Leave blank to specify all clusters. |\ndefault-session-cluster | The default Job Launcher cluster to use when launching a Jupyter session. |\ndefault-session-container-image | The default container image to use when launching a containerized Jupyter session. |\nsession-container-images | Comma-delimited list of images that may be used for running Jupyter sessions. |\njupyter-session-path | Path to the Jupyter Session launcher executable/script. It is recommended that you do not change this unless you know what you're doing, and you need to point to a different script. | /usr/lib/rstudio-server/bin/jupyter-session-run\nsession-no-profile | Enables/disables running of bash profile scripts when starting Jupyter sessions. | 0 (run profile scripts)\nsession-cull-minutes | The amount of idle time to wait in minutes before a Jupyter session's kernels and terminals is automatically \"culled\" (shut down). To disable culling, set the value to `0`. Enabling this sets the following Jupyter arguments: `--MappingKernelManager.cull_interval=60 --MappingKernelManager.cull_idle_timeout=<60 * session-cull-minutes value>` | 120\nsession-shutdown-minutes | The amount of idle time to wait in minutes before a Jupyter session is shut down after its kernels and terminals have been culled. To disable automatic shutdown, set the value to `0`. This setting sets the the following Jupyter arguments: `--NotebookApp.shutdown_no_activity_timeout=<60 * session-shutdown-minutes value> --LapApp.shutdown_no_activity_timeout=<60 * session-shutdown-minutes value>` | 5\nsession-cull-connected | Whether or not to cull sessions that have a browser connected. Regardless of this setting, only idle (unused) sessions are culled. Sets the `--MappingKernelManager.cull_connected` Jupyter setting. | 1 (true)\n\nFor example, your `jupyter.conf` file might look like the following:\n\n**/etc/rstudio/jupyter.conf**\n\n```ini\njupyter-exe=/usr/bin/jupyter\nlabs-enabled=1\nnotebooks-enabled=1\nsession-cull-minutes=240\ndefault-session-cluster=Kubernetes\ndefault-session-container-image=rstudio:jupyter-session\n```\n\n### Jupyter Versions\n\nCurrently, RStudio Workbench supports JupyterLab 2.x and 3.x, as well as Jupyter Notebooks 6.x. Due to differences between Jupyter versions, RStudio Workbench needs to know the versions of Jupyter Notebook and Jupyter Lab that are in use. They can be automatically detected by RStudio Workbench on start up by running the Jupyter command, or can be specified by using the `lab-version` and `notebook-version` settings in */etc/rstudio/jupyter.conf*. Automatic version detection is done if the default value of `auto` is used.\n\nIf you are running Jupyter in a remote cluster like Kubernetes, you will need to manually specify the version of Jupyter if it is not locally installed or is not running the same version as the remote cluster. Due to differences in routing, running against multiple different versions of Jupyter in different Launcher clusters simultaneously is not supported - the versions must match in all clusters.\n\nYou should specify a full Jupyter 3-part version number like so:\n\n**/etc/rstudio/jupyter.conf**\n\n```ini\nlab-version=3.0.6\nnotebook-version=6.2.0\n```\n\n### Launcher Configuration\n\nWhen creating containerized Jupyter sessions via the Job Launcher, you will need to specify mount points as appropriate to mount the users' home drives and any other desired paths. In order for sessions to run properly within containers, it is **required** to mount the home directories into the containers.\n\nFor more information, see [Launcher Mounts]. Note that you can specify the `Workbench` with either `JupyterLab` or `Jupyter Notebook` to configure mount entries that should only be mounted for JupyterLab and Jupyter Notebook sessions, respectively.\n\n::: {.callout-note}\nIf you are using NFSv3 for the shared storage for user home directories, you will need to set the `local_lock=all` NFS setting in /etc/fstab in order for Jupyter sessions to work properly. Failure to do this will cause Jupyter sessions to hang. For this reason, we strongly recommend the use of NFSv4 for Jupyter sessions. See the [NFS documentation](https://linux.die.net/man/5/nfs) for information on NFS settings.\n:::\n\n::: {.callout-note}\nOnly a user's home folder is visible within Jupyter sessions. To access other folders, create symbolic links to them within the home folder. \n:::\n\n\n### Container Configuration\n\nWhen running Jupyter sessions in containers, such as by using the Kubernetes Job Launcher plugin, you will need to ensure that the image(s) used to launch Jupyter sessions contain, at minimum, the following:\n\n1) Python 2.7 or Python 3.x\n2) JupyterLab and/or Jupyter Notebook installation\n3) RStudio session binaries\n4) If creating container users (see [Server Configuration]), you must have the `libuser1-dev` or `libuser-devel` packages, depending on your platform to install the libuser library and development tools. \n\nFor ease of use, it is recommended that you use the `r-session-complete` Docker image as a base for any Jupyter session images you intend to create. This will allow you to use that one base image to provide Jupyter itself and a default version of Python, which you can extend if necessary to add/modify Jupyter versions or add additional versions of Python if desired. See [Docker Hub](https://hub.docker.com/r/rstudio/r-session-complete) for more information.\n\n### Installing the Jupyter Notebook Plugin\n\nRStudio Workbench can further integrate with Jupyter Notebooks by utilizing the `rsp-jupyter` Jupyter Notebook plugin. This plugin will automatically track and write recently opened notebooks to the Workbench homepage under the *Recent Projects* section, and also provides an easy way for users to leave their notebooks and return to the homepage.\n\nIf running Workbench in containers via the `r-session-complete` Docker image, you do not need to install the Notebook plugin, as it comes with the container. Otherwise, to install and enable the plugin, run the following commands:\n\n```bash\npip install rsp_jupyter\njupyter-nbextension install --sys-prefix --py rsp_jupyter\njupyter-nbextension enable --sys-prefix --py rsp_jupyter\n```\n\nIf you need to uninstall the plugin for whatever reason, run the following command:\n\n```bash\njupyter-nbextension uninstall --sys-prefix --py rsp_jupyter\n```\n\nTo upgrade the plugin, you must first uninstall and then reinstall it.\n\n### Adding Python Environments to Jupyter\n\nYou can add new Python virtual environments or conda environments to Jupyter as Python Kernels that users can select, allowing them to have flexibility in the Python versions they can use.\n\nThe following steps show how to add a new Python virtualenv as a Kernel to Jupyter:\n\n1. Create the virtualenv or conda environment\n2. Add the environment as an iPython kernel\n3. Verify the kernel is available in Jupyter\n\n```bash\n# first, create the virtual env in a directory accessible by all users\ncd /opt/python-kernels\n\n# then make the virtualenv\nvirtualenv myenv\n\n# alternatively, you can make a conda environment\n# conda create -n myenv\n\n# then, add the virtualenv to the Kernels list globally for all users\nsudo ipython kernel install --name \"myenv\" --display-name \"My Python Environment\"\n\n# finally, verify that the kernel is registered with Jupyter\nsudo jupyter kernelspec list\n```\n\nOnce the Kernel is listed in the output of the `jupyter kernelspec list` command, it will be available for use in both JupyterLab and Jupyter Notebooks.\n\nTo remove the kernel, simply run the following command:\n\n```bash\nsudo jupyter kernelspec remove \"myenv\"\n```\n\nFor more information, see the [IPython docs](https://ipython.readthedocs.io/en/stable/install/kernel_install.html).\n\n### Installing JupyterLab Extensions\n\nWith the release of JupyterLab 3, it is now easier for system administrator to add extensions to Jupyter by using `pip`. Simply `pip install` the extension you want, and it will show up in JupyterLab sessions launched from RStudio Workbench.\n\nFor example, to install the `jupyterlab-kernelspy` extension using pip:\n\n```bash\npip install jupyterlab-kernelspy\n```\n\n> Note: You will need to install the desired extensions on all Launcher nodes that are running JupyterLab sessions. For containerized sessions, the extension must be installed in the container image(s) that are used.\n\nThere is no need to explicitly enable or disable the extension. Once installed, active sessions can see the extension after refreshing the browser. Other extensions can be found on the [Pypi.org site](https://pypi.org).\n\nIn previous versions of JupyterLab, you needed to install packages from source and build them with `nodejs`. This flow is still supported, but installing prebuilt extensions via `pip` is much simpler. For more information, see the [JupyterLab extension docs](https://jupyterlab.readthedocs.io/en/stable/user/extensions.html).\n\n## Troubleshooting\n\nIf you experience issues related to running Jupyter sessions, you can use the Launcher verification tool which will attempt to launch both RStudio and Jupyter launcher sessions and provide diagnostic output about what could be going wrong. For more information, see the [Troubleshooting](#launcher-troubleshooting) section for the Job Launcher integration documentation.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "dependencies": {
      "type": "includes",
      "data": []
    },
    "preserve": {},
    "postProcess": null
  }
}