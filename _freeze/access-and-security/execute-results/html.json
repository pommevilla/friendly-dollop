{
  "hash": "a61ae95715c7797cf4672db741edd10a",
  "result": {
    "markdown": "---\nknit: quarto render\n---\n\n# Access and Security\n\n## Network Port and Address\n\nAfter initial installation RStudio accepts connections on port 8787. If you wish to listen on a different another port you can modify the `www-port` option. For example:\n\n*/etc/rstudio/rserver.conf*\n\n```ini\nwww-port=80\n```\n\nBy default RStudio binds to address 0.0.0.0 (accepting connections from any remote IP). You can modify this behavior using the `www-address` option. For example:\n\n*/etc/rstudio/rserver.conf*\n\n```ini\nwww-address=127.0.0.1\n```\n\nNote that changes to the configuration will not take effect until the server is restarted. \n\n## IP Access Rules {.pro-header}\n\nRStudio Workbench can be configured to deny access to specific IP addresses or ranges of addresses.  Access rules are defined in the configuration file `/etc/rstudio/ip-rules` \n\nAccess rules are established using the `allow` and `deny` directives and are processed in order, with the first matching rule governing whether a given address is allowed or denied. For example, to allow only clients within the `192.168.1.0/24` subnet but also deny access to `192.168.1.10` you would use these rules:\n\n*/etc/rstudio/ip-rules*\n\n```ini\ndeny    192.168.1.10\nallow   192.168.1.0/24\ndeny    all\n```\n\nAll clients outside of the specified subset are denied access because of the `deny all` rule at the end of the configuration.\n\nNote that changes to the configuration will not take effect until the server is restarted. \n\n## Frame Origin\n\nFor security reasons, RStudio will not load inside a browser frame (such as a frameset or IFrame) by default. You can modify this behavior by using the `www-frame-origin` option. For example, if you would like to host RStudio inside a browser frame at `example.com`, you can tell RStudio to allow this as follows:\n\n*/etc/rstudio/rserver.conf*\n\n```ini\nwww-frame-origin=example.com\n```\n\nThere are several special values available for the `www-frame-origin` option:\n\n| Value                | Meaning                                            |\n| -------------------- | -------------------------------------------------- |\n| `none`               | The default; do not allow RStudio to load in any frame. |\n| `same`               | Allow RStudio to load in a frame if it has the same origin (host and port) as RStudio. |\n| `any`                | Allow RStudio to load in a frame from any origin (not recommended) |\n| *my-domain.com*      | Allow RStudio to load in a frame at *my-domain.com* |\n\nTo interact programmatically with RStudio in an IFrame, see the [Tutorial API].\n\n## Same Site cookies\n\nMost browsers have adopted recently a new attribute for cookies called `SameSite` which enforces additional security requirements around the cookie. RStudio does not define this attribute by default but you can use the option `www-same-site` for that purpose.\n\nFor example, the value `SameSite=None` is required by certain browsers (i.e. Chrome 84+) for embedding sites into an IFrame or frameset. To ensuring the delivery of RStudio cookies in this scenario, use the value `www-same-site=none`.\n\n*/etc/rstudio/rserver.conf*\n\n```ini\nwww-same-site=none\n```\n\n::: {.callout-important}\n`SameSite=None` is insufficient without SSL enabled and may still prevent RStudio from working over non-SSL connections.\n:::\n\nSome browsers will not behave as expected in the presence of the `SameSite=None`; Safari 12 on MacOS 10.14 and iOS 12.x or older notably will not work. To workaround these limitations, RStudio will emit a pair of cookies, one with `SameSite=None` for standard-conforming browsers and a \"legacy\" cookie without `SameSite` for non-conforming browsers.\n\nYou also can use the value `www-same-site=lax` to mark cookies as `SameSite=Lax` what effectively prohibits the use of RStudio embedded into an IFrame or frameset on compliant browsers by blocking all RStudio cookies.\n\n*/etc/rstudio/rserver.conf*\n\n```ini\nwww-same-site=lax\n```\n\n## Compatibility with Safari 13+\n\nStarting in Safari 13, if you are loading RStudio inside a browser frame on a completely different domain all cookies will be blocked because those will be considered third-party cookies.\n\nEmbedding RStudio in a subdomain of the main site causes its cookies to be considered first-party, allowing RStudio to work.\n\nAlternatively, you can place RStudio in the same domain as the main wrapping site but under a different URL path. This requires using a proxy in front of both the main site and RStudio. See [Running with a Proxy] below for more information.\n\n::: {.callout-note}\nIn the near future, most browsers vendors plan to apply the same restrictions to cookies in some degree.\n:::\n\n## Additional Security Considerations\n\nTo help mitigate against CSRF attacks, RStudio can automatically reject any request originating from an `Origin` or `Referer` that does not match the `Host`, `X-Forwarded-Host`, `Forwarded: host` or `X-RStudio-Request` headers. To enable this check, add the following configuration:\n\n*/etc/rstudio/rserver.conf*\n\n```ini\nwww-enable-origin-check=1\n```\n\nIn some cases, such as if running behind a proxy that you cannot modify, this check may be too strict, and can prevent access to RStudio, causing requests to return a 400 status. In such cases, it is recommended that you disable the check. Origin checking is currently disabled by default, but will likely be enabled by default in a future version of RStudio. \n\nYou may wish to consider some origins to be safe in all cases, causing RStudio to consider such `Origin` or `Referer` values to be allowed instead of being rejected, even if they do not match a Host header. To specify such origins, add each of them as a `www-allow-origin` setting in `rserver.conf`. For example:\n\n*/etc/rstudio/rserver.conf*\n\n```ini\nwww-allow-origin=mysubdomain.mydomain.com\nwww-allow-origin=*.mydomain2.com\n``` \n\nNote that wildcards (`*`) are accepted and will match any character, including hostname separators. For instance, the previous example of `*.mydomain2.com` will match both `foo.bar.mydomain2.com` and `foo.mydomain2.com`.\n\n## Additional Headers\n\nIn some cases, you may need to have RStudio set additional headers on client responses. To do this, simply specify `server-add-header` for each header that you need to add, in the form `Header Name:Header Value`. For example, to have the server set a few extra custom headers:\n\n*/etc/rstudio/rserver.conf*\n\n```ini\nserver-add-header=X-Header-1:Value 1\nserver-add-header=X-Header-2:Value 2\n```\n\n## Secure Sockets (SSL) {.pro-header}\n\n### SSL Configuration\n\nIf your RStudio Workbench is running on a public network then configuring it to use SSL (Secure Sockets Layer) encryption is strongly recommended. You can do this via the `ssl-enabled` setting along with related settings that specify the location of your SSL certificate and key. For example:\n\n*/etc/rstudio/rserver.conf*\n\n```ini\nssl-enabled=1\nssl-certificate=/var/certs/your_domain_name.crt\nssl-certificate-key=/var/certs/your_domain_name.key  \n```\n\nThe `.crt` file should be encoded in the PEM format; that is, the first line should read `-----BEGIN CERTIFICATE-----`, and the contents should be base64-encoded data. If your certificate is in another format, such as DER or PKCS, use the `openssl` command-line tool to convert it to PEM. For example:\n\n```\nopenssl x509 -inform DER -outform PEM -text -in your_domain_name.der -out your_domain_name.crt\n```\n\nIt's important when installing the certificate `.crt` file that you concatenate together any intermediate certificates (i.e. the generic one from your certificate authority) with the certificate associated with your domain name. For example you could use a shell command of this form to concatenate the CA intermediate certificate to your domain name's certificate:\n\n```bash\n$ cat certificate-authority.crt >> your_domain_name.crt\n```\n\nThe resulting file should then be specified in the `ssl-certificate` option.\n\nIt's also important to ensure that the file permissions on your SSL certificate key are as restrictive as possible so it can't be read by ordinary users. The file should typically be owned by the `root` user and be set as owner readable and writable. For example:\n\n```bash\n$ sudo chmod 600 /var/certs/your_domain_name.key \n```\n\n### SSL Protocols\n\nBy default RStudio Workbench supports the TLSv1, TLSv1.1, TLSv1.2, and TLSv1.3 protocols for SSL. The list of supported protocols can configured via the `ssl-protocols` option. For example, to use only the TLSv1.1 and TLSv1.2 protocols you would use:\n\n*/etc/rstudio/rserver.conf*\n\n```bash\nssl-protocols=TLSv1.1 TLSv1.2\n```\n\nThe list of supported protocols is space delimited (as illustrated above). Valid protocol values are: `SSLv2`, `SSLv3`, `TLSv1`, `TLSv1.1`, `TLSv1.2`, and `TLSv1.3`.\n\nNote that not all protocols may be available on your system; TLS 1.1 and 1.2 require OpenSSL 1.0.1, and TLS 1.3 requires OpenSSL 1.1.1 built with TLS 1.3 support.\n\n## SSL Ports {.pro-header}\n\nWhen RStudio Workbench is configured to use SSL the default behavior with respect to ports is:\n\n1) SSL is bound to port 443 (enabling access using the standard https protocol within the browser)\n2) The server also listens on port 80 and redirects all requests to port 443 (allowing users to specify the domain without the https protocol and be automatically redirected to the secure port)\n\nHowever, if SSL is bound to another port (using the `www-port` option) then the automatic redirect behavior is not enabled. It's also possible to disable automatic SSL redirects entirely using the `ssl-redirect-http` option as follows:\n\n*/etc/rstudio/rserver.conf*\n\n```ini\nssl-redirect-http=0\n```\n\nNote that changes to the configuration will not take effect until the server is restarted. \n\n### Strict Transport Security\n\nWhen SSL is enabled, RStudio Workbench sends an HTTP Strict Transport Security (HSTS) header, `Strict-Transport-Security`, by default on outbound responses. This header tells the browser to forbid all HTTP connections to the domain for a period of time.\n\nRStudio Workbench sets this period of time to 1 day (84600 seconds) by default, because if HTTPS issues arise it can be difficult to address them when the browser is locked to HTTPS because of HSTS. Once you are confident that your HTTPS setup is correct, you can increase the period by specifying the desired number of seconds in the `ssl-hsts-max-age` option. For example, to lock browsers to HTTPS for one year:\n\n*/etc/rstudio/rserver.conf*\n\n```ini\nssl-hsts-max-age=31536000\n```\n\nIf all subdomains of the server on which RStudio Workbench is hosted support HSTS, you can extend HSTS protection to them as well with the `ssl-hsts-include-subdomains` option. This doesn't happen by default since RStudio Workbench does not know what other services it's sharing a domain with, but it's a recommended security best practice, so you should turn it on if you can.\n\n*/etc/rstudio/rserver.conf*\n\n```ini\nssl-hsts-include-subdomains=1\n```\n\nFinally, we do not recommend disabling HSTS, but if you need to, you can do so by setting `ssl-hsts=0`. \n\n## Cookies\n\nBy default, when RStudio Workbench is configured with SSL, all authorization cookies are marked with the `secure` cookie attribute. If you wish to use your own SSL termination but force RStudio to mark cookies as `secure`, you can add the following configuration option:\n\n*/etc/rstudio/rserver.conf*\n\n```ini\nauth-cookies-force-secure=1\n```\n\n## Server Permissions \n\n### Server Account\n\nRStudio runs as the system root user during startup and then drops this privilege and runs as a more restricted user. RStudio then re-assumes root privilege for a brief instant when creating R sessions on behalf of users (the server needs to call `setresuid` when creating the R session, and this call requires root privilege). \n\nThe user account that RStudio runs under in the normal course of operations is `rstudio-server`. This account is automatically added to the system during installation and is created as a system rather than end user account (i.e. the `--system` flag is passed to `useradd`).\n\n#### Alternate Server Account\n\nYou can configure RStudio so that it will run from an alternate account with the following steps:\n\n1. Create a new system user (if the one you want to use doesn't already exist)\n2. Assign this user to the `server-user` option in the `/etc/rstudio/rserver.conf` configuration file (see example below)\n3. Restart RStudio\n\nFor example, to shutdown the server and create a new system user named `rs-user` you'd use the following commands:\n\n```bash\nsudo rstudio-server stop\nsudo useradd --system rs-user\n```\n\nThen edit the `/etc/rstudio/rserver.conf` configuration file as follows:\n\n*/etc/rstudio/rserver.conf*\n\n```ini\nserver-user=rs-user\n```\n\nFinally, restart RStudio to begin running under the new user:\n\n```bash\nsudo rstudio-server start\n```\n\n### umask \n\nBy default, RStudio sets its umask to `022` on startup. If you don't want this behavior, for instance because you'd prefer the server process to use the default umask set in init, it can be disabled as follows:\n\n*/etc/rstudio/rserver.conf*\n\n```ini\nserver-set-umask=0\n```\n\n## Running with a Proxy\n\n### Overview\n\nIf you are running RStudio behind a proxy server you need be sure to configure the proxy server so that it correctly handles all traffic to and from RStudio.   \n\nBeyond the normal reverse proxy configuration you'd apply for any HTTP server application, you also need to ensure that websockets are forwarded correctly between the proxy server and RStudio to ensure that all RStudio functions work correctly. In particular, they're needed to ensure that Shiny applications run from within the IDE work properly - if not, you may find that Shiny applications \"gray out\" and close without you being able to interact with them.  \n\nIt's also important to ensure that your reverse proxy uses a relatively lenient connection timeout; we recommend 60 seconds. Several components of RStudio use [HTTP Long Polling](https://en.wikipedia.org/wiki/Push_technology#Long_polling) to push information to the browser; a connection timeout of 30 seconds or fewer will result in HTTP 504 (gateway timeout) errors from the reverse proxy.\n\nThis section describes how to correctly configure a reverse proxy with [Nginx](http://nginx.org/en/) and [Apache](http://httpd.apache.org/).\n\n### Nginx Configuration\n\nOn Debian or Ubuntu a version of Nginx that supports reverse-proxying can be installed using the following command:\n\n```bash\nsudo apt-get install nginx\n```\n\nOn CentOS or Red Hat you can install Nginx using the following command:\n\n```bash\nsudo yum install nginx\n```\n\nTo enable an instance of Nginx running on the same server to act as a front-end proxy to RStudio you would add commands like the following to your `nginx.conf` file. Note that you must add code to proxy websockets in order to correctly display Shiny apps and R Markdown Shiny documents in RStudio. Also note that if you are proxying to a server on a different machine you need to replace references to `localhost` with the correct address of the server where you are hosting RStudio.\n\n```r\nhttp {\n\n  map $http_upgrade $connection_upgrade {\n    default upgrade;\n    ''      close;\n  }\n  \n  server {\n    listen 80;\n    \n    \n    location / {\n      proxy_pass http://localhost:8787;\n      proxy_redirect http://localhost:8787/ $scheme://$host/;\n      proxy_http_version 1.1;\n      proxy_set_header Upgrade $http_upgrade;\n      proxy_set_header Connection $connection_upgrade;\n      proxy_read_timeout 20d;\n      # Use preferably\n      proxy_set_header X-RStudio-Request $scheme://$host:$server_port$request_uri;\n      # OR existing X-Forwarded headers\n      proxy_set_header X-Forwarded-Host $host;\n      proxy_set_header X-Forwarded-Proto $scheme;\n      # OR alternatively the Forwarded header (just an example)\n      proxy_set_header Forwarded \"host=$host:$server_port;proto=$scheme;\";\n    }\n  }\n}\n```\n\nIf you want to serve RStudio from a custom path (e.g. /rstudio) you would edit your `nginx.conf` file as shown below:\n\n```r\nhttp {\n\n  map $http_upgrade $connection_upgrade {\n    default upgrade;\n    ''      close;\n  }\n  \n  server {\n    listen 80;\n    \n    location /rstudio/ {\n      rewrite ^/rstudio/(.*)$ /$1 break;\n      proxy_pass http://localhost:8787;\n      proxy_http_version 1.1;\n      proxy_set_header Upgrade $http_upgrade;\n      proxy_set_header Connection $connection_upgrade;\n      proxy_read_timeout 20d;\n      # Use preferably\n      proxy_set_header X-RStudio-Request $scheme://$host:$server_port$request_uri;\n      proxy_set_header X-RStudio-Root-Path /rstudio\n      # OR let the proxy rewrite the root path\n      proxy_redirect http://localhost:8787/ $scheme://$host/rstudio/;\n      proxy_cookie_path / /rstudio;\n      # OR existing X-Forwarded headers\n      proxy_set_header X-Forwarded-Host $host;\n      proxy_set_header X-Forwarded-Proto $scheme;\n      # OR alternatively the Forwarded header (just an example)\n      proxy_set_header Forwarded \"host=$host:$server_port;proto=$scheme;\";\n    }\n```\n\n::: {.callout-note}\nThe header `X-RStudio-Root-Path` and the configuration option `www-root-path` server the same purpose. If either is set RStudio will always return cookies and redirects for the correct path, without requiring rewrite assistance from the proxy. The header value has precedence over the configuration value.\n:::\n\n\n*/etc/rstudio/rserver.conf*\n\n```ini\nwww-root-path=/rstudio\n```\n\nAfter adding these entries you'll then need to restart Nginx so that the proxy settings take effect:\n\n```bash\nsudo /etc/init.d/nginx restart\n```\n\nNote that RStudio needs the `X-RStudio-Request`, `X-Forwarded-[Host|Port|Proto]`, or `Forwarded` headers set for various security reasons, and nginx does not supply this header by default. It must contain the original `Host` value of the request, which is usually set to `$host` in the nginx configuration file.\n\nIn some cases, such as when streaming job statuses from the launcher, the default response buffering in nginx can be too slow for delivering real-time updates, especially when configured to use SSL. If job output streams are not working properly from the home page, we recommend disabling response buffering by adding the following line under the `server` directive:\n\n```r\nserver {\n  # ... follows previous configuration\n  proxy_buffering off;\n}\n```\n\n### Apache Configuration\n\nTo enable an instance of Apache running on the same server to act as a front-end proxy to RStudio you need to use the `mod_proxy` and `mod_proxy_wstunnel` modules. The steps for enabling this module vary across operating systems so you should consult your distribution's Apache documentation for details. Apache as reverse proxy already includes `X-Forwarded-Host` (with port) and `X-Forwarded-Proto` by default.\n\nOn Debian and Ubuntu systems Apache can be installed with `mod_proxy` using the following commands:\n\n```bash\nsudo apt-get install apache2\nsudo apt-get install libapache2-mod-proxy-html\nsudo apt-get install libxml2-dev\n```\n\nThen, to update the Apache configuration files to activate `mod_proxy` you execute the following commands:\n\n```bash\nsudo a2enmod proxy\nsudo a2enmod proxy_http\nsudo a2enmod proxy_wstunnel\n```\n\nOn CentOS and RedHat systems Apache can be installed with `mod_proxy` and `mod_proxy_wstunnel` by following the instructions here:\n\n<http://httpd.apache.org/docs/2.4/platform/rpm.html>\n\nBy default with Apache 2.4, `mod_proxy` and `mod_proxy_wstunnel` should be enabled. You can check this by opening the file `/etc/httpd/conf.modules.d/00-proxy.conf` and making sure the following lines are included and not commented out:\n\n```apache\nLoadModule proxy_module modules/mod_proxy.so\nLoadModule proxy_wstunnel_module modules/mod_proxy_wstunnel.so\n```\n\nOnce you have enabled `mod_proxy` and `mod_proxy_wstunnel` in your Apache installation you need to add the required proxy commands to your `VirtualHost` definition. Note that you will also need to include code to correctly proxy websockets in order to correctly proxy Shiny apps and R Markdown documents within RStudio. Also note that if you are proxying to a server on a different machine you need to replace references to `localhost` with the correct address of the server where you are hosting RStudio.\n\n```apache\n<VirtualHost *:80>\n\n  <Proxy *>\n    Allow from localhost\n  </Proxy>\n\n  RewriteEngine on\n  RewriteCond %{HTTP:Upgrade} =websocket\n  RewriteRule /(.*)     ws://localhost:8787/$1  [P,L]\n  RewriteCond %{HTTP:Upgrade} !=websocket\n  RewriteRule /(.*)     http://localhost:8787/$1 [P,L]\n  ProxyPass / http://localhost:8787/\n  ProxyPassReverse / http://localhost:8787/\n  # Use preferably this (store variable values with dummy rewrite rules)\n  RewriteRule . - [E=req_scheme:%{REQUEST_SCHEME}]\n  RewriteRule . - [E=http_host:%{HTTP_HOST}]\n  RewriteRule . - [E=req_uri:%{REQUEST_URI}]\n  RequestHeader set X-RStudio-Request \"%{req_scheme}e://%{http_host}e%{req_uri}e\"\n  ProxyRequests Off\n\n</VirtualHost>\n```\n\nNote that if you want to serve RStudio from a custom path (e.g. /rstudio) you would replace the directives described above to:\n\n```apache\nRewriteEngine on\nRewriteCond %{HTTP:Upgrade} =websocket\nRewriteRule /rstudio/(.*)     ws://localhost:8787/$1  [P,L]\nRewriteCond %{HTTP:Upgrade} !=websocket\nRewriteRule /rstudio/(.*)     http://localhost:8787/$1 [P,L]\nProxyPass /rstudio/ http://localhost:8787/\n# Use preferably this (store variable values with dummy rewrite rules)\nRewriteRule . - [E=req_scheme:%{REQUEST_SCHEME}]\nRewriteRule . - [E=http_host:%{HTTP_HOST}]\nRewriteRule . - [E=req_uri:%{REQUEST_URI}]\nRequestHeader set X-RStudio-Request \"%{req_scheme}e://%{http_host}e%{req_uri}e\"\nRequestHeader set X-RStudio-Root-Path \"/rstudio\"\n# Or alternatively\nProxyPassReverse /rstudio/ http://localhost:8787/\nProxyPassReverseCookiePath  \"/\"  \"/rstudio\"\nProxyRequests Off\n```\n\n::: {.callout-note}\nThe header `X-RStudio-Root-Path` and the configuration option `www-root-path` server the same purpose. If either is set RStudio will always return cookies and redirects for the correct path, without requiring rewrite assistance from the proxy. The header value has precedence over the configuration value.\n:::\n\n*/etc/rstudio/rserver.conf*\n\n```ini\nwww-root-path=/rstudio\n```\n\nFinally, after you've completed all of the above steps you'll then need to restart Apache so that the proxy settings take effect:\n\n```bash\nsudo /etc/init.d/apache2 restart\n```\n\n### RStudio Configuration {.pro-header}\n\nIf your RStudio Workbench and proxy server are running on the same machine you can also change the port RStudio Workbench listens on from 0.0.0.0 (all remote clients) to 127.0.0.1 (only the localhost). This ensures that the only way to connect to RStudio is through the proxy server. You can do this by adding the `www-address` entry to the **`/etc/rstudio/rserver.conf`** file as follows:\n\n```ini\nwww-address=127.0.0.1\n```\n\nNote that you may need to create this config file if it doesn't already\nexist.\n\n### Custom Paths and Path-Rewriting Proxies\n\nIn the examples above we have configurations where RStudio is served by the proxy under a custom `/rstudio` path. This is called a path-rewriting proxy setup.\n\nRStudio can use different combinations of HTTP headers and/or options to determine its location when path-rewriting in is use:\n\n- Use `X-RStudio-Request` if possible. This way RStudio knows exacly the address presented in the user's browser.\n  - Otherwise, you must use `X-Forwarded-*` family of headers or the `Forwarded` header.\n- Use `X-RStudio-Root-Path` if possible. This way RStudio knows which portion of the path was added by the proxy.\n  - Alternatively, use the option `www-root-path` for the same effect.\n  - Otherwise, you must use additional options in your proxy configuration to adjust redirects and cookies for the right path.\n\nThe most reliable configuration is using `X-RStudio-Request` and `X-RStudio-Root-Path` defined as in the examples above. There's little involvement of the proxy when using these headers.\n\nIf you have little experience with proxies but still want to use a custom path, we recommend using the `www-root-path` option in RStudio and at least the headers `X-Forwarded-Host` and `X-Forwarded-Proto`.\n\nFinally, if you want the proxy to have total control of custom path then define the rewrite rules yourself directly in the proxy configuration based on the alternatives suggested in the example above. In this case, do not use the option `www-root-path` or the header `X-RStudio-Root-Path`.\n\n### Customizing Default Proxy {.pro-header}\n\nRStudio Workbench exposes itself over TCP by means of an nginx proxy instance that runs as the `rserver-http` process on the local machine. In some cases, this proxy instance may need to be customized.\n\nIn order to customize it, you can create any of the following three files. Each file modifies the nginx configuration at `/var/lib/rstudio-server/conf/rserver-http.conf` in the following way:\n\n* `/etc/rstudio/nginx.http.conf` - allows you to add additional nginx directives under the root `http` node, and should be used for altering basic HTTP settings\n* `/etc/rstudio/nginx.server.conf` - allows you to add additional nginx directives under the `server` node, and should be used for altering basic server settings\n* `/etc/rstudio/nginx.site.conf` - allows you to add additional nginx directives under the `location /` node, and should be used for altering responses sent from RStudio\n\nSimply add the desired nginx configuration in the files above to modify the desired section - the contents of each file is copied into the `rserver-http.conf` template verbatim. Then, restart `rstudio-server` for the changes to take effect.\n\nIn most cases, you should not need to create these files and modify the nginx template that is provided.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "dependencies": {
      "type": "includes",
      "data": []
    },
    "preserve": {},
    "postProcess": null
  }
}