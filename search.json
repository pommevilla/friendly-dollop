[
  {
    "href": "rstudio_ide_commands/rstudio_ide_commands.html",
    "title": "RStudio Workbench Administration",
    "section": "",
    "text": "RStudio IDE Commands\nThe following table enumerates all of the commands currently supported by RStudio. These command IDs can be used in RStudio API calls such as rstudioapi::executeCommand.\n\n\n\n\n\n\n\n\nId\nDescription\n\n\n\n\nactivateBuild\nShow Build\n\n\nactivateCompilePDF\nShow Compile PDF\n\n\nactivateConnections\nShow Connections\n\n\nactivateConsole\nMove Focus to Console\n\n\nactivateConsolePane\nMove Focus to Console Panel\n\n\nactivateData\nShow Data\n\n\nactivateDeployContent\nShow Deploy Content\n\n\nactivateEnvironment\nShow Environment\n\n\nactivateFiles\nShow Files\n\n\nactivateFindInFiles\nShow Find in Files\n\n\nactivateHelp\nMove Focus to Help\n\n\nactivateHistory\nShow History\n\n\nactivateJobs\nShow Jobs\n\n\nactivateLauncherJobs\nShow Launcher\n\n\nactivateMarkers\nShow Markers\n\n\nactivatePackages\nShow Packages\n\n\nactivatePlots\nShow Plots\n\n\nactivatePresentation\nShow Presentation\n\n\nactivateRMarkdown\nShow R Markdown\n\n\nactivateSource\nMove Focus to Source\n\n\nactivateSourceCpp\nShow Source Cpp\n\n\nactivateSQLResults\nShow SQL Results\n\n\nactivateTerminal\nMove Focus to Terminal\n\n\nactivateTutorial\nShow Tutorial\n\n\nactivateVcs\nShow Vcs\n\n\nactivateViewer\nShow Viewer\n\n\naddCursorAbove\nAdd Cursor Above Current Cursor\n\n\naddCursorBelow\nAdd Cursor Below Current Cursor\n\n\nauthoringRPresentationsHelp\nGuide to using R Markdown\n\n\nbrowseAddins\nBrowse addins\n\n\nbrowseCheatSheets\nBrowse available cheat sheets in your web browser\n\n\nbuildAll\nInstall the package and restart R\n\n\nbuildBinaryPackage\nBuild a binary package\n\n\nbuildSourcePackage\nBuild a source package\n\n\nbuildToolsProjectSetup\nConfigure build tools\n\n\ncheckForUpdates\nCheck for Updates\n\n\ncheckPackage\nR CMD check\n\n\ncheckSpelling\nCheck spelling in document\n\n\ncleanAll\nClean all\n\n\nclearBuild\nClear build\n\n\nclearCommandPaletteMru\nClear Recently Executed Command List\n\n\nclearHelpHistory\nClear history\n\n\nclearHistory\nClear all history entries\n\n\nclearJobs\nClean up all completed local jobs\n\n\nclearKnitrCache\nClear the knitr cache for the current document\n\n\nclearPlots\nClear all Plots\n\n\nclearPrerenderedOutput\nClear the prerendered output for the current document\n\n\nclearPresentationCache\nClear knitr cache for this presentation\n\n\nclearRecentFiles\nClear List\n\n\nclearRecentProjects\nClear Project List\n\n\nclearTerminalScrollbackBuffer\nClear terminal\n\n\nclearUserPrefs\nClear User Prefs\n\n\nclearWorkspace\nClear objects from the workspace\n\n\ncloseAllSourceDocs\nClose All\n\n\ncloseAllTerminals\nClose All Terminals\n\n\ncloseOtherSourceDocs\nClose All Except Current\n\n\ncloseProject\nClose the currently open project\n\n\ncloseSourceDoc\nClose\n\n\ncloseTerminal\nClose current terminal session\n\n\ncodeCompletion\nShow code completions at the current cursor location\n\n\ncommentUncomment\nComment or uncomment the current line/selection\n\n\ncompileNotebook\nCompile a report from the current R script\n\n\ncompilePDF\nCompile a PDF from the current LaTeX or Sweave document\n\n\nconsoleClear\nClear console\n\n\ncopyDummy\nCopy\n\n\ncopyFile\nCopy selected file or folder\n\n\ncopyFileTo\nCopy selected file or folder to another folder\n\n\ncopyLinesDown\nCopy Lines Down\n\n\ncopyPlotToClipboard\nCopy the current plot to the clipboard\n\n\ncopySourceDocPath\nCopy current document path\n\n\ncutDummy\nCut\n\n\ndebugBreakpoint\nSet or remove a breakpoint on the current line of code\n\n\ndebugClearBreakpoints\nRemove all the breakpoints in the current project\n\n\ndebugContinue\nContinue execution until the next breakpoint is encountered\n\n\ndebugDumpContents\nDump Editor Contents…\n\n\ndebugFinish\nExecute the remainder of the current function or loop\n\n\ndebugHelp\nGuide to debugging features\n\n\ndebugImportDump\nImport Editor Contents…\n\n\ndebugStep\nExecute the next line of code\n\n\ndebugStepInto\nStep into the current function call\n\n\ndebugStop\nExit debug mode\n\n\ndeleteFiles\nDelete selected files or folders\n\n\ndevtoolsLoadAll\nExecute devtools::load_all\n\n\ndiagnosticsReport\nWrite Diagnostics Report\n\n\ndisconnectConnection\nDisconnect from a connection\n\n\neditCodeSnippets\nEdit code snippets\n\n\neditLinesFromStart\nCreate a new cursor at start of each line in selection\n\n\neditRmdFormatOptions\nEdit the R Markdown format options for the current file\n\n\neditUserPrefs\nEdit User Prefs File\n\n\nenableProsemirrorDevTools\nEnable Prosemirror DevTools\n\n\nerrorsBreak\nBreak when any unhandled error occurs\n\n\nerrorsMessage\nPrint the error message when an unhandled error occurs\n\n\nerrorsTraceback\nShow the error inspector when an unhandled error occurs\n\n\nexecuteAllCode\nRun all of the code in the source file\n\n\nexecuteCode\nRun the current line or selection\n\n\nexecuteCodeWithoutMovingCursor\nRun the current line or selection without moving the cursor\n\n\nexecuteCurrentChunk\nRun the current code chunk\n\n\nexecuteCurrentFunction\nRun the top-level function definition, if any, that contains the cursor\n\n\nexecuteCurrentLine\nExecute the line which contains the cursor\n\n\nexecuteCurrentParagraph\nExecute the current paragraph of code, delimited by blank lines.\n\n\nexecuteCurrentSection\nRun the code section that contains the cursor\n\n\nexecuteCurrentStatement\nExecute the entire R statement which contains the cursor.\n\n\nexecuteFromCurrentLine\nRun from the current line through the end of the source file\n\n\nexecuteLastCode\nRe-run the previous code region\n\n\nexecuteNextChunk\nRun the next code chunk\n\n\nexecutePreviousChunks\nRun all chunks above the current one\n\n\nexecuteSetupChunk\nRun the initial setup chunk\n\n\nexecuteSubsequentChunks\nRun all chunks below the current one\n\n\nexecuteToCurrentLine\nRun from the beginning of the source file up through the current line\n\n\nexpandSelection\nExpand selection\n\n\nexpandToLine\nExpand Selection to Line\n\n\nexpandToMatching\nExpand selection to matching bracket\n\n\nexportFiles\nExport selected files or folders\n\n\nextractFunction\nTurn the current selection into a function\n\n\nextractLocalVariable\nExtract a variable out of the current selection\n\n\nfindFromSelection\nUse Selection for Find\n\n\nfindInFiles\nFind in Files…\n\n\nfindNext\nFind next occurrence\n\n\nfindPrevious\nFind previous occurrence\n\n\nfindReplace\nFind…\n\n\nfindSelectAll\nFind and select all matches\n\n\nfindUsages\nFind source locations where this symbol is used\n\n\nfirstTab\nFirst Tab\n\n\nfocusCenterSeparator\nAdjust Center Splitter\n\n\nfocusConsoleOutputEnd\nFocus Console Output\n\n\nfocusLeftSeparator\nAdjust Left Splitter\n\n\nfocusMainToolbar\nFocus Main Toolbar\n\n\nfocusNextPane\nFocus Next Pane\n\n\nfocusPreviousPane\nFocus Previous Pane\n\n\nfocusRightSeparator\nAdjust Right Splitter\n\n\nfocusSourceColumnSeparator\nAdjust Source Column Splitter\n\n\nfold\nCollapse\n\n\nfoldAll\nCollapse All\n\n\nforceQuitSession\nQuit the current R session even if busy\n\n\nfreeUnusedMemory\nFree Unused R Memory\n\n\ngoToDefinition\nGo to to the definition of the currently selected function\n\n\ngoToFileFunction\nGo To File/Function…\n\n\ngoToHelp\nGo to help for the currently selected function\n\n\ngoToLine\nGo to Line…\n\n\ngoToNextChunk\nGo to next chunk\n\n\ngoToNextSection\nGo to next section/chunk\n\n\ngoToPrevChunk\nGo to previous chunk\n\n\ngoToPrevSection\nGo to previous section/chunk\n\n\ngotoProfileSource\nOpen sources associated with the selection\n\n\ngoToWorkingDir\nView the current working directory\n\n\nhelpBack\nPrevious topic\n\n\nhelpForward\nNext topic\n\n\nhelpHome\nShow R Help\n\n\nhelpKeyboardShortcuts\nKeyboard Shortcuts Help\n\n\nhelpPopout\nShow in new window\n\n\nhelpSearch\nSearch R Help\n\n\nhelpUsingRStudio\nRStudio Docs\n\n\nhideToolbar\nHide Toolbar\n\n\nhistoryDismissContext\n« Back\n\n\nhistoryDismissResults\nDone\n\n\nhistoryRemoveEntries\nRemove the selected history entries\n\n\nhistorySendToConsole\nSend the selected commands to the R console (Enter)\n\n\nhistorySendToSource\nInsert the selected commands into the current document (Shift+Enter)\n\n\nimportDatasetFromCsv\nFrom CSV\n\n\nimportDatasetFromCsvUsingBase\nFrom Text (base)…\n\n\nimportDatasetFromCsvUsingReadr\nFrom Text (readr)…\n\n\nimportDatasetFromFile\nFrom Local File…\n\n\nimportDatasetFromSAS\nFrom SAS…\n\n\nimportDatasetFromSAV\nFrom SAV…\n\n\nimportDatasetFromSAV\nFrom SPSS…\n\n\nimportDatasetFromStata\nFrom Stata…\n\n\nimportDatasetFromURL\nFrom Web URL…\n\n\nimportDatasetFromXLS\nFrom Excel…\n\n\ninsertChunk\nInsert a new code chunk\n\n\ninsertChunkBash\nInsert a new Bash chunk\n\n\ninsertChunkD3\nInsert a new D3 chunk\n\n\ninsertChunkPython\nInsert a new Python chunk\n\n\ninsertChunkR\nInsert a new R chunk\n\n\ninsertChunkRCPP\nInsert a new Rcpp chunk\n\n\ninsertChunkSQL\nInsert a new SQL chunk\n\n\ninsertChunkStan\nInsert a new Stan chunk\n\n\ninsertRoxygenSkeleton\nInsert a roxygen comment for the current function\n\n\ninsertSection\nInsert a new code section\n\n\ninsertSnippet\nExpand snippet at cursor\n\n\ninstallPackage\nInstall R packages\n\n\ninterruptR\nInterrupt R\n\n\ninterruptTerminal\nSend Ctrl+C to Current Terminal\n\n\njoinLines\nJoin Lines\n\n\njumpTo\nJump To…\n\n\njumpToMatching\nJump to matching bracket\n\n\nknitDocument\nKnit the current document\n\n\nknitWithParameters\nKnit the document with a set of custom parameters\n\n\nlastTab\nLast Tab\n\n\nlayoutConsoleOnLeft\nConsole on Left\n\n\nlayoutConsoleOnRight\nConsole on Right\n\n\nlayoutEndZoom\nShow All Panes\n\n\nlayoutZoomBuild\nZoom Build\n\n\nlayoutZoomConnections\nZoom Connections\n\n\nlayoutZoomConsole\nZoom Console\n\n\nlayoutZoomConsolePane\nZoom Console Pane\n\n\nlayoutZoomEnvironment\nZoom Environment\n\n\nlayoutZoomFiles\nZoom Files\n\n\nlayoutZoomHelp\nZoom Help\n\n\nlayoutZoomHistory\nZoom History\n\n\nlayoutZoomLeftColumn\nZoom Left / Center Column\n\n\nlayoutZoomPackages\nZoom Packages\n\n\nlayoutZoomPlots\nZoom Plots\n\n\nlayoutZoomRightColumn\nZoom Right Column\n\n\nlayoutZoomSource\nZoom Source\n\n\nlayoutZoomTutorial\nZoom Tutorial\n\n\nlayoutZoomVcs\nZoom VCS\n\n\nlayoutZoomViewer\nZoom Viewer\n\n\nloadHistory\nLoad history from an existing file\n\n\nloadServerHome\nRStudio Server Home\n\n\nloadWorkspace\nLoad workspace\n\n\nlogFocusedElement\nLog focused element\n\n\nmacPreferences\nPreferences…\n\n\nmarkdownHelp\nMarkdown quick reference\n\n\nmaximizeConsole\nMaximize Console\n\n\nmodifyKeyboardShortcuts\nModify keyboard shortcuts\n\n\nmoveFiles\nMove selected files or folders\n\n\nmoveLinesDown\nMove Lines Down\n\n\nmoveLinesUp\nMove Lines Up\n\n\nmoveTabLeft\nMove Tab Left\n\n\nmoveTabRight\nMove Tab Right\n\n\nmoveTabToFirst\nMove Tab to First\n\n\nmoveTabToLast\nMove Tab to Last\n\n\nnewCDoc\nCreate a new C file\n\n\nnewConnection\nCreate a new connection\n\n\nnewCppDoc\nCreate a new C++ file\n\n\nnewCssDoc\nCreate a new CSS file\n\n\nnewD3Doc\nCreate a new D3 Script\n\n\nnewFolder\nCreate a new folder\n\n\nnewHeaderDoc\nCreate a new header file\n\n\nnewHtmlDoc\nCreate a new HTML file\n\n\nnewJavaScriptDoc\nCreate a new JavaScript file\n\n\nnewMarkdownDoc\nCreate a new Markdown document\n\n\nnewProject\nCreate a project\n\n\nnewPythonDoc\nCreate a new Python script\n\n\nnewQuartoDoc\nCreate a new Quarto document\n\n\nnewRDocumentationDoc\nCreate a new Rd documentation file\n\n\nnewRHTMLDoc\nCreate a new R HTML document\n\n\nnewRMarkdownDoc\nCreate a new R Markdown document\n\n\nnewRNotebook\nCreate a new R Markdown notebook\n\n\nnewRPlumberDoc\nCreate a new Plumber API\n\n\nnewRPresentationDoc\nCreate a new R presentation\n\n\nnewRShinyApp\nCreate a new Shiny web application\n\n\nnewSession\nOpen a new R session\n\n\nnewShellDoc\nCreate a new shell script\n\n\nnewSourceColumn\nAdd Source Column\n\n\nnewSourceDoc\nCreate a new R script\n\n\nnewSqlDoc\nCreate a new SQL script\n\n\nnewStanDoc\nCreate a new Stan program\n\n\nnewSweaveDoc\nCreate a new R Sweave document\n\n\nnewTerminal\nCreate a new terminal\n\n\nnewTextDoc\nCreate a new text file\n\n\nnextPlot\nNext plot\n\n\nnextTab\nNext Tab\n\n\nnextTerminal\nShow next terminal\n\n\nnotebookClearAllOutput\nRemove all code chunk output in the current file\n\n\nnotebookClearOutput\nClear the output of the current notebook chunk\n\n\nnotebookCollapseAllOutput\nCollapse all code chunk output in the current file\n\n\nnotebookExpandAllOutput\nExpand all code chunk output in the current file\n\n\nnotebookToggleExpansion\nExpand or collapse the output of the current notebook chunk\n\n\nopenDataImportCheatSheet\nImport data with readr\n\n\nopenDataTransformationCheatSheet\nData transformation with dplyr\n\n\nopenDataVisualizationCheatSheet\nData visualization with ggplot2\n\n\nopenDataWranglingCheatSheet\nData manipulation with dplyr and tidyr\n\n\nopenDeveloperConsole\nOpen Developer Console\n\n\nopenHtmlExternal\nView the page with the system web browser\n\n\nopenNewTerminalAtEditorLocation\nOpen New Terminal at File Location\n\n\nopenNewTerminalAtFilePaneLocation\nOpen New Terminal Here\n\n\nopenPackageDevelopmentCheatSheet\nPackage development with devtools\n\n\nopenProfile\nOpens a profile from a file\n\n\nopenProfileInBrowser\nOpens current profile in a web browser\n\n\nopenProject\nOpen a project\n\n\nopenProjectInNewWindow\nOpen project in a new R session\n\n\nopenPurrrCheatSheet\nList manipulation with purrr\n\n\nopenRMarkdownCheatSheet\nR Markdown cheat sheet\n\n\nopenRMarkdownReferenceGuide\nR Markdown reference guide\n\n\nopenRoxygenQuickReference\nRoxygen quick reference\n\n\nopenRStudioIDECheatSheet\nRStudio IDE cheat sheet\n\n\nopenSharedProject\nOpen a project shared with you\n\n\nopenShinyCheatSheet\nBuild web applications with Shiny\n\n\nopenSourceDoc\nOpen an existing file\n\n\nopenSourceDocNewColumn\nOpen an existing file in a new column\n\n\nopenSparklyrCheatSheet\nInterfacing Apache Spark with sparklyr\n\n\npackratBootstrap\nUse packrat with this project\n\n\npackratBundle\nBundle a Packrat Project\n\n\npackratCheckStatus\nCheck the status of the Packrat library\n\n\npackratClean\nRemove unused packages from your packrat library\n\n\npackratHelp\nHelp on using packrat with R projects\n\n\npackratOptions\nConfigure packrat options for this project\n\n\npaneLayout\nPane Layout…\n\n\npasteDummy\nPaste\n\n\npasteWithIndentDummy\nPaste with Indent\n\n\nplumberRunInBrowser\nRun the Plumber API in the system’s default Web browser\n\n\nplumberRunInPane\nRun the Plumber API in an RStudio pane\n\n\nplumberRunInViewer\nRun the Plumber API in an RStudio viewer window\n\n\npopoutDoc\nShow in new window\n\n\npresentationEdit\nEdit this slide of the presentation\n\n\npresentationFullscreen\nShow presentation in full screen mode\n\n\npresentationHome\nGo to the first slide\n\n\npresentationNext\nGo to the next slide\n\n\npresentationPrev\nGo to the previous slide\n\n\npresentationSaveAsStandalone\nSave the presentation as a standalone web page\n\n\npresentationViewInBrowser\nView the presentation in an external web browser\n\n\npreviewHTML\nShow a preview of the current document as HTML\n\n\npreviewJS\nPreview the active JavaScript document\n\n\npreviewSql\nPreview the active SQL document\n\n\npreviousPlot\nPrevious plot\n\n\npreviousTab\nPrevious Tab\n\n\npreviousTerminal\nShow previous terminal\n\n\nprintCppCompletions\nPrint C++ Completions\n\n\nprintHelp\nPrint topic\n\n\nprintSourceDoc\nPrint the current file\n\n\nprofileCode\nProfile the current line or selection\n\n\nprofileHelp\nGuide to profiling features\n\n\nprojectOptions\nEdit options for the current project\n\n\npublishHTML\nPublish the current document\n\n\nquartoRenderDocument\nRender the current document\n\n\nquickAddNext\nFind and add next occurence\n\n\nquitSession\nQuit the current R session\n\n\nraiseException\nRaise Exception\n\n\nraiseException2\nRaise Exception JS\n\n\nrcppHelp\nHelp on using Rcpp\n\n\nrebuildAll\nClean previous output and rebuild all\n\n\nredoDummy\nRedo\n\n\nreflowComment\nReflow selected comment lines so they wrap evenly\n\n\nreformatCode\nReformat the current line/selection\n\n\nrefreshConnection\nRefresh data\n\n\nrefreshEnvironment\nRefresh the list of objects in the environment\n\n\nrefreshFiles\nRefresh file listing\n\n\nrefreshHelp\nRefresh topic\n\n\nrefreshHtmlPreview\nRefresh the preview\n\n\nrefreshPackages\nRefresh Package listing\n\n\nrefreshPlot\nRefresh current plot\n\n\nrefreshPresentation\nRefresh the presentation\n\n\nrefreshWorkspace\nRefresh Workspace\n\n\nreindent\nReindent the current line/selection\n\n\nreloadPlumberAPI\nReload the Plumber API\n\n\nreloadShinyApp\nReload the Shiny application\n\n\nreloadUi\nReload UI\n\n\nremoveConnection\nRemove connection from the connection history\n\n\nremoveLine\nRemove Line\n\n\nremovePlot\nRemove the current plot\n\n\nrenameFile\nRename selected file or folder\n\n\nrenameInScope\nRename symbol in current scope\n\n\nrenameSourceDoc\nRename current document\n\n\nrenameTerminal\nChange terminal session name\n\n\nrenvHelp\nLearn how to use renv\n\n\nrenvRestore\nRestore your project library from renv.lock\n\n\nrenvSnapshot\nSnapshot the state of your project library\n\n\nreopenSourceDocWithEncoding\nReopen the current file with a different encoding\n\n\nreplaceAndFind\nReplace and find next occurrence\n\n\nrestartR\nRestart R\n\n\nrestartRClearOutput\nRestart R session and clear chunk output\n\n\nrestartRRunAllChunks\nRestart R session and run all chunks\n\n\nreturnDocToMain\nReturn to main window\n\n\nroxygenizePackage\nBuild package documentation\n\n\nrsconnectConfigure\nConfigure the application\n\n\nrsconnectDeploy\nPublish the application or document\n\n\nrsconnectManageAccounts\nConnect or disconnect accounts\n\n\nrstudioCommunityForum\nRStudio Community Forum\n\n\nrstudioLicense\nRStudio License\n\n\nrstudioSupport\nRStudio Support\n\n\nrunSelectionAsJob\nRun the selected code as a local job\n\n\nrunSelectionAsLauncherJob\nRun the selected code as a launcher job\n\n\nsaveAllSourceDocs\nSave all open documents\n\n\nsaveHistory\nSave history into a file\n\n\nsaveHtmlPreviewAs\nSave the page to another location\n\n\nsaveHtmlPreviewAsLocalFile\nDownload the page to a local file\n\n\nsavePlotAsImage\nSave the current plot as an image file\n\n\nsavePlotAsPdf\nSave the current plot as a PDF file\n\n\nsaveProfileAs\nSaves current profile into a file\n\n\nsaveSourceDoc\nSave current document\n\n\nsaveSourceDocAs\nSave current file to a specific path\n\n\nsaveSourceDocWithEncoding\nSave the current file with a different encoding\n\n\nsaveWorkspace\nSave workspace as\n\n\nsendFilenameToTerminal\nSend Filename to Terminal\n\n\nsendTerminalToEditor\nCopy current terminal’s buffer to a new editor buffer\n\n\nsendToTerminal\nSend the current line or selection to terminal\n\n\nsetTerminalToCurrentDirectory\nGo to Current Directory\n\n\nsetWorkingDir\nSelect and change to a new working directory\n\n\nsetWorkingDirToActiveDoc\nChange working directory to path of active document\n\n\nsetWorkingDirToFilesPane\nChange working directory to location of Files pane\n\n\nsetWorkingDirToProjectDir\nChange working directory to project root directory\n\n\nshareProject\nShare this project with others\n\n\nshinyCompareTest\nCompare test results for Shiny application\n\n\nshinyRecordTest\nRecord test for Shiny application\n\n\nshinyRunAllTests\nRun tests for Shiny application\n\n\nshinyRunInBrowser\nRun the Shiny application in the system’s default Web browser\n\n\nshinyRunInPane\nRun the Shiny application in an RStudio pane\n\n\nshinyRunInViewer\nRun the Shiny application in an RStudio viewer window\n\n\nshowAboutDialog\nAbout RStudio\n\n\nshowAccessibilityHelp\nAccessibility Help…\n\n\nshowAccessibilityOptions\nAccessibility Options…\n\n\nshowBuildMenu\nShow Build Menu\n\n\nshowCodeMenu\nShow Code Menu\n\n\nshowCommandPalette\nShow Command Palette\n\n\nshowDebugMenu\nShow Debug Menu\n\n\nshowDiagnosticsActiveDocument\nShow diagnostics for the active document\n\n\nshowDiagnosticsProject\nShow diagnostics for all source files in the current project\n\n\nshowDomElements\nShow DOM Elements\n\n\nshowEditMenu\nShow Edit Menu\n\n\nshowFileMenu\nShow File Menu\n\n\nshowGpuDiagnostics\nShow GPU Diagnostics\n\n\nshowHelpMenu\nShow Help Menu\n\n\nshowHtmlPreviewLog\nShow the compilation log for this document\n\n\nshowLicenseDialog\nManage License…\n\n\nshowLogFiles\nShow Log Files\n\n\nshowManipulator\nShow the manipulator for this plot\n\n\nshowMemoryUsageReport\nMemory Usage Report…\n\n\nshowOptions\nGlobal Options…\n\n\nshowPdfExternal\nShow in an external PDF viewer window\n\n\nshowPlotsMenu\nShow Plots Menu\n\n\nshowProfileMenu\nShow Profile Menu\n\n\nshowRequestLog\nShow internal request log\n\n\nshowSessionMenu\nShow Session Menu\n\n\nshowSessionServerOptionsDialog\nConfigure available session servers\n\n\nshowShellDialog\nExecute shell commands\n\n\nshowShortcutCommand\nShow Keyboard Shortcut Commands\n\n\nshowTerminalInfo\nShow info on current terminal\n\n\nshowTerminalOptions\nTerminal Options…\n\n\nshowToolbar\nShow Toolbar\n\n\nshowToolsMenu\nShow Tools Menu\n\n\nshowViewMenu\nShow View Menu\n\n\nshowWarningBar\nShow warning bar\n\n\nshrinkSelection\nShrink selection\n\n\nsignOut\nSign out from RStudio\n\n\nsortLauncherJobsRecorded\nSort jobs by time submitted\n\n\nsortLauncherJobsState\nSort jobs by current state\n\n\nsourceActiveDocument\nSource the contents of the active document\n\n\nsourceActiveDocumentWithEcho\nSource the contents of the active document (with echo)\n\n\nsourceAsJob\nRun the current R script as a local job\n\n\nsourceAsLauncherJob\nRun the current R script on a cluster\n\n\nsourceFile\nSource the contents of an R file\n\n\nsourceNavigateBack\nGo back to the previous source location\n\n\nsourceNavigateForward\nGo forward to the next source location\n\n\nsparkHelp\nHelp on using Spark with RStudio\n\n\nsparkLog\nView the log for the Spark connection\n\n\nsparkUI\nView the browser UI for the Spark connection\n\n\nspeakEditorLocation\nSpeak Text Editor Location\n\n\nsplitIntoLines\nCreate a new cursor on each line in current selection\n\n\nstartJob\nRun a background local job\n\n\nstartLauncherJob\nRun a background job on a cluster\n\n\nstartProfiler\nStart profiling R code\n\n\nstopBuild\nStop the current build\n\n\nstopProfiler\nStop profiling R code\n\n\nsuspendSession\nSuspend R Session\n\n\nswitchToChunkBash\nSwitch chunk to Bash\n\n\nswitchToChunkPython\nSwitch chunk to Python\n\n\nswitchToChunkR\nSwitch chunk to R\n\n\nswitchToChunkRCPP\nSwitch chunk to Rcpp\n\n\nswitchToChunkSQL\nSwitch chunk to SQL\n\n\nswitchToChunkStan\nSwitch chunk to Stan\n\n\nswitchToTab\nSwitch to Tab…\n\n\nsynctexSearch\nSync PDF view to editor location (Ctrl+Click)\n\n\nterminateR\nForcibly terminate R session\n\n\ntestPackage\nRun tests for package\n\n\ntestShinytestFile\nRun test using the shinytest package\n\n\ntestTestthatFile\nRun tests using the testthat package\n\n\ntoggleDocumentOutline\nShow document outline\n\n\ntoggleEditorTokenInfo\nToggle Editor Token Information\n\n\ntoggleFullScreen\nToggle Full Screen\n\n\ntoggleRainbowParens\nRainbow Parentheses\n\n\ntoggleRmdVisualMode\nToggle visual markdown editor\n\n\ntoggleScreenReaderSupport\nScreen Reader Support\n\n\ntoggleShowMemoryUsage\nShow Current Memory Usage\n\n\ntoggleSoftWrapMode\nSoft Wrap Long Lines\n\n\ntoggleTabKeyMovesFocus\nTab Key Always Moves Focus\n\n\ntoggleToolbar\nToggle Toolbar\n\n\ntutorialBack\nGo back\n\n\ntutorialForward\nGo forward\n\n\ntutorialHome\nReturn to home\n\n\ntutorialPopout\nShow in new window\n\n\ntutorialRefresh\nRefresh tutorial\n\n\ntutorialStop\nStop tutorial\n\n\ntutorialZoom\nView a larger version in a new window\n\n\nundoDummy\nUndo\n\n\nunfold\nExpand\n\n\nunfoldAll\nExpand All\n\n\nupdateCredentials\nUpdate Credentials\n\n\nupdatePackages\nCheck for package updates\n\n\nuploadFile\nUpload files to server\n\n\nusingRMarkdownHelp\nGuide to using R Markdown\n\n\nvcsAddFiles\nAdd the selected files or folders\n\n\nvcsBlameOnGitHub\nBlame view for this file on Github\n\n\nvcsCleanup\nRecursively clean up the working copy (removing locks, etc)\n\n\nvcsCommit\nCommit pending changes\n\n\nvcsDiff\nDiff selected file(s)\n\n\nvcsFileDiff\nShow differences for the file\n\n\nvcsFileLog\nShow log of changes to the file\n\n\nvcsFileRevert\nRevert changes to the file\n\n\nvcsIgnore\nIgnore the selected files or folders\n\n\nvcsOpen\nOpen selected file(s)\n\n\nvcsPull\nPull Branches\n\n\nvcsPullRebase\nPull with Rebase\n\n\nvcsPush\nPush Branch\n\n\nvcsRefresh\nRefresh listing\n\n\nvcsRemoveFiles\nDelete the selected files or folders\n\n\nvcsResolve\nResolve conflicts in the selected files or folders\n\n\nvcsRevert\nRevert selected changes\n\n\nvcsShowHistory\nView history of previous commits\n\n\nvcsViewOnGitHub\nView this file on Github\n\n\nversionControlHelp\nHelp on using version control with RStudio\n\n\nversionControlOptions\nConfigure version control options\n\n\nversionControlProjectSetup\nSetup version control for the current project\n\n\nversionControlShowRsaKey\nShow RSA public key\n\n\nviewAllPrefs\nView All Prefs\n\n\nviewerBack\nGo back\n\n\nviewerClear\nRemove current viewer item\n\n\nviewerClearAll\nClear all viewer items\n\n\nviewerCopyToClipboard\nCopy to the system clipboard\n\n\nviewerForward\nGo forward\n\n\nviewerPopout\nShow in new window\n\n\nviewerRefresh\nRefresh viewer\n\n\nviewerSaveAllAndRefresh\nSave source files and refresh viewer\n\n\nviewerSaveAsImage\nSave as an image file\n\n\nviewerSaveAsWebPage\nSave as a standalone web page\n\n\nviewerStop\nStop application\n\n\nviewerZoom\nView a larger version in a new window\n\n\nwordCount\nCount words in selection or document\n\n\nzoomActualSize\nActual Size\n\n\nzoomIn\nZoom In\n\n\nzoomOut\nZoom Out\n\n\nzoomPlot\nView a larger version of the plot in a new window"
  },
  {
    "href": "getting_started/professional_support.html#professional-support",
    "title": "RStudio Workbench Administration",
    "section": "Professional Support",
    "text": "RStudio provides email support to our professional products customers to help troubleshoot issues and answer questions about the software. To focus on building the best products, RStudio does not provide installation or professional services. If you require such assistance, please refer to our certified partners. For more information about the support we provide, please see the Support Agreement.\nRStudio support is limited to our professional products. If your question is related to the open-source RStudio Server, R, R code, or specific R packages, please visit https://community.rstudio.com.\nIf your question is related to RStudio Workbench, you can open a support ticket by:\n\nRunning the diagnostics script:\nsudo rstudio-server run-diagnostics\n\n\n\n\n\n\nNote\n\n\n\nIf you have not been able to download the software, skip this step.\n\n\nEmail support@rstudio.com with:\n\n\nYour name and company\nWhat you are trying to do\nWhat you have tried\nAny errors you have received\nThe diagnostics file produced from step 1"
  },
  {
    "href": "getting_started/accessing_the_server.html#accessing-the-server",
    "title": "RStudio Workbench Administration",
    "section": "Accessing the Server",
    "text": "Logging In\nBy default RStudio runs on port 8787 and accepts connections from all remote clients. After installation you should therefore be able to navigate a web browser to the following address to access the server:\nhttp://<server-ip>:8787\nRStudio will prompt for a username and password and will authenticate access using the PAM authentication scheme configured for the server. Some notes related to user authentication:\n\nRStudio will not permit logins by system users (those with ids < 100).\nBy default on Debian/Ubuntu the system default PAM profile (/etc/pam.d/other) will be used (this can be customized by creating an RStudio PAM profile at /etc/pam.d/rstudio).\nBy default on RedHat/CentOS and SLES an RStudio PAM profile (/etc/pam.d/rstudio) that authenticates using the system username/password database will be used (this can be customized by editing the profile as appropriate).\nUser credentials are encrypted using RSA as they travel over the network.\n\nAdditional details on customizing RStudio authentication are provided in Authenticating Users. Details on customizing the port and enabling SSL are covered in Access and Security.\n\n\nTroubleshooting Problems\nIf you are unable to access the server after installation, you should run the verify-installation command to output additional diagnostics:\n$ sudo rstudio-server verify-installation\nThis command will start the server and run and connect to an R session. Note that this will test the correct installation of RStudio and ensure that it can connect to a locally installed version of R. However, it won’t test whether networking or authentication problems are preventing access to the server.\nIf problems persist, you can consult the system log to see if there are additional messages there. On Debian/Ubuntu systems this will typically be located at:\n/var/log/syslog\nOn RedHat/CentOS systems this will typically be located at:\n/var/log/messages\nFor RStudio Workbench, you can also consult the server log to see if there are any errors reported there. This log is located at:\n/var/lib/rstudio-server/monitor/log/rstudio-server.log"
  },
  {
    "href": "getting_started/introduction.html#introduction",
    "title": "RStudio Workbench Administration",
    "section": "Introduction",
    "text": "RStudio Server enables you to provide a browser based interface (the RStudio IDE) to a version of R running on a remote Linux server. Deploying R and RStudio on a server has a number of benefits, including:\n\nThe ability to access R sessions from any computer in any location;\nEasy sharing of code, data, and other files with colleagues;\nAllowing multiple users to share access to the more powerful compute resources (memory, processors, etc.) available on a well equipped server; and\nCentralized installation and configuration of R, R packages, TeX, and other supporting libraries.\n\nThis manual describes RStudio Workbench, which adds many enhancements to the open-source version of RStudio Server, including:\n\nThe ability to run multiple concurrent RStudio IDE sessions per-user.\nFlexible use of multiple versions of R on the same server.\nThe ability to run sessions on external cluster nodes, such as Kubernetes or Slurm.\nSupport for Jupyter, JupyterLab, and VS Code editor sessions.\nProject sharing for easy collaboration within workgroups.\nLoad balancing for increased capacity and higher availability.\nAn administrative dashboard that provides insight into active sessions, server health, and monitoring of system-wide and per-user performance and resource metrics;\nAuthentication using system accounts, ActiveDirectory, LDAP, SAML, OpenID, or Google Accounts;\nFull support for PAM (including PAM sessions for dynamically provisioning user resources);\nAbility to establish per-user or per-group CPU priorities and memory limits;\nHTTP enhancements including support for SSL and keep-alive for improved performance;\nAbility to restrict access to the server by IP;\nCustomizable server health checks; and\nSuspend, terminate, or assume control of user sessions; Impersonate users for assistance and troubleshooting.\n\nThe documentation applies to both RStudio Server (Open Source) and RStudio Workbench (Pro), unless the section is specifically marked Pro, in which case it only applies to RStudio Workbench."
  },
  {
    "href": "getting_started/getting_started.html",
    "title": "RStudio Workbench 99.9.9-9",
    "section": "",
    "text": "Getting Started"
  },
  {
    "href": "getting_started/installation.html#installation",
    "title": "RStudio Workbench Administration",
    "section": "Installation",
    "text": "Prerequisites\n\nSystem and Platform Requirements\nRStudio Workbench runs on most modern Linux distributions, and can be accessed in most modern browsers. See the following link for detailed information on supported server and browser platforms as well as recommended minimal CPU, RAM, and disk storage requirements.\nRStudio Workbench System Requirements\n\n\nR Versions\nRStudio requires a previous installation of R version 3.0.1 or higher; see below for instructions on installing R on your specific Linux distribution.\nWe recommend installing multiple versions of R. An environment with multiple versions of R helps you provide a stable, reproducible environment for your R developers. Install R using the directions at https://docs.rstudio.com/resources/install-r/.\n\n\nUser Home Directories\nRStudio interacts frequently with user home directories. If you mount home directories with NFS, we recommend using the async mount option along with a modern, high-throughput network connection that can support many simultaneous clients. If you’d like your users to be able to share their projects with each other, see the section on Project Sharing for additional NFS requirements.\n\n\n\n\n\n\nNote\n\n\n\nDue to its high latencies, we strongly discourage the use of EFS (Elastic File System) for home and shared directories within AWS. If EFS is used, RStudio will experience highly degraded performance. We recommend using a traditional NFSv3 or NFSv4 mount instead.\n\n\n\n\nDatabase Connectivity\nSince version 1.4, RStudio also requires database connectivity. In most cases, no additional configuration is needed - a SQLite database will be created and used automatically. However, if you are running a load-balanced setup, you will be required to set up a PostgreSQL database for RStudio Workbench to connect to; if one is not configured, the service will refuse to start. If you are using load balancing, make sure that you have an available PostgreSQL database to use before installation! See the Database section for more information."
  },
  {
    "href": "getting_started/management_script.html#management-script",
    "title": "RStudio Workbench Administration",
    "section": "Management Script",
    "text": "RStudio management tasks are performed using the rstudio-server utility (installed under /usr/sbin). This utility enables the stopping, starting, and restarting of the server, enumeration and suspension of user sessions, taking the server offline, as well as the ability to hot upgrade a running version of the server.\nFor example, to restart the server you can use the following command:\n$ sudo rstudio-server restart\nNote that on some systems (including RedHat/CentOS 5 and SLES 11) the sudo utility doesn’t have the /usr/sbin directory in it’s path by default. For these systems you can use a full path to the management script. For example:\n$ sudo /usr/sbin/rstudio-server restart"
  },
  {
    "href": "getting_started/community_resources.html#community-resources",
    "title": "RStudio Workbench Administration",
    "section": "Community Resources",
    "text": "RStudio provides a community website where open-source RStudio users can go to get help with issues related to RStudio Server, R, R code, and the various R packages available in the R ecosystem. If you have such an issue, please visit https://community.rstudio.com and post a message on the community forum, where other users and RStudio employees can help you."
  },
  {
    "href": "getting_started/activation.html#activation",
    "title": "RStudio Workbench Administration",
    "section": "Activation",
    "text": "After completing the installation steps described in the previous section you may need to activate the product before using it. Alternatively, if you haven’t previously installed RStudio Workbench on a system then it will run in evaluation mode for a period of time before requiring activation. To determine the current license status of your system you can use the following command:\n$ sudo rstudio-server license-manager status\nTo activate the product you obtain a product key and then use the following commands:\n$ sudo rstudio-server license-manager activate <product-key>\n$ sudo rstudio-server restart\nNote that you need to restart the server in order for licensing changes to take effect.\nAdditional details on license management (including discussions of offline activation and activating through a proxy server) can be found in the License Management section."
  },
  {
    "href": "access_and_security/network_port_and_address.html#network-port-and-address",
    "title": "RStudio Workbench Administration",
    "section": "Network Port and Address",
    "text": "After initial installation RStudio accepts connections on port 8787. If you wish to listen on a different another port you can modify the www-port option. For example:\n# /etc/rstudio/rserver.conf\nwww-port=80\nBy default RStudio binds to address 0.0.0.0 (accepting connections from any remote IP). You can modify this behavior using the www-address option. For example:\n# /etc/rstudio/rserver.conf\nwww-address=127.0.0.1\nNote that changes to the configuration will not take effect until the server is restarted."
  },
  {
    "href": "access_and_security/access_and_security.html",
    "title": "RStudio Workbench Administration",
    "section": "",
    "text": "Overview\nIn this section:\n\nNetwork Port and Address\nIP Access Rules\nFrame Origin\nSame Site Cookies\nCompatibility with Safari 13+\nAdditional Security Considerations\nAdditional Headers\nSecure Sockets (SSL)\nSSL Ports\nCookies\nServer Permissions\nRunning with a Proxy"
  },
  {
    "href": "access_and_security/ip_access_rules.html#ip-access-rules",
    "title": "RStudio Workbench Administration",
    "section": "IP Access Rules",
    "text": "RStudio Workbench can be configured to deny access to specific IP addresses or ranges of addresses. Access rules are defined in the configuration file /etc/rstudio/ip-rules\nAccess rules are established using the allow and deny directives and are processed in order, with the first matching rule governing whether a given address is allowed or denied. For example, to allow only clients within the 192.168.1.0/24 subnet but also deny access to 192.168.1.10 you would use these rules:\n# /etc/rstudio/ip-rules\ndeny    192.168.1.10\nallow   192.168.1.0/24\ndeny    all\nAll clients outside of the specified subset are denied access because of the deny all rule at the end of the configuration.\nNote that changes to the configuration will not take effect until the server is restarted."
  },
  {
    "href": "access_and_security/server_permissions.html#server-permissions",
    "title": "RStudio Workbench Administration",
    "section": "Server Permissions",
    "text": "Server Account\nRStudio runs as the system root user during startup and then drops this privilege and runs as a more restricted user. RStudio then re-assumes root privilege for a brief instant when creating R sessions on behalf of users (the server needs to call setresuid when creating the R session, and this call requires root privilege).\nThe user account that RStudio runs under in the normal course of operations is rstudio-server. This account is automatically added to the system during installation and is created as a system rather than end user account (i.e. the --system flag is passed to useradd).\n\nAlternate Server Account\nYou can configure RStudio so that it will run from an alternate account with the following steps:\n\nCreate a new system user (if the one you want to use doesn’t already exist)\nAssign this user to the server-user option in the /etc/rstudio/rserver.conf configuration file (see example below)\nRestart RStudio\n\nFor example, to shutdown the server and create a new system user named rs-user you’d use the following commands:\nsudo rstudio-server stop\nsudo useradd --system rs-user\nThen edit the /etc/rstudio/rserver.conf configuration file as follows:\n# /etc/rstudio/rserver.conf\nserver-user=rs-user\nFinally, restart RStudio to begin running under the new user:\nsudo rstudio-server start\n\n\n\numask\nBy default, RStudio sets its umask to 022 on startup. If you don’t want this behavior, for instance because you’d prefer the server process to use the default umask set in init, it can be disabled as follows:\n# /etc/rstudio/rserver.conf\nserver-set-umask=0"
  },
  {
    "href": "access_and_security/additional_security_considerations.html#additional-security-considerations",
    "title": "RStudio Workbench Administration",
    "section": "Additional Security Considerations",
    "text": "To help mitigate against CSRF attacks, RStudio can automatically reject any request originating from an Origin or Referer that does not match the Host, X-Forwarded-Host, Forwarded: host or X-RStudio-Request headers. To enable this check, add the following configuration:\n# /etc/rstudio/rserver.conf\nwww-enable-origin-check=1\nIn some cases, such as if running behind a proxy that you cannot modify, this check may be too strict, and can prevent access to RStudio, causing requests to return a 400 status. In such cases, it is recommended that you disable the check. Origin checking is currently disabled by default, but will likely be enabled by default in a future version of RStudio.\nYou may wish to consider some origins to be safe in all cases, causing RStudio to consider such Origin or Referer values to be allowed instead of being rejected, even if they do not match a Host header. To specify such origins, add each of them as a www-allow-origin setting in rserver.conf. For example:\n# /etc/rstudio/rserver.conf\nwww-allow-origin=mysubdomain.mydomain.com\nwww-allow-origin=*.mydomain2.com\nNote that wildcards (*) are accepted and will match any character, including hostname separators. For instance, the previous example of *.mydomain2.com will match both foo.bar.mydomain2.com and foo.mydomain2.com."
  },
  {
    "href": "access_and_security/running_with_a_proxy.html#running-with-a-proxy",
    "title": "RStudio Workbench Administration",
    "section": "Running with a Proxy",
    "text": "Overview\nIf you are running RStudio behind a proxy server you need be sure to configure the proxy server so that it correctly handles all traffic to and from RStudio.\nBeyond the normal reverse proxy configuration you’d apply for any HTTP server application, you also need to ensure that websockets are forwarded correctly between the proxy server and RStudio to ensure that all RStudio functions work correctly. In particular, they’re needed to ensure that Shiny applications run from within the IDE work properly - if not, you may find that Shiny applications “gray out” and close without you being able to interact with them.\nIt’s also important to ensure that your reverse proxy uses a relatively lenient connection timeout; we recommend 60 seconds. Several components of RStudio use HTTP Long Polling to push information to the browser; a connection timeout of 30 seconds or fewer will result in HTTP 504 (gateway timeout) errors from the reverse proxy.\nThis section describes how to correctly configure a reverse proxy with Nginx and Apache.\n\n\nNginx Configuration\nOn Debian or Ubuntu a version of Nginx that supports reverse-proxying can be installed using the following command:\nsudo apt-get install nginx\nOn CentOS or Red Hat you can install Nginx using the following command:\nsudo yum install nginx\nTo enable an instance of Nginx running on the same server to act as a front-end proxy to RStudio you would add commands like the following to your nginx.conf file. Note that you must add code to proxy websockets in order to correctly display Shiny apps and R Markdown Shiny documents in RStudio. Also note that if you are proxying to a server on a different machine you need to replace references to localhost with the correct address of the server where you are hosting RStudio.\nhttp {\n\n  map $http_upgrade $connection_upgrade {\n    default upgrade;\n    ''      close;\n  }\n  \n  server {\n    listen 80;\n    \n    \n    location / {\n      proxy_pass http://localhost:8787;\n      proxy_redirect http://localhost:8787/ $scheme://$host/;\n      proxy_http_version 1.1;\n      proxy_set_header Upgrade $http_upgrade;\n      proxy_set_header Connection $connection_upgrade;\n      proxy_read_timeout 20d;\n      # Use preferably\n      proxy_set_header X-RStudio-Request $scheme://$host:$server_port$request_uri;\n      # OR existing X-Forwarded headers\n      proxy_set_header X-Forwarded-Host $host;\n      proxy_set_header X-Forwarded-Proto $scheme;\n      # OR alternatively the Forwarded header (just an example)\n      proxy_set_header Forwarded \"host=$host:$server_port;proto=$scheme;\";\n    }\n  }\n}\nIf you want to serve RStudio from a custom path (e.g. /rstudio) you would edit your nginx.conf file as shown below:\nhttp {\n\n  map $http_upgrade $connection_upgrade {\n    default upgrade;\n    ''      close;\n  }\n  \n  server {\n    listen 80;\n    \n    location /rstudio/ {\n      rewrite ^/rstudio/(.*)$ /$1 break;\n      proxy_pass http://localhost:8787;\n      proxy_http_version 1.1;\n      proxy_set_header Upgrade $http_upgrade;\n      proxy_set_header Connection $connection_upgrade;\n      proxy_read_timeout 20d;\n      # Use preferably\n      proxy_set_header X-RStudio-Request $scheme://$host:$server_port$request_uri;\n      proxy_set_header X-RStudio-Root-Path /rstudio\n      # OR let the proxy rewrite the root path\n      proxy_redirect http://localhost:8787/ $scheme://$host/rstudio/;\n      proxy_cookie_path / /rstudio;\n      # OR existing X-Forwarded headers\n      proxy_set_header X-Forwarded-Host $host;\n      proxy_set_header X-Forwarded-Proto $scheme;\n      # OR alternatively the Forwarded header (just an example)\n      proxy_set_header Forwarded \"host=$host:$server_port;proto=$scheme;\";\n    }\n\n\n\n\n\n\nNote\n\n\n\nThe header X-RStudio-Root-Path and the configuration option www-root-path server the same purpose. If either is set RStudio will always return cookies and redirects for the correct path, without requiring rewrite assistance from the proxy. The header value has precedence over the configuration value.\n\n\n# /etc/rstudio/rserver.conf\nwww-root-path=/rstudio\nAfter adding these entries you’ll then need to restart Nginx so that the proxy settings take effect:\nsudo /etc/init.d/nginx restart\nNote that RStudio needs the X-RStudio-Request, X-Forwarded-[Host|Port|Proto], or Forwarded headers set for various security reasons, and nginx does not supply this header by default. It must contain the original Host value of the request, which is usually set to $host in the nginx configuration file.\nIn some cases, such as when streaming job statuses from the launcher, the default response buffering in nginx can be too slow for delivering real-time updates, especially when configured to use SSL. If job output streams are not working properly from the home page, we recommend disabling response buffering by adding the following line under the server directive:\nserver {\n  # ... follows previous configuration\n  proxy_buffering off;\n}\n\n\nApache Configuration\nTo enable an instance of Apache running on the same server to act as a front-end proxy to RStudio you need to use the mod_proxy and mod_proxy_wstunnel modules. The steps for enabling this module vary across operating systems so you should consult your distribution’s Apache documentation for details. Apache as reverse proxy already includes X-Forwarded-Host (with port) and X-Forwarded-Proto by default.\nOn Debian and Ubuntu systems Apache can be installed with mod_proxy using the following commands:\nsudo apt-get install apache2\nsudo apt-get install libapache2-mod-proxy-html\nsudo apt-get install libxml2-dev\nThen, to update the Apache configuration files to activate mod_proxy you execute the following commands:\nsudo a2enmod proxy\nsudo a2enmod proxy_http\nsudo a2enmod proxy_wstunnel\nOn CentOS and RedHat systems Apache can be installed with mod_proxy and mod_proxy_wstunnel by following the instructions here:\nhttp://httpd.apache.org/docs/2.4/platform/rpm.html\nBy default with Apache 2.4, mod_proxy and mod_proxy_wstunnel should be enabled. You can check this by opening the file /etc/httpd/conf.modules.d/00-proxy.conf and making sure the following lines are included and not commented out:\nLoadModule proxy_module modules/mod_proxy.so\nLoadModule proxy_wstunnel_module modules/mod_proxy_wstunnel.so\nOnce you have enabled mod_proxy and mod_proxy_wstunnel in your Apache installation you need to add the required proxy commands to your VirtualHost definition. Note that you will also need to include code to correctly proxy websockets in order to correctly proxy Shiny apps and R Markdown documents within RStudio. Also note that if you are proxying to a server on a different machine you need to replace references to localhost with the correct address of the server where you are hosting RStudio.\n<VirtualHost *:80>\n\n  <Proxy *>\n    Allow from localhost\n  </Proxy>\n\n  RewriteEngine on\n  RewriteCond %{HTTP:Upgrade} =websocket\n  RewriteRule /(.*)     ws://localhost:8787/$1  [P,L]\n  RewriteCond %{HTTP:Upgrade} !=websocket\n  RewriteRule /(.*)     http://localhost:8787/$1 [P,L]\n  ProxyPass / http://localhost:8787/\n  ProxyPassReverse / http://localhost:8787/\n  # Use preferably this (store variable values with dummy rewrite rules)\n  RewriteRule . - [E=req_scheme:%{REQUEST_SCHEME}]\n  RewriteRule . - [E=http_host:%{HTTP_HOST}]\n  RewriteRule . - [E=req_uri:%{REQUEST_URI}]\n  RequestHeader set X-RStudio-Request \"%{req_scheme}e://%{http_host}e%{req_uri}e\"\n  ProxyRequests Off\n\n</VirtualHost>\nNote that if you want to serve RStudio from a custom path (e.g. /rstudio) you would replace the directives described above to:\nRewriteEngine on\nRewriteCond %{HTTP:Upgrade} =websocket\nRewriteRule /rstudio/(.*)     ws://localhost:8787/$1  [P,L]\nRewriteCond %{HTTP:Upgrade} !=websocket\nRewriteRule /rstudio/(.*)     http://localhost:8787/$1 [P,L]\nProxyPass /rstudio/ http://localhost:8787/\n# Use preferably this (store variable values with dummy rewrite rules)\nRewriteRule . - [E=req_scheme:%{REQUEST_SCHEME}]\nRewriteRule . - [E=http_host:%{HTTP_HOST}]\nRewriteRule . - [E=req_uri:%{REQUEST_URI}]\nRequestHeader set X-RStudio-Request \"%{req_scheme}e://%{http_host}e%{req_uri}e\"\nRequestHeader set X-RStudio-Root-Path \"/rstudio\"\n# Or alternatively\nProxyPassReverse /rstudio/ http://localhost:8787/\nProxyPassReverseCookiePath  \"/\"  \"/rstudio\"\nProxyRequests Off\n\n\n\n\n\n\nNote\n\n\n\nThe header X-RStudio-Root-Path and the configuration option www-root-path server the same purpose. If either is set RStudio will always return cookies and redirects for the correct path, without requiring rewrite assistance from the proxy. The header value has precedence over the configuration value.\n\n\n# /etc/rstudio/rserver.conf\nwww-root-path=/rstudio\nFinally, after you’ve completed all of the above steps you’ll then need to restart Apache so that the proxy settings take effect:\nsudo /etc/init.d/apache2 restart\n\n\nRStudio Configuration\nIf your RStudio Workbench and proxy server are running on the same machine you can also change the port RStudio Workbench listens on from 0.0.0.0 (all remote clients) to 127.0.0.1 (only the localhost). This ensures that the only way to connect to RStudio is through the proxy server. You can do this by adding the www-address entry to the /etc/rstudio/rserver.conf file as follows:\nwww-address=127.0.0.1\nNote that you may need to create this config file if it doesn’t already exist.\n\n\nCustom Paths and Path-Rewriting Proxies\nIn the examples above we have configurations where RStudio is served by the proxy under a custom /rstudio path. This is called a path-rewriting proxy setup.\nRStudio can use different combinations of HTTP headers and/or options to determine its location when path-rewriting in is use:\n\nUse X-RStudio-Request if possible. This way RStudio knows exacly the address presented in the user’s browser.\n\nOtherwise, you must use X-Forwarded-* family of headers or the Forwarded header.\n\nUse X-RStudio-Root-Path if possible. This way RStudio knows which portion of the path was added by the proxy.\n\nAlternatively, use the option www-root-path for the same effect.\nOtherwise, you must use additional options in your proxy configuration to adjust redirects and cookies for the right path.\n\n\nThe most reliable configuration is using X-RStudio-Request and X-RStudio-Root-Path defined as in the examples above. There’s little involvement of the proxy when using these headers.\nIf you have little experience with proxies but still want to use a custom path, we recommend using the www-root-path option in RStudio and at least the headers X-Forwarded-Host and X-Forwarded-Proto.\nFinally, if you want the proxy to have total control of custom path then define the rewrite rules yourself directly in the proxy configuration based on the alternatives suggested in the example above. In this case, do not use the option www-root-path or the header X-RStudio-Root-Path.\n\n\nCustomizing Default Proxy\nRStudio Workbench exposes itself over TCP by means of an nginx proxy instance that runs as the rserver-http process on the local machine. In some cases, this proxy instance may need to be customized.\nIn order to customize it, you can create any of the following three files. Each file modifies the nginx configuration at /var/lib/rstudio-server/conf/rserver-http.conf in the following way:\n\n/etc/rstudio/nginx.http.conf - allows you to add additional nginx directives under the root http node, and should be used for altering basic HTTP settings\n/etc/rstudio/nginx.server.conf - allows you to add additional nginx directives under the server node, and should be used for altering basic server settings\n/etc/rstudio/nginx.site.conf - allows you to add additional nginx directives under the location / node, and should be used for altering responses sent from RStudio\n\nSimply add the desired nginx configuration in the files above to modify the desired section - the contents of each file is copied into the rserver-http.conf template verbatim. Then, restart rstudio-server for the changes to take effect.\nIn most cases, you should not need to create these files and modify the nginx template that is provided."
  },
  {
    "href": "access_and_security/frame_origin.html#frame-origin",
    "title": "RStudio Workbench Administration",
    "section": "Frame Origin",
    "text": "For security reasons, RStudio will not load inside a browser frame (such as a frameset or IFrame) by default. You can modify this behavior by using the www-frame-origin option. For example, if you would like to host RStudio inside a browser frame at example.com, you can tell RStudio to allow this as follows:\n# /etc/rstudio/rserver.conf\nwww-frame-origin=example.com\nThere are several special values available for the www-frame-origin option:\n\n\n\n\n\n\n\nValue\nMeaning\n\n\n\n\nnone\nThe default; do not allow RStudio to load in any frame.\n\n\nsame\nAllow RStudio to load in a frame if it has the same origin (host and port) as RStudio.\n\n\nany\nAllow RStudio to load in a frame from any origin (not recommended)\n\n\nmy-domain.com\nAllow RStudio to load in a frame at my-domain.com\n\n\n\nTo interact programmatically with RStudio in an IFrame, see the Tutorial API."
  },
  {
    "href": "access_and_security/same_site_cookies.html#same-site-cookies",
    "title": "RStudio Workbench Administration",
    "section": "Same Site cookies",
    "text": "Most browsers have adopted recently a new attribute for cookies called SameSite which enforces additional security requirements around the cookie. RStudio does not define this attribute by default but you can use the option www-same-site for that purpose.\nFor example, the value SameSite=None is required by certain browsers (i.e. Chrome 84+) for embedding sites into an IFrame or frameset. To ensuring the delivery of RStudio cookies in this scenario, use the value www-same-site=none.\n# /etc/rstudio/rserver.conf\nwww-same-site=none\n\n\n\n\n\n\nImportant\n\n\n\nSameSite=None is insufficient without SSL enabled and may still prevent RStudio from working over non-SSL connections.\n\n\nSome browsers will not behave as expected in the presence of the SameSite=None; Safari 12 on MacOS 10.14 and iOS 12.x or older notably will not work. To workaround these limitations, RStudio will emit a pair of cookies, one with SameSite=None for standard-conforming browsers and a “legacy” cookie without SameSite for non-conforming browsers.\nYou also can use the value www-same-site=lax to mark cookies as SameSite=Lax what effectively prohibits the use of RStudio embedded into an IFrame or frameset on compliant browsers by blocking all RStudio cookies.\n# /etc/rstudio/rserver.conf\nwww-same-site=lax"
  },
  {
    "href": "access_and_security/cookies.html#cookies",
    "title": "RStudio Workbench Administration",
    "section": "Cookies",
    "text": "By default, when RStudio Workbench is configured with SSL, all authorization cookies are marked with the secure cookie attribute. If you wish to use your own SSL termination but force RStudio to mark cookies as secure, you can add the following configuration option:\n# /etc/rstudio/rserver.conf\nauth-cookies-force-secure=1"
  },
  {
    "href": "access_and_security/compatibility_with_safari.html#compatibility-with-safari-13",
    "title": "RStudio Workbench Administration",
    "section": "Compatibility with Safari 13+",
    "text": "Starting in Safari 13, if you are loading RStudio inside a browser frame on a completely different domain all cookies will be blocked because those will be considered third-party cookies.\nEmbedding RStudio in a subdomain of the main site causes its cookies to be considered first-party, allowing RStudio to work.\nAlternatively, you can place RStudio in the same domain as the main wrapping site but under a different URL path. This requires using a proxy in front of both the main site and RStudio. See Running with a Proxy below for more information.\n\n\n\n\n\n\nNote\n\n\n\nIn the near future, most browsers vendors plan to apply the same restrictions to cookies in some degree."
  },
  {
    "href": "access_and_security/additional_headers.html#additional-headers",
    "title": "RStudio Workbench Administration",
    "section": "Additional Headers",
    "text": "In some cases, you may need to have RStudio set additional headers on client responses. To do this, simply specify server-add-header for each header that you need to add, in the form Header Name:Header Value. For example, to have the server set a few extra custom headers:\n# /etc/rstudio/rserver.conf\nserver-add-header=X-Header-1:Value 1\nserver-add-header=X-Header-2:Value 2"
  },
  {
    "href": "access_and_security/ssl_ports.html#ssl-ports",
    "title": "RStudio Workbench Administration",
    "section": "SSL Ports",
    "text": "When RStudio Workbench is configured to use SSL the default behavior with respect to ports is:\n\nSSL is bound to port 443 (enabling access using the standard https protocol within the browser)\nThe server also listens on port 80 and redirects all requests to port 443 (allowing users to specify the domain without the https protocol and be automatically redirected to the secure port)\n\nHowever, if SSL is bound to another port (using the www-port option) then the automatic redirect behavior is not enabled. It’s also possible to disable automatic SSL redirects entirely using the ssl-redirect-http option as follows:\n# /etc/rstudio/rserver.conf\nssl-redirect-http=0\nNote that changes to the configuration will not take effect until the server is restarted.\n\nStrict Transport Security\nWhen SSL is enabled, RStudio Workbench sends an HTTP Strict Transport Security (HSTS) header, Strict-Transport-Security, by default on outbound responses. This header tells the browser to forbid all HTTP connections to the domain for a period of time.\nRStudio Workbench sets this period of time to 1 day (84600 seconds) by default, because if HTTPS issues arise it can be difficult to address them when the browser is locked to HTTPS because of HSTS. Once you are confident that your HTTPS setup is correct, you can increase the period by specifying the desired number of seconds in the ssl-hsts-max-age option. For example, to lock browsers to HTTPS for one year:\n# /etc/rstudio/rserver.conf\nssl-hsts-max-age=31536000\nIf all subdomains of the server on which RStudio Workbench is hosted support HSTS, you can extend HSTS protection to them as well with the ssl-hsts-include-subdomains option. This doesn’t happen by default since RStudio Workbench does not know what other services it’s sharing a domain with, but it’s a recommended security best practice, so you should turn it on if you can.\n# /etc/rstudio/rserver.conf\nssl-hsts-include-subdomains=1\nFinally, we do not recommend disabling HSTS, but if you need to, you can do so by setting ssl-hsts=0."
  },
  {
    "href": "access_and_security/secure_sockets.html#secure-sockets-ssl",
    "title": "RStudio Workbench Administration",
    "section": "Secure Sockets (SSL)",
    "text": "SSL Configuration\nIf your RStudio Workbench is running on a public network then configuring it to use SSL (Secure Sockets Layer) encryption is strongly recommended. You can do this via the ssl-enabled setting along with related settings that specify the location of your SSL certificate and key. For example:\n# /etc/rstudio/rserver.conf\nssl-enabled=1\nssl-certificate=/var/certs/your_domain_name.crt\nssl-certificate-key=/var/certs/your_domain_name.key  \nThe .crt file should be encoded in the PEM format; that is, the first line should read -----BEGIN CERTIFICATE-----, and the contents should be base64-encoded data. If your certificate is in another format, such as DER or PKCS, use the openssl command-line tool to convert it to PEM. For example:\nopenssl x509 -inform DER -outform PEM -text -in your_domain_name.der -out your_domain_name.crt\nIt’s important when installing the certificate .crt file that you concatenate together any intermediate certificates (i.e. the generic one from your certificate authority) with the certificate associated with your domain name. For example you could use a shell command of this form to concatenate the CA intermediate certificate to your domain name’s certificate:\n$ cat certificate-authority.crt >> your_domain_name.crt\nThe resulting file should then be specified in the ssl-certificate option.\nIt’s also important to ensure that the file permissions on your SSL certificate key are as restrictive as possible so it can’t be read by ordinary users. The file should typically be owned by the root user and be set as owner readable and writable. For example:\n$ sudo chmod 600 /var/certs/your_domain_name.key \n\n\nSSL Protocols\nBy default RStudio Workbench supports the TLSv1, TLSv1.1, TLSv1.2, and TLSv1.3 protocols for SSL. The list of supported protocols can configured via the ssl-protocols option. For example, to use only the TLSv1.1 and TLSv1.2 protocols you would use:\n# /etc/rstudio/rserver.conf\nssl-protocols=TLSv1.1 TLSv1.2\nThe list of supported protocols is space delimited (as illustrated above). Valid protocol values are: SSLv2, SSLv3, TLSv1, TLSv1.1, TLSv1.2, and TLSv1.3.\nNote that not all protocols may be available on your system; TLS 1.1 and 1.2 require OpenSSL 1.0.1, and TLS 1.3 requires OpenSSL 1.1.1 built with TLS 1.3 support."
  },
  {
    "href": "data_connectivity/connectivity_using_r_packages.html#connectivity-using-r-packages",
    "title": "RStudio Workbench Administration",
    "section": "Connectivity using R Packages",
    "text": "For R Packages that provide data connectivity through the Connections Contract, RStudio makes these connections also available in the Connections Pane and can be further customized using Snippet Files. Currently, the odbc and sparklyr packages provide this connectivity."
  },
  {
    "href": "data_connectivity/data_connectivity.html",
    "title": "RStudio Workbench Administration",
    "section": "",
    "text": "Overview\nIn this section:\n\nConnectivity Using ODBC\nConnectivity Using R Packages\nSnippet Files"
  },
  {
    "href": "data_connectivity/snippet_files.html#snippet-files",
    "title": "RStudio Workbench Administration",
    "section": "Snippet Files",
    "text": "A Connection Snippet File is an R code snippet with additional metadata which is intended to initialize a connection. This file can be as simple as:\nlibrary(readr)\ndata <- read_csv(readr_example(\"mtcars.csv\"))\nOnce this file is saved under /etc/rstudio/connections/ as Motor Trend Cars.R, RStudio will make this connection as available under the Connection Pane.\nThe path is configurable through the connections-path environment variable and multiple connection files can be specified.\nIn order to parameterize this connection, one can create fields using using the ${Position:Label=Default} syntax:\n\nPosition: The row position starting at zero.\nLabel: The label assigned to this field.\nDefault: An optional default value.\n\nFor example, we can filter out this dataframe to produce the following connection interface:\nlibrary(readr)\ndata <- read_csv(readr_example(\"mtcars.csv\"))\ndata[data$mpg == ${0:Miles per Gallon=21.4} | data$cyl == ${1:Cylinders=6}, ]\nIn order to create a ; separated list of values, one can use the syntax ${Position:Label=Default:Key}. Semicolon-separated list are common in database connections and therefore, natively supported in snippet files, for instance:\n\"${2:Letters=ABC:LettersKey}${3:Numbers=123:NumbersKey}\"\nThere are a couple of escape characters supported: $colon$ to escape : and $equal to escape =.\nAdditional resources are available under RStudio Extensions - Connections."
  },
  {
    "href": "data_connectivity/connectivity_using_odbc.html#connectivity-using-odbc",
    "title": "RStudio Workbench Administration",
    "section": "Connectivity using ODBC",
    "text": "RStudio makes ODBC connections available in the Connections Pane. ODBC connections are obtained from the odbcinst.ini file and can be further customized using Snippet Files.\n\nProfessional Drivers\nRStudio Workbench provides connectivity to data sources through RStudio Professional Drivers. See Getting Started with RStudio Professional Drivers and Databases using R for more information."
  },
  {
    "href": "license_management/product_activation.html#product-activation",
    "title": "RStudio Workbench Administration",
    "section": "Product Activation",
    "text": "Activation Basics\nWhen RStudio Workbench is first installed on a system it operates in evaluation mode for a period of time and then subsequently requires activation for continued use.\nTo determine the current license status of your system you can use the following command:\n$ sudo rstudio-server license-manager status\nAfter purchasing a license to RStudio Workbench you’ll receive a license key that can be used to activate the license on a given system.\nYou can activate your license key with the command:\n$ sudo rstudio-server license-manager activate <product-key>\nIf you want to move your license of RStudio Workbench to another system you should first deactivate it on the old system with the command:\n$ sudo rstudio-server license-manager deactivate"
  },
  {
    "href": "license_management/license_management.html#license-management",
    "title": "RStudio Workbench Administration",
    "section": "License Management",
    "text": "In this section:\n\nProduct Activation\nLicense Details\nConnectivity Requirements\n\nEvaluations\nFloating Licensing\nUserspace Licensing"
  },
  {
    "href": "license_management/userspace_licensing.html#userspace-licensing",
    "title": "RStudio Workbench Administration",
    "section": "Userspace Licensing",
    "text": "In a standard installation of RStudio Workbench, licensing configuration operations require elevated access (e.g. via sudo). This is appropriate given the product will normally be installed and activated by an administrator on behalf of multiple user accounts.\nAlternatively, the licensing system may be switched to a “userspace” model where the licensing commands are available to a non-elevated user account. This is a system-wide setting; it is not possible to mix both models on a single system.\n\nSwitching to Userspace Licensing\nBefore switching, stop the server, and deactivate any existing license-key or license-server.\n$ sudo rstudio-server stop\n$ sudo rstudio-server license-manager deactivate\n$ sudo rstudio-server license-manager clear-license-server\nNext, disable the standard system-level licensing mode by deleting the “verify” file.\n$ sudo rm /var/lib/rstudio-server/verify\nInitialize the license system in userspace mode. Note this command must not be run elevated, but as the RStudio server account (normally rstudio-server) as described in Server Account.\n$ rstudio-server license-manager initialize --userspace\nConfirm that the mode was successfully changed.\n$ rstudio-server license-manager verify\nTrial-Type: Verified\nStatus: Evaluation\nDays-Left: 5\nLicense-Scope: User\nThe line License-Scope: User indicates successful switch to userspace licensing (versus the default setting of System).\nAt this point, the user may perform licensing commands without using “sudo”, such as activating a license-key or configuring a license-server."
  },
  {
    "href": "license_management/floating_licensing.html#floating-licensing",
    "title": "RStudio Workbench Administration",
    "section": "Floating Licensing",
    "text": "If you stop and start RStudio Workbench instances frequently, for instance because you’re running them inside virtual machines or containers, you may wish to use floating licensing instead of traditional licensing.\nTo use floating licensing, you run a small, lightweight server, which holds a license that grants you the right to run a certain number of concurrent RStudio Workbench instances.\nWhen RStudio Workbench starts, it will connect to the license server and obtain a temporary lease, releasing it when RStudio Workbench is stopped. Using this method, you can have any number of RStudio Workbench instances, so long as you do not run more instances at once than specified in your license.\n\nFloating License Keys\nA license key which distributes floating license leases is not the same as a traditional license key, and the two cannot be used interchangeably. If you have purchased traditional license keys and wish to exchange them for a floating license key, or vice versa, please get in touch with RStudio customer support (support@rstudio.com).\n\n\nThe RStudio Workbench License Server\nThe RStudio Workbench License server supplies licenses to RStudio Workbench. It is available for Linux, Mac, and Windows. A license server can supply licenses to any platform; for instance, you can run your license server on Windows and distribute licenses to RStudio Workbench instances running Linux.\n\nLinux\nThe RStudio License Server site contains Linux license server downloads for all RStudio products. Download and install the license server for RStudio Workbench. You then activate your license key with the command:\n$ sudo dpkg -i rsp-license-server-1.1.2-x86_64.deb\n$ sudo rsp-license-server activate <product-key>\n$ sudo rsp-license-server start\nThe file /etc/rsp-license-server.conf contains configuration settings for the RStudio Workbench License server, including the network port to listen on and any proxy settings required for connecting to the Internet.\n\n\nMac and Windows\nThe RStudio License Server site contains downloads for the Mac and Windows license servers. These require a few additional configuration steps. They can be set up as follows (order is important):\n\nDownload the license server (TurboFloatServer) appropriate to your platform, and place it in the directory where you wish it to run.\nCopy the file /usr/lib/rstudio-server/bin/license-manager.conf to the same directory as TurboFloatServer, and change its name to TurboActivate.dat.\nIf activating online, run the command TurboFloatServer.exe -a=\"ABCD-EFGH-IJKL-MNOP-QRST-UVWX\".\nIf activating offline, follow the offline activation steps. Note that it is necessary to supply the fully qualified path to file arguments to TurboFloatServer, even if they are in the same directory as the executable.\nAfter successful activation, TurboFloatServer.exe -i with administrator permissions. This will install the license server as a service that will start automatically and run in the background.\n\nFor additional help with Mac and Windows license server installation and configuration, refer to the official TurboFloat Server documentation.\n\n\n\nLicense Server Hardware Requirements\nWhile the license server is designed to distribute licenses to ephemeral virtual machines or containers, which may move freely between hosts, the license server itself must stay on the same physical host on which it was activated.\nIt is acceptable to run the license server inside a container or a virtual machine, as long as the container or the VM always runs on the same hardware. Stopping the license server, moving it to a different physical host, and starting it again will cause it to become deactivated. Because it’s often impractical to try to ensure that the server only runs on a particular host, we recommend running the license server outside containers and virtualization software.\nNote that the system requirements for the license server are very low, so it can be run on almost any server. If your environment will not allow for ensuring that the server stays on a single physical host, please contact support@rstudio.com to discuss alternate licensing options.\n\n\nLicense Server Offline Activation\nThe rsp-license-server activate command requires an internet connection. If your license server has no connection to the Internet it’s also possible to perform an offline activation. The process for doing this on the license server is identical to the process used to activate RStudio Workbench offline. Generate an offline activation request as follows:\n$ sudo rsp-license-server activate-offline-request <product-key>\nExecuting this command will print an offline activation request to the terminal which you should copy and paste and then send to RStudio customer support (support@rstudio.com). You will receive a reply with a file attachment that can be used to activate offline as follows:\n$ sudo rsp-license-server activate-offline <activation-file>\n$ sudo rsp-license-server restart\n\n\nLicense Server Deactivation\nIf you are permanently decommissioning your license server, or need to transfer its license to a different license server, you should deactivate (remove) its license as follows:\nsudo rsp-license-server deactivate\n\n\nUsing Floating Licensing\nOnce your license server is up and running, you need to tell RStudio Workbench to use floating licensing instead of traditional licensing.\n# /etc/rstudio/rserver.conf\nserver-license-type=remote\nThe value remote indicates that RStudio Workbench should connect to a remote licensing server to obtain a license; the value local can be used to explicitly specify traditional (local) activation.\nThen, tell RStudio Workbench which licensing server to connect to:\n$ sudo rstudio-server license-manager license-server <server-hostname-or-ip>\n$ sudo rstudio-server restart\nYou only need to run the license-server command once; RStudio Workbench saves the server name and will use it on each subsequent startup.\nDepending on your system configuration, it is possible that the RStudio Workbench service will be started before the service which allows hostname resolution (this is known to be the case for example on some Amazon EC2 systems). If this is the case, you’ll want to specify the license server using a private IP address rather than a hostname, so that RStudio Workbench can acquire a license immediately when starting up.\n\nNote: If you are renewing your floating license offline or if you want to move your floating license for RStudio Workbench to another system, then you should first perform license deactivation offline.\n\nTo renew your floating license offline or to move your floating license, run the following to perform license deactivation offline:\n$ sudo rstudio-server deactivate-offline-request <product-key>\n\n\nSpecifying a License Server\nRStudio supports three methods for connecting to a license server. You can select the method by specifying the license server as follows:\n\nConnecting Over TCP\nExample\n$ sudo rstudio-server license-manager license-server mylicensehost:9403\nBy default, the RStudio Workbench License Server listens via raw TCP on port 8989. If you specify the only the hostname or IP address of the license server, this the kind of connection you’ll get.\nIf you wish to use a different port, you will need to specify the port in /etc/rsp-license-server.conf, and specify license-server to RStudio Workbench as <server-hostname-or-ip:port>.\n\n\nConnecting Over HTTPS\nExample\n$ sudo rstudio-server license-manager license-server https://mylicensehost/\nYou can also connect to the license server via HTTPS rather than raw TCP. This can be useful when using proxies or load balancers in front of the license server. Note that the license server does not use HTTPS by default, so you can only use this connectivity method if you have configured your license server to use HTTPS.\nConfiguring the license server for HTTPS support is outside the scope of this guide. You can read instructions here:\nConfiguring TurboFloat Server for HTTPS Communication\n\n\nConnecting to a Hosted Server\nExample\n$ sudo rstudio-server license-manager license-server 871A2BFA-87C5-11E9-BD16-4749DB7B7927\nFinally, if you are connecting to a hosted license server, specify the UUID of the server rather than its hostname. Hosted license servers are run by our licensing vendor, WyDay, and do not require you to run anything in your own network. Read more about setting up a hosted license server and getting a UUID here:\nCreating a LicenseChest Server\n\n\n\nConfiguring License Leases\nWhen using floating licenses, you can optionally determine how long the license leases last by setting the lease length value on the licensing server. This value is in seconds, so for instance to make license leases last 30 minutes you would use the following syntax:\n<!--/etc/rsp-license-server.conf-->\n<lease length=\"1800\"/>\nThe lease length controls how frequently the RStudio Workbench instances need to contact the licensing server to renew their license leases in order for the lease to remain valid.\nA shorter lease length will increase tolerance to failures on RStudio Workbench instances by making leases available for reuse more quickly. RStudio Workbench will release its lease immediately if shut down normally, but if abnormally terminated, the lease will not be released until it expires.\nA longer lease length will increase tolerance to transient failures on the network and the RStudio Workbench License Server. Any such issues that can be resolved before the lease is due for renewal won’t interrupt use of RStudio Workbench.\nWe generally recommend using a longer lease length. Use a short lease length only if your environment routinely encounters abnormal terminations of the server or the container/instance on which it runs.\n\n\nLicense Server Downtime Tolerance\nRStudio Workbench does not wait until its lease has fully expired before it renews it. It renews its lease when it is halfway to expiry. For instance, if you use 30 minute leases, RStudio Workbench will actually renew its lease every 15 minutes.\nThis means that it is possible to take down the license server for a short period of time without affecting any running RStudio Workbench instances. Because of the aforementioned behavior, no existing lease will be more than halfway to expiry if the server goes down.You have a grace period of N/2 (where N is the length of the lease) during which the server can be offline without consequences. For instance, if you use 30 minute leases, your license server can be offline for 15 minutes.\n\n\nLease Expiration and Renewal\nUnder normal conditions RStudio Workbench will automatically renew its license lease in a configurable interval as described above. However, there are situations in which it will be unable to do so, such as a network problem, or an issue on the host running the license server.\nWhen RStudio Workbench cannot obtain a license lease, either because there are no leases currently available or because it can’t reach the licensing server, it will begin automatically attempting to acquire a lease every 10 seconds. This interval is configurable; for instance, to retry every 30 seconds instead you would set the following value:\n# /etc/rstudio/rserver.conf\nlicense-retry-seconds=30\nIf you don’t want RStudio Workbench to attempt to reestablish a license lease automatically, set the value to 0 to disable retries. In this case you will need to manually restart RStudio Workbench in order to reestablish the lease. This can be useful if you often run more instances than you have keys for, and wish to have more control over which RStudio Workbench instances receive license leases from the limited pool on the license server.\n\n\nTroubleshooting Floating Licensing\nTo validate that the license server has been successfully activated, run the activation-status command. This will report the version of the server as well as the license key and the number of available slots.\n$ sudo rsp-license-server activation-status\nIf your server is activated but you’re still having trouble with floating licensing, you can tell the RStudio Workbench License Server to emit more detailed logs. Change the log level to notification:\n<!--/etc/rsp-license-server.conf-->\n<log file=\"/var/log/rstudio-licensing.log\" level=\"notification\"/>\nThen, restart the license server, tail the licensing log, and start your RStudio Workbench instances.\n$ sudo rsp-license-server restart\n$ tail -f /var/log/rstudio-licensing.log\nAt the notification level, the licensing log will tell you the total number of licenses associated with your key, and how many are currently in use. It will also notify you when RStudio Workbench instances acquire leases, and when those leases are released, renewed, or expired. No rotation is done for this log, so it’s recommended to use the warning level in production."
  },
  {
    "href": "license_management/connectivity_requirements.html#connectivity-requirements",
    "title": "RStudio Workbench Administration",
    "section": "Connectivity Requirements",
    "text": "In order to activate or deactivate RStudio Workbench, internet connectivity is required for communication with the licensing server. If your server is behind an internet proxy or not connected to the Internet at all this section describes what’s required to successfully activate.\nAdditionally, your server should have a synchronized system clock, using ntp or some other clock syncing service. If the server’s clock is sufficiently incorrect, licensing verification will fail.\n\nProxy Servers\nIf your server is behind an internet proxy, you may need to add an additional command line flag indicating the address and credentials required to communicate through the proxy. This may not be necessary if either the http_proxy or all_proxy environment variable is defined (these are read and used by the license manager when available).\nIf you do need to specify a proxy server explicitly you can do so using the --proxy command line parameter. For example:\n$ sudo rstudio-server license-manager --proxy=http://127.0.0.1/ activate <product-key>\nProxy settings can include a host-name, port, and username/password if necessary. The following are all valid proxy configurations:\nhttp://127.0.0.1/\nhttp://127.0.0.1:8080/\nhttp://user:pass@127.0.0.1:8080/\nIf the port is not specified, the license manager will default to using port 1080.\n\n\nOffline Activation\nIf your system has no connection to the Internet it’s also possible to perform an offline activation. To do this, we recommend using our offline activation application which will walk you through the process: RStudio Offline Activation\nTo activate your license offline, you first generate an offline activation request as follows:\n$ sudo rstudio-server license-manager activate-offline-request <product-key>\nExecuting this command will print an offline activation request to the terminal which you should copy and paste and enter into our offline activation application or send to RStudio customer support (support@rstudio.com). You will receive a reply with a file attachment that can be used to activate offline as follows:\n$ sudo rstudio-server license-manager activate-offline <activation-file>\nIf you are renewing your license or want to move your license of RStudio Workbench to another system you can also perform license deactivation offline. You can do this as follows:\n$ sudo rstudio-server license-manager deactivate-offline\nExecuting this command will print an offline deactivation request to the terminal which you should copy and paste and enter into the offline activation application then send to RStudio customer support (support@rstudio.com).\nYou can also perform an offline check of your current license status using the following command:\n$ sudo rstudio-server license-manager status-offline"
  },
  {
    "href": "license_management/evaluations.html#evaluations",
    "title": "RStudio Workbench Administration",
    "section": "Evaluations",
    "text": "Extending Evaluations\nIf you are unable to complete your evaluation of RStudio Connect during the initial evaluation period, contact your Customer Success Representative or RStudio Sales (sales@rstudio.com) to speak about your evaluation process and how we may be able to help with the remaining items you need to test.\nOnce you have the key, supply it to RStudio Workbench using the extend-evaluation command.\n$ sudo rstudio-server license-manager extend-evaluation <key>\nIf you are performing the evaluation on a physical machine (not on virtualized hardware or containers) without a network connection, you may also request an offline evaluation extension key, which does not require an internet connection. This key may be supplied to RStudio Workbench as follows:\n$ sudo rstudio-server license-manager extend-evaluation-offline <key>\nNote that offline evaluation extension keys are valid only on machines which do not have Internet access and are not virtualized. For most offline evaluation extensions, you will need to generate an offline evaluation request (see below for details).\n\n\nConnectivity Requirements\n\nBeginning Evaluations\nGenerally speaking, there are no network requirements during the evaluation period. Inside virtual machines or sandboxes (such as Docker), however, Internet access is required to begin the evaluation period.\nIf you have a proxy, you can supply it using the --proxy argument as described above. If however you have no means of connecting to the Internet from inside the virtual environment, you can begin the evaluation as follows:\n$ sudo rstudio-server license-manager begin-evaluation-request\nExecuting this command will print an offline activation request to the terminal which you should copy and paste and then send to RStudio customer support (support@rstudio.com). You will receive a reply with a file attachment that can be used to begin the evaluation offline as follows:\n$ sudo rstudio-server license-manager begin-evaluation-offline <evaluation-file>\n\n\nExtending Evaluations\nYou may extend evaluations offline using the same pattern described above (just use extend-evaluation-request and extend-evaluation-offline):\n$ sudo rstudio-server license-manager extend-evaluation-request\nThen, when you’ve received the evaluation file:\n$ sudo rstudio-server license-manager extend-evaluation-offline <evaluation-file>"
  },
  {
    "href": "license_management/license_details.html#license-details",
    "title": "RStudio Workbench Administration",
    "section": "License Details",
    "text": "RStudio Workbench licenses include some details that you’ll see when you run the status command. These are part of the license and can’t be changed without purchasing a different license. They are as follows:\n\n\n\n\n\n\n\nValue\nMeaning\n\n\n\n\nenable-launcher\nWhether the Job Launcher is enabled.\n\n\nsessions\nThe maximum number of concurrent R sessions that can be run; 0 if unlimited.\n\n\nusers\nThe maximum number of users that can connect to the server; 0 if unlimited.\n\n\n\nTypically, RStudio Workbench licenses either disable the Launcher but allow for unlimited local users and sessions, or enable the Launcher and provide limits on users and/or sessions. If you have questions about the best kind of license for your use case, contact sales@rstudio.com for help.\nNote that when named user licenses are in effect (users is greater than 0), R Session Auditing is enabled by default to help you keep track of which users are using the product."
  },
  {
    "href": "r_versions/session_initialization.html#session-initialization",
    "title": "RStudio Workbench Administration",
    "section": "Session Initialization",
    "text": "In the preceding sections, we described how to allow the server to discover multiple versions of R to be used by the user. The R environment is loaded before the session begins execution, and several files are executed along the way that can cause problems with your R Environment if any variables are incorrectly set.\nWhen a session is launched, the following steps occur:\n\nIf the file /etc/rstudio/rsession-profile exists, it is sourced.\nIf the R Version being loaded specifies a module to load, the user’s ~/.bashrc file is sourced and the module is loaded using the module load command.\nIf the R version being loaded specifies a prelauch script to run, it is sourced.\nA bash login shell is created, which sources the ~/.bash_profile, ~/.bash_login or the ~/.profile script, whichever is found first to exist (in that order).\nThe session is launched with the environment constructed in steps 1-4.\n\nAs you can see, there are many different scripts which can affect the R environment which gets initialized when starting a new session, so play close attention to how these scripts could be affecting your particular environment."
  },
  {
    "href": "r_versions/using_multiple_versions_of_r.html#using-multiple-versions-of-r-concurrently",
    "title": "RStudio Workbench Administration",
    "section": "Using Multiple Versions of R Concurrently",
    "text": "Determining Available Versions\nRStudio Workbench scans for and automatically discovers versions of R in the following locations:\n/usr/lib/R\n/usr/lib64/R\n/usr/local/lib/R\n/usr/local/lib64/R\n/opt/local/lib/R\n/opt/local/lib64/R\n/opt/R/*\n/opt/local/R/*\nThis is described in more detail in the Recommended Installation Directories section. If you have installed versions of R in alternate locations, you can list them within the /etc/rstudio/r-versions configuration file. For example:\n# /etc/rstudio/r-versions\n/opt/R-3.2.1\n/opt/R-devel-3.3\nIn addition, any version of R referenced in an r-version directive within User and Group Profiles is also recognized.\nIn order to be usable, the R home path must be readable by the RStudio server account (usually rstudio-server; see Access and Security for details).\n\nVersion Scan Report\nAt startup, RStudio Workbench collects information about each available R version as described above, and writes a report to the following file in JSON format:\n/var/lib/rstudio-server/r-versions\nThis file is later read by the various RStudio processes responsible for displaying and switching between R versions. If you aren’t seeing the R versions look and work as you expect, the content of this file can give you some insight into RStudio’s understanding of your system’s configuration. If you’re unable to resolve the issue, include the contents of the file when submitting a support ticket to support@rstudio.com.\nNote that the JSON format of the r-versions file is subject to change between RStudio versions, so avoid reading or using it in automated tooling.\nThe r-versions file must be available on all nodes that run R sessions. We don’t generally recommend changing its location, but if you need to do so in order to mount it on R session nodes, you can do via the r-versions-path option as in the following example:\n# /etc/rstudio/rserver.conf\nr-versions-path=/mnt/config/rstudio-server/r-versions\n\n\nExtended R Version Definitions\nThe /etc/rstudio/r-versions file allows you to specify extended information for a particular R Version, providing you:\n\nThe ability to specify additional environment variables to set\nAn optional preload script to run\nAn optional environment module to load (more info here)\nA user-friendly label name for the version that is displayed in the UI\n\nTo specify extended format information, modify the /etc/rstudio/r-versions file to consist of multiple R entries separated by a blank line. The following table lists the fields that are available for each R entry in the file.\n\n\n\n\n\n\n\nPath\n(Required if Module not specified, see Modules) The root directory of the location of the R installation.\n\n\nLabel\n(Optional) The user-friendly name for the R version that will be displayed to users in the UI.\n\n\nModule\n(Optional) The name of an environment module to load for the R version. This is loaded by running the command module load [module] after sourcing the user’s .bashrc file.\n\n\nScript\n(Optional) A script to run once the environment has been loaded but before the session process has been launched.\n\n\nRepo\n(Optional) A string representing a CRAN Repository URL, or the path to a repos.conf file which lists multiple package repositories. See CRAN Repositories for more information.\n\n\nLibrary\n(Optional) A : separated list of directories which house the desired R packages for the particular R version. Overrides the R_LIBS_SITE environment variable. This will be combined with R_LIBS_USER when forming the R library paths. Most R installations use a default site library located at $R_HOME/site-library, so you may need to include the default site library path directories when setting this field.\n\n\n\nAn example /etc/rstudio/r-versions file is shown below.\n# /etc/rstudio/r-versions\nPath: /opt/R/R-2.15.3\nLabel: My special R Version\nModule: testmodule\nScript: ~/rload.sh\nRepo: https://cran.ms.unimelb.edu.au/\nLibrary: /share/packages/R-2.15.3\n\nPath: /opt/R/R-2.15.3-alternate\nLabel: My special R Version 2\n\nModule: r/latest\nLabel: Latest version of R\n\n/opt/misc/R/SpecialR1\n/opt/misc/R/SpecialR2\n/opt/mic/R/AltnerateR\nIt is important that each entry consists of the fields as specified above. Each field must go on its own line. There should be no empty lines between field definitions.\nEach R entry must be separated by one full blank line (two new-line \\n characters). If only the path is being specified, with no label, script, or module, you may simply list the path to the installation (as in previous versions). Paths are not separated by a blank line, but they must be separate from extended definitions by a blank line (as in the above example).\n\nModules\nBy setting the name of a module in an environment definition, that version of R will be loaded entirely by module. When a module is defined and the Path is not specified, the default R binary on the path will be used once the module is loaded. Otherwise, if Path is specified, that specific binary will be used.\nIf you do not specify a Path to the R installation, you must ensure that RStudio Workbench can load the module by specifying the location of the module shell initialization script for sh. For example:\n# /etc/rstudio/rserver.conf\nmodules-bin-path=/usr/local/Modules/3.2.9/init/sh\nFailure to do so will result in RStudio Workbench being unable to verify the version, which will cause it to be unavailable for use.\n\n\n\nReloading Configuration\nIn order for the changes to the /etc/rstudio/r-versions file to be detected, you must either restart RStudio (via sudo rstudio-server restart) or send the SIGHUP message to the rserver process. This can be done using kill -s SIGHUP to the server process, or via the reload command:\nsudo rstudio-server reload\n\n\nExcluding Versions\nIf you have versions of R on your system that would normally be picked up by automatic scanning but which you’d like to exclude, the most straightforward thing to do is to disable R version scanning altogether and explicitly specify all versions you’d like to use in /etc/rstudio/r-versions. For example:\n# /etc/rstudio/rserver.conf\nr-versions-scan=0\n\n\n\nSwitching Between Versions\nTo switch between versions of R you use the version menu near the top right of the IDE:\n\n\n\nSwitching Versions\n\n\nAfter switching, the specified version will be used for the duration of the current session (see the section on Multiple R Sessions for more details on the lifetime of sessions). Newly created R sessions will continue to use whatever default R version has been configured for the user.\n\nPreserving Versions for Projects\nIt’s often useful to preserve the version used within an R project irrespective of whatever the current default R version is for a user. This is in fact the behavior by default for RStudio projects however can be changed from the General pane of the Global Options dialog.\nThis configuration enables users to easily migrate projects one-by-one to a new version of R after it’s been confirmed that all the code continues to work as expected under the new version.\n\n\n\nDisabling Use of Multiple Versions\nIf you want to prevent users from being able to change R versions entirely you can use the r-versions-multiple option:\n# /etc/rstudio/rserver.conf\nr-versions-multiple=0\nYou can also configure this on a per-user or per-group basis by specifying the r-versions-multiple option within [User and Group Profiles]."
  },
  {
    "href": "r_versions/managing_upgrades.html#managing-upgrades-of-r",
    "title": "RStudio Workbench Administration",
    "section": "Managing Upgrades of R",
    "text": "There are various ways to handle upgrades to new versions of R ranging from allowing each user to control exactly when they upgrade all the way to forcing everyone to upgrade all at once.\nBy combining the various options described above you can create a highly customized upgrade policy that reflects both your internal policies and the preferences of your users.\n\nUser Controlled Migration\nThe most conservative approach is to start with a default version of R and preserve that default for the lifetime of the server. In this configuration you can continue to install new versions of R as they are released however users won’t ever run those new versions unless they make an explicit gesture to do so. See the User Configurable Default Version and Switching Between Versions sections for details on how users can explicitly switch versions.\n\n\nPartial Migration\nIf your posture towards new R versions is that you’d like users to migrate to the new version(s) as quickly as is convenient you can be more aggressive in how you introduce them. In this scenario you might use the Default Version Per User or Group feature to migrate a portion of new users immediately but preserve older versions for those who request it.\nNote that in this scenario R projects will still preserve their previous R version so long as users have enabled the option described in Preserving Versions for Projects.\n\n\nFull Migration\nThe most aggressive approach is to force all users to upgrade to the new R version immediately (this is essentially what happens in the open-source version of RStudio Server). To implement this you’d set a Single Default Version of R as well as disabling the use multiple versions as described in Disabling Use of Multiple Versions.\nNote that via User and Group Profiles you could also have a subset of R users that are always fully migrated to new versions while preserving user controlled migration or partial migration for others."
  },
  {
    "href": "r_versions/overview.html#overview",
    "title": "RStudio Workbench Administration",
    "section": "Overview",
    "text": "RStudio Workbench enables users and administrators to have very fine-grained control over which versions of R are used in various contexts. Capabilities include:\n\nAdministrators can install several versions of R and specify a global default version as well as per-user or per-group default versions.\nUsers can switch between any of the available versions of R as they like.\nUsers can specify that individual R projects remember their last version of R and always use that version until explicitly migrated to a new version.\n\nFlexible control over R versions makes it much easier to provide upgraded versions of R for users (or individual projects) that require them; while at the same time not disrupting work that requires continued use of older versions."
  },
  {
    "href": "r_versions/r_versions.html#r-versions",
    "title": "RStudio Workbench Administration",
    "section": "R Versions",
    "text": "RStudio Workbench enables users and administrators to have very fine-grained control over which versions of R are used in various contexts. Capabilities include:\n\nAdministrators can install several versions of R and specify a global default version as well as per-user or per-group default versions.\nUsers can switch between any of the available versions of R as they like.\nUsers can specify that individual R projects remember their last version of R and always use that version until explicitly migrated to a new version.\n\nFlexible control over R versions makes it much easier to provide upgraded versions of R for users (or individual projects) that require them; while at the same time not disrupting work that requires continued use of older versions."
  },
  {
    "href": "r_versions/installing_r.html#installing-r",
    "title": "RStudio Workbench Administration",
    "section": "Installing R",
    "text": "We recommend installing multiple versions of R because an environment with multiple versions of R helps provide a stable, reproducible environment for your R developers.\nInstall R using the directions at https://docs.rstudio.com/resources/install-r/.\n\nRecommended Installation Directories\nRStudio Workbench automatically scans for versions of R at the following locations:\n/usr/lib/R\n/usr/lib64/R\n/usr/local/lib/R\n/usr/local/lib64/R\n/opt/local/lib/R\n/opt/local/lib64/R\nIn addition, RStudio Workbench scans all subdirectories of the following directories within /opt:\n/opt/R\n/opt/local/R\nFor example, any of the following installed versions of R will be automatically detected by RStudio Workbench:\n/opt/R/3.1.0\n/opt/R/3.2.0\n/opt/local/R/3.1.0\n/opt/local/R/3.2.0\nIf you have versions of R located at other places in the file system, RStudio Workbench can still utilize them. However, you’ll need to explicitly specify their location in a configuration file (this is covered in more detail in the Using Multiple Versions section)."
  },
  {
    "href": "r_versions/configuring_default.html#configuring-the-default-version-of-r",
    "title": "RStudio Workbench Administration",
    "section": "Configuring the Default Version of R",
    "text": "When multiple versions of R are installed you will need to specify which version is the default one for new R sessions. This can be done automatically via the system PATH. However, several other mechanisms are provided when more flexibility is required.\n\nSingle Default Version of R\nRStudio uses the version of R pointed to by the output of the following command:\n$ which R\nThe which command performs a search for the R executable using the system PATH. RStudio will therefore by default bind to the same version that is run when R is executed from a terminal.\nFor versions of R installed by system package managers this will be /usr/lib/R. For versions of R installed from source this will typically (but not always) be /usr/local/lib/R.\nIf you want to override which version of R is used, then you can use the rsession-which-r setting. For example:\n# /etc/rstudio/rserver.conf\nrsession-which-r=/usr/local/lib/R\nNote: This change will not take effect until the server is restarted.\n\n\nDefault Version Per User or Group\nYou can use the User and Group Profiles feature to specify distinct default versions of R for various users and groups. For example, the following profile configuration uses R 3.1.0 as the system default, R 3.2.0 for the powerusers group, and R 3.0.2 for the user jsmith:\n[*]\nr-version = /opt/R/3.1.0\n\n[@powerusers]\nr-version = /opt/R/3.2.0\n\n[jsmith]\nr-version = /opt/R/3.0.2\nNote that r-version specifies the full path to the directory where R is installed.\n\n\nUser Configurable Default Version\nUsers can also configure their own default version of R. This is done using the General pane of the Global Options dialog:\n\n\n\nSet Default R Version\n\n\nSee the Disabling Use of Multiple Versions section for details on how to disable version switching entirely either system-wide or on a per-user or per-group basis."
  },
  {
    "href": "rstudio_server_configuration/rstudio_server_configuration.html",
    "title": "RStudio Workbench Administration",
    "section": "",
    "text": "Overview\nThe following sections detail user-configurable options for RStudio Server and RStudio Workbench."
  },
  {
    "href": "rstudio_server_configuration/rsession_conf.html#rsession.conf",
    "title": "RStudio Workbench Administration",
    "section": "rsession.conf",
    "text": "The following is a list of available options that can be specified in the rsession.conf configuration file, which controls behavior of the rsession process, allowing you to tune various R session parameters.\n\nverify Settings\n\nverify-installation\nVerifies that the session installation is working correctly and exits.\nType: bool\nDefault: 0\n\n\n\nversion Settings\n\nversion\nPrints the version number and exits.\nType: bool\nDefault: 0\n\n\n\ndocs Settings\n\ndocs-url\nIf specified, overrides the URL to navigate to when a user clicks on the RStudio help link.\nType: string\nDefault: <empty string>\n\n\n\nsession Settings\n\nsession-timeout-minutes\nThe amount of minutes before a session times out, at which point the session will either suspend or exit.\nType: int\nDefault: 120\n\n\nsession-timeout-suspend\nIndicates whether or not to suspend the session after the timeout has elapsed. Setting this to false will cause the session to quit instead of suspending to disk when the session times out.\nType: bool\nDefault: 1\n\n\nsession-disconnected-timeout-minutes\nIf set, causes the session to time out after not receiving any new connections within the specified minutes. This behavior is generally not needed, and you should instead use session-timeout-minutes\nType: int\nDefault: 0\n\n\nsession-preflight-script\nSets a script to be run on startup before any R initialization has occurred.\nType: string\nDefault: <empty string>\n\n\nsession-create-public-folder\nIndicates whether or not to create a Public folder for the user whenever the session starts. This folder will have global read permissions, and can be used as a simple means for users to share files. It is recommended you do not use this feature, and instead use the more advanced Project Sharing features.\nType: bool\nDefault: 0\n\n\nsession-create-profile\nIndicates whether or not to create a default empty .Rprofile script within the user’s home directory, which can be altered to perform any desired common startup tasks.\nType: bool\nDefault: 0\n\n\nsession-rprofile-on-resume-default\nSpecifies the default user setting for running the Rprofile when sessions are resumed.\nType: bool\nDefault: 0\n\n\nsession-save-action-default\nSpecifies the default save action (yes, no, or ask).\nType: string\nDefault: <empty string>\n\n\nsession-default-working-dir\nSpecifies the default working directory to use for new sessions.\nType: string\nDefault: <empty string>\n\n\nsession-default-new-project-dir\nSpecifies the default directory to use for new projects.\nThis option is deprecated and should not be used.\nType: string\nDefault: ~\n\n\nshow-help-home\nIndicates whether or not to show the help home page on startup.\nType: bool\nDefault: 0\n\n\nsession-default-console-term\nSpecifies the default TERM setting for the R console.\nType: string\nDefault: xterm-256color\n\n\nsession-default-clicolor-force\nSpecifies the default CLICOLOR_FORCE setting for the R console.\nType: bool\nDefault: 1\n\n\nsession-quit-child-processes-on-exit\nIndicates whether or not to quit child processes of the session on exit. If unset, child processes created by forking or parallel processing may continue to run in the background after the session is terminated.\nType: bool\nDefault: 0\n\n\nsession-first-project-template-path\nSpecifies the path to a first project template which will be copied into new users’ home directories and opened the first time they run a session. The template can optionally be configured with DefaultOpenDocs to cause documents to automatically be opened for the first project.\nType: string\nDefault: <empty string>\n\n\ndefault-rsconnect-server\nSpecifies the default RStudio Connect server URL.\nType: string\nDefault: <empty string>\n\n\nwebsocket-ping-seconds\nSpecifies the WebSocket keep-alive ping interval for session terminals.\nType: int\nDefault: 10\n\n\nwebsocket-connect-timeout\nSpecifies the WebSocket initial connection timeout in seconds for session terminals.\nType: int\nDefault: 3\n\n\nwebsocket-log-level\nSpecifies the WebSocket log level for session terminals ((0=none, 1=errors, 2=activity, 3=all).\nType: int\nDefault: 0\n\n\nwebsocket-handshake-timeout\nSpecifies the WebSocket protocol handshake timeout for session terminals in milliseconds.\nType: int\nDefault: 5000\n\n\npackage-output-to-package-folder\nSpecifies whether or not package builds output to the package project folder.\nType: bool\nDefault: 0\n\n\nrestrict-directory-view\nIndicates whether or not to restrict the directories that can be viewed within the IDE.\nType: bool\nDefault: 0\n\n\ndirectory-view-whitelist\nSpecifies a list of directories exempt from directory view restrictions, separated by a colon character (:).\nType: string\nDefault: <empty string>\n\n\nsession-env-var-save-blacklist\nSpecifies a list of environment variables that will not be saved when sessions suspend, separated by a colon character (:).\nType: string\nDefault: <empty string>\n\n\nsession-suspend-on-incomplete-statement\nSpecifies whether the session should be allowed to suspend when a user has entered a partial R statement.\nType: bool\nDefault: 0\n\n\n\nallow Settings\n\nallow-vcs-executable-edit\nIndicates whether or not to allow editing of VCS (Version Control Systems) executables.\nType: bool\nDefault: 1\n\n\nallow-r-cran-repos-edit\nIndicates whether or not to allow editing of CRAN repositories.\nType: bool\nDefault: 1\n\n\nallow-vcs\nIndicates whether or not to allow the use of version control features.\nType: bool\nDefault: 1\n\n\nallow-package-installation\nIndicates whether or not to allow installation of packages from the packages pane.\nType: bool\nDefault: 1\n\n\nallow-shell\nIndicates whether or not to allow access to the shell dialog.\nType: bool\nDefault: 1\n\n\nallow-terminal-websockets\nIndicates whether or not to allow connections to terminal sessions with websockets.\nType: bool\nDefault: 1\n\n\nallow-file-downloads\nIndicates whether or not to allow file downloads from the files pane.\nType: bool\nDefault: 1\n\n\nallow-file-uploads\nIndicates whether or not to allow file uploads from the files pane.\nType: bool\nDefault: 1\n\n\nallow-remove-public-folder\nIndicates whether or not to allow removal of the user public folder.\nType: bool\nDefault: 1\n\n\nallow-rpubs-publish\nIndicates whether or not to allow publishing of content to external services.\nType: bool\nDefault: 1\n\n\nallow-external-publish\nIndicates whether or not to allow publishing of content to external services.\nType: bool\nDefault: 1\n\n\nallow-publish\nIndicates whether or not to allow publishing of content.\nType: bool\nDefault: 1\n\n\nallow-presentation-commands\nIndicates whether or not to allow presentation commands.\nType: bool\nDefault: 0\n\n\nallow-full-ui\nIndicates whether or not to allow full standalone UI mode.\nType: bool\nDefault: 1\n\n\nallow-launcher-jobs\nIndicates whether or not to allow running jobs via the Launcher.\nType: bool\nDefault: 1\n\n\n\nr Settings\n\nr-core-source\nSpecifies the Core R source path.\nType: string\nDefault: R\n\n\nr-modules-source\nSpecifies the Modules R source path.\nType: string\nDefault: R/modules\n\n\nr-session-package-archives\nSpecifies the R package archives path.\nType: string\nDefault: R/packages\n\n\nr-libs-user\nSpecifies the R user library path.\nType: string\nDefault: <empty string>\n\n\nr-cran-repos\nSpecifies the default CRAN repository.\nType: string\nDefault: <empty string>\n\n\nr-cran-repos-file\nSpecifies the path to a configuration file which contains default CRAN repositories.\nType: string\nDefault: The first repos.conf file that is found within the XDG_CONFIG_DIRS environment, or /etc/rstudio/repos.conf if not XDG_CONFIG_DIRS are specified.\n\n\nr-cran-repos-url\nSpecifies the URL to a configuration file which contains optional CRAN repositories.\nType: string\nDefault: <empty string>\n\n\nr-auto-reload-source\nIndicates whether or not to automatically reload R source if it changes during the session.\nType: bool\nDefault: 0\n\n\nr-compatible-graphics-engine-version\nSpecifies the maximum graphics engine version that this version of RStudio is compatible with.\nType: int\nDefault: 14\n\n\nr-resources-path\nSpecifies the directory containing external resources.\nType: string\nDefault: resources\n\n\nr-doc-dir-override\nSpecifies the override for R_DOC_DIR (used for debug configurations).\nType: string\nDefault: <empty string>\n\n\nr-restore-workspace\nIf set, overrides the user/project restore workspace setting. Can be 0 (No), 1 (Yes), or 2 (Default).\nType: int\nDefault: 2 (Default).\n\n\nr-run-rprofile\nIf set, overrides the user/project .Rprofile run setting. Can be 0 (No), 1 (Yes), or 2 (Default).\nType: int\nDefault: 2 (Default).\n\n\n\nlimits Settings\n\nlimit-file-upload-size-mb\nSets a size limit in megabytes on files that are uploaded via the files pane.\nType: int\nDefault: 0\n\n\nlimit-cpu-time-minutes\nSets a limit in minutes for the amount of time top level R computations may run before being interrupted.\nType: int\nDefault: 0\n\n\nlimit-xfs-disk-quota\nIndicates whether or not XFS quotas should be enforced when performing file operations via the files pane.\nType: bool\nDefault: 0\n\n\n\nexternal Settings\n\nexternal-consoleio-path\nSpecifies the path to the consoleio executable (Windows-only).\nType: string\nDefault: bin/consoleio.exe\n\n\nexternal-gnudiff-path\nSpecifies the path to gnudiff utilities (Windows-only).\nType: string\nDefault: bin/gnudiff\n\n\nexternal-gnugrep-path\nSpecifies the path to gnugrep utilities (Windows-only).\nType: string\nDefault: bin/gnugrep\n\n\nexternal-msysssh-path\nSpecifies the path to msys_ssh utilities (Windows-only).\nType: string\nDefault: bin/msys-ssh-1000-18\n\n\nexternal-sumatra-path\nSpecifies the path to SumatraPDF (Windows-only).\nType: string\nDefault: bin/sumatra\n\n\nexternal-winutils-path\nSpecifies the path to Hadoop Winutils (Windows-only).\nType: string\nDefault: bin/winutils\n\n\nexternal-hunspell-dictionaries-path\nSpecifies the path to hunspell dictionaries.\nType: string\nDefault: resources/dictionaries\n\n\nexternal-mathjax-path\nSpecifies the path to the mathjax library.\nType: string\nDefault: resources/mathjax-27\n\n\nexternal-pandoc-path\nSpecifies the path to pandoc binaries.\nType: string\nDefault: bin/pandoc\n\n\nexternal-libclang-path\nSpecifies the path to the libclang shared library\nType: string\nDefault: bin/rsclang\n\n\nexternal-libclang-headers-path\nSpecifies the path to the libclang builtin headers.\nType: string\nDefault: resources/libclang/builtin-headers\n\n\nexternal-winpty-path\nSpecifies the path to winpty binaries.\nType: string\nDefault: bin\n\n\n\ngit Settings\n\ngit-commit-large-file-size\nWarns when attempting to commit files larger than this size (in bytes; set 0 to disable).\nType: int\nDefault: 5242880\n\n\n\nuser Settings\n\nshow-user-identity\nIndicates whether or not to show the user identity in the session UI.\nType: bool\nDefault: 1\n\n\n\nmisc Settings\n\ntutorial-api-enabled\nEnables/disables the tutorial API.\nType: bool\nDefault: 0\n\n\ntutorial-api-parent-notify-enabled\nEnables/disables tutorial API parent notification.\nType: bool\nDefault: 0\n\n\ntutorial-api-client-origin\nSpecifies the tutorial API client origin.\nType: string\nDefault: <empty string>\n\n\nnfs-acl-version\nSpecifies the protocol version for the NFS Access Control List to use with Project Sharing (nfsv3 or nfsv4).\nType: string\nDefault: <empty string>\n\n\nnfs4-principal-type\nSpecifies the type of security principal to use with NFSv4 Access Control Lists (‘username’ or ‘uid’).\nType: string\nDefault: username\n\n\nnfs4-domain\nSpecifies the domain for NFSv4 Access Control Lists. Needed when using Project Sharing on an NFSv4 share with username-style security principals.\nType: string\nDefault: <empty string>\n\n\nproject-sharing-enumerate-server-users\nIndicates whether or not to enumerate the server’s user groups when determining the users available for Project Sharing. If disabled, enumerates the users that are present in the RStudio user database instead.\nType: bool\nDefault: 0\n\n\nsession-timeout-kill-hours\nSpecifies the amount of hours to wait before forcefully killing a running session after it has been idle.\nType: int\nDefault: 0"
  },
  {
    "href": "rstudio_server_configuration/rserver_conf.html#rserver.conf",
    "title": "RStudio Workbench Administration",
    "section": "rserver.conf",
    "text": "The following is a list of available options that can be specified in the rserver.conf configuration file, which controls behavior of the rserver process, allowing you to tune HTTP, authorization options, and other settings that broadly affect RStudio Server.\n\nverify Settings\n\nverify-installation\nRuns verification mode to verify the current installation.\nType: bool\nDefault: 0\n\n\nverify-user\nSpecifies the run-as user for additional Job Launcher verification.\nType: string\nDefault: <empty string>\n\n\nverify-test\nSpecifies the verify-installation test to run. Leave empty to run all tests.\nType: string\nDefault: <empty string>\n\n\n\nserver Settings\n\nserver-working-dir\nThe default working directory of the rserver process.\nType: string\nDefault: /\n\n\nserver-user\nThe user account of the rserver process.\nType: string\nDefault: rstudio-server\n\n\nserver-daemonize\nIndicates whether or not the rserver process should run as a daemon.\nType: bool\nDefault: 1 (true) if rserver was run with root privilege, otherwise 0 (false).\n\n\nserver-pid-file\nThe path to a file where the rserver daemon’s pid is written.\nType: string\nDefault: /var/run/rstudio-server.pid\n\n\nserver-set-umask\nIf enabled, sets the rserver process umask to 022 on startup, which causes new files to have rw-r-r permissions.\nType: bool\nDefault: 1\n\n\nsecure-cookie-key-file\nIf set, overrides the default path of the secure-cookie-key file used for encrypting cookies.\nType: string\nDefault: <empty string>\n\n\nserver-data-dir\nPath to the data directory where RStudio Server will write run-time state.\nType: string\nDefault: /var/run/rstudio-server\n\n\nserver-add-header\nAdds a header to all responses from RStudio Server. This option can be specified multiple times to add multiple headers.\nType: string\nDefault: <empty string>\n\n\nserver-nginx-path\nThe relative path from the RStudio installation directory, or absolute path where the nginx binary is located.\nType: string\nDefault: bin/rserver-http\n\n\nserver-nginx-conf-template-path\nThe relative path from the RStudio installation directory, or absolute path where the nginx config file templates are located.\nType: string\nDefault: conf\n\n\nserver-nginx-conf-path\nSpecifies the path to the nginx config files.\nType: string\nDefault: /var/lib/rstudio-server/conf\n\n\nserver-nginx-ld-library-path\nSpecifies the LD_LIBRARY_PATH for the nginx executable.\nType: string\nDefault: <empty string>\n\n\nserver-access-log\nIndicates whether or not to write HTTP access logs to /var/log/rstudio-server.\nType: bool\nDefault: 0\n\n\nserver-nginx-http-directives-path\nSpecifies the path to custom nginx http directives.\nType: string\nDefault: The first nginx.http.conf file that is found on the XDG_CONFIG_DIRS environment, or /etc/rstudio/nginx.http.conf if no XDG_CONFIG_DIRS are specified.\n\n\nserver-nginx-server-directives-path\nSpecifies the path to custom nginx server directives.\nType: string\nDefault: The first nginx.server.conf file that is found on the XDG_CONFIG_DIRS environment, or /etc/rstudio/nginx.server.conf if no XDG_CONFIG_DIRS are specified.\n\n\nserver-nginx-site-directives-path\nSpecifies the path to custom nginx site directives.\nType: string\nDefault: The first nginx.site.conf file that is found on the XDG_CONFIG_DIRS environment, or /etc/rstudio/nginx.site.conf if no XDG_CONFIG_DIRS are specified.\n\n\nserver-health-check-enabled\nIndicates whether or not to allow access to the server health check URL.\nType: bool\nDefault: 0\n\n\nserver-license-type\nSpecifies whether to use remote (floating) or local (activation) licensing.\nType: string\nDefault: local\n\n\nlicense-retry-seconds\nSpecifies the number of seconds to wait between floating license retries.\nType: int\nDefault: \n\n\nresolve-load-balancer-nodes\nIndicates whether or not to resolve IP addresses associated with load balancer nodes; not compatible with SSL unless the the IP address is in the CN/SAN.\nType: bool\nDefault: 0\n\n\nserver-balancer-path\nThe relative path from the RStudio installation directory, or absolute path where the custom load balancing script is located.\nType: string\nDefault: bin/rserver-balancer\n\n\nserver-multiple-sessions\nIndicates whether or not to allow multiple sessions per user.\nType: bool\nDefault: 1\n\n\nr-versions-multiple\nIndicates whether or not to allow the use of multiple R versions.\nType: bool\nDefault: 1\n\n\nserver-project-sharing\nIndicates whether or not to allow project sharing.\nType: bool\nDefault: 1\n\n\nserver-project-sharing-root-dir\nSpecifies the root directory for shared projects in addition to users’ own home directories.\nType: string\nDefault: <empty string>\n\n\nserver-user-home-page\nIndicates whether or not to show the user home page upon login.\nType: bool\nDefault: 1\n\n\nr-versions-scan\nIndicates whether or not to scan for available R versions on the system.\nType: bool\nDefault: 1\n\n\nmodules-bin-path\nSpecifies the path to modules sh init binary. This is necessary if you intend to load R versions via modules.\nType: string\nDefault: <empty string>\n\n\nadmin-enabled\nIndicates whether or not to allow access to the administration dashboard.\nType: bool\nDefault: 0\n\n\nadmin-group\nLimits admin dashboard access to users belonging to the specified group.\nType: string\nDefault: <empty string>\n\n\nadmin-superuser-group\nLimits admin superusers to those belonging to the specified group.\nType: string\nDefault: <empty string>\n\n\nadmin-monitor-log-use-server-time-zone\nIndicates whether or not to use the server time zone when displaying the monitor log. If disabled, uses UTC.\nType: bool\nDefault: 0\n\n\nr-versions-path\nSpecifies the path to the file containing the list of available R Versions in JSON format. This file will be automatically generated by the rserver process after discovering the R versions available on the system. It is strongly recommended not to modify this setting in most cases.\nType: string\nDefault: /var/lib/rstudio-server/r-versions\n\n\nlauncher-address\nSpecifies the address of the Launcher service (local unix domain socket file or IP address).\nType: string\nDefault: <empty string>\n\n\nlauncher-port\nSpecifies the port of the Launcher to connect to (if not using a unix domain socket).\nType: string\nDefault: <empty string>\n\n\nlauncher-use-ssl\nIndicates whether or not to use SSL connections when connecting to the Launcher (if not using a unix domain socket).\nType: bool\nDefault: 0\n\n\nlauncher-verify-ssl-certs\nIndicates whether or not to verify the Launcher certificate(s) when using an SSL connection.\nType: bool\nDefault: 1\n\n\nlauncher-sessions-enabled\nIndicates whether or not to use the Launcher for creating sessions.\nType: bool\nDefault: 0\n\n\nlauncher-default-cluster\nSpecifies the default cluster to launch jobs on when using the Launcher.\nType: string\nDefault: <empty string>\n\n\nlauncher-sessions-callback-address\nThe callback address (hostname, IP address, or HTTP URL) of rserver for Launcher sessions to communicate back.\nType: string\nDefault: <empty string>\n\n\nlauncher-sessions-callback-verify-ssl-certs\nIndicates whether or not to enforce SSL certificate verification of the server when Launcher sessions communicate back via the callback address.\nType: bool\nDefault: 1\n\n\nlauncher-sessions-container-image\nSpecifies the default container image to use for Launcher sessions. Only applicable for container-based job systems (e.g. Kubernetes).\nType: strng\nDefault: \n\n\nlauncher-sessions-container-run-as-root\nIndicates whether or not to run the Launcher session containers as root. If not, uses the requesting user’s UID. Only applicable for container-based job systems.\nType: bool\nDefault: 0\n\n\nlauncher-sessions-create-container-user\nIndicates whether or not to create a user for the container’s owner when running Launcher session containers. Only applicable for container-based job systems.\nType: bool\nDefault: 1\n\n\nlauncher-sessions-connection-timeout-seconds\nSpecifies the connection timeout in seconds to use when establishing a connection to a Launcher session.\nType: int\nDefault: 3\n\n\nlauncher-sessions-clusters\nSpecifies a comma-separated list of available clusters for launching interactive sessions (or all Launcher clusters if empty).\nType: string\nDefault: <empty string>\n\n\nlauncher-adhoc-clusters\nSpecifies a comma-separated list of available clusters for launching adhoc jobs (or all Launcher clusters if empty).\nType: string\nDefault: <empty string>\n\n\nlauncher-sessions-container-images\nSpecifies a comma-separated list of available container images for launching interactive sessions (or all cluster images if empty). Only applicable for container-based job systems.\nType: string\nDefault: <empty string>\n\n\nlauncher-adhoc-container-images\nSpecifies a comma-separated list of available container images for launching ad-hoc jobs (or all cluster images if empty). Only applicable for container-based job systems.\nType: string\nDefault: <empty string>\n\n\nlauncher-sessions-forward-container-environment\nIndicates whether or not to forward the existing container environment variables to the session. Only applicable for container-based job systems.\nType: bool\nDefault: 1\n\n\nlauncher-sessions-container-forward-groups\nIndicates whether or not to forward the user’s supplemental groups to the container. Only applicable for container-based job systems.\nType: bool\nDefault: 1\n\n\n\nwww Settings\n\nwww-address\nThe network address that RStudio Server will listen on for incoming connections.\nType: string\nDefault: 0.0.0.0\n\n\nwww-port\nThe port that RStudio Server will bind to while listening for incoming connections. If left empty, the port will be automatically determined based on your SSL settings (443 for SSL, 80 for no SSL).\nType: string\nDefault: <empty string>\n\n\nwww-root-path\nThe path prefix added by a proxy to the incoming RStudio URL. This setting is used so RStudio Server knows what path it is being served from. If running RStudio Server behind a path-modifying proxy, this should be changed to match the base RStudio Server URL.\nType: string\nDefault: Assume the root path '/' if not defined.\n\n\nwww-thread-pool-size\nThe size of the threadpool from which requests will be serviced. This may be increased to enable more concurrency, but should only be done if the underlying hardware has more than 2 cores. It is recommended to use a value that is <= to the number of hardware cores, or <= to two times the number of hardware cores if the hardware utilizes hyperthreading.\nType: int\nDefault: 2\n\n\nwww-proxy-localhost\nIndicates whether or not to proxy requests to localhost ports over the main server port. This should generally be enabled, and is used to proxy HTTP traffic within a session that belongs to code running within the session (e.g. Shiny or Plumber APIs)\nType: bool\nDefault: 1\n\n\nwww-verify-user-agent\nIndicates whether or not to verify connecting browser user agents to ensure they are compatible with RStudio Server.\nType: bool\nDefault: 1\n\n\nwww-same-site\nThe value of the ‘SameSite’ attribute on the cookies issued by RStudio Server. Accepted values are ‘none’ or ‘lax’. The value ‘none’ should be used only when RStudio is hosted into an iFrame. For compatibility with some browsers (i.e. Safari 12), duplicate cookies will be issued by RStudio Server when ‘none’ is used.\nType: string\nDefault: <empty string>\n\n\nwww-frame-origin\nSpecifies the allowed origin for the iFrame hosting RStudio if iFrame embedding is enabled.\nType: string\nDefault: none\n\n\nwww-enable-origin-check\nIf enabled, cause RStudio to enforce that incoming request origins are from the host domain. This can be added for additional security. See https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#verifying-origin-with-standard-headers\nType: bool\nDefault: 0\n\n\nwww-allow-origin\nSpecifies an additional origin that requests are allowed from, even if it does not match the host domain. Used if origin checking is enabled. May be specified multiple times for multiple origins.\nType: string\nDefault: <empty string>\n\n\nssl-enabled\nEnables or disables SSL.\nType: bool\nDefault: 0\n\n\nssl-certificate\nSpecifies the path to the SSL certificate for RStudio Server to use.\nType: string\nDefault: <empty string>\n\n\nssl-certificate-key\nSpecifies the path to the SSL certificate private key.\nType: string\nDefault: <empty string>\n\n\nssl-protocols\nSpecifies the list of supported SSL protocols separated by a space.\nType: string\nDefault: TLSv1 TLSv1.1 TLSv1.2\n\n\nssl-redirect-http\nIndicates whether or not HTTP requests should automatically be redirected to HTTPS.\nType: bool\nDefault: 1\n\n\nssl-hsts\nIndicates whether or not to enable Strict Transport Security when SSL is in use.\nType: bool\nDefault: 1\n\n\nssl-hsts-max-age\nSpecifies the maximum age for Strict Transport Security.\nType: int\nDefault: 86400\n\n\nssl-hsts-include-subdomains\nIndicates whether or not to include subdomains in HSTS protection.\nType: bool\nDefault: 0\n\n\n\nrsession Settings\n\nrsession-which-r\nThe path to the main R program (e.g. /usr/bin/R). This should be set if no versions are specified in /etc/rstudio/r-versions and the default R installation is not available on the system path.\nType: string\nDefault: <empty string>\n\n\nrsession-path\nThe relative path from the RStudio installation directory, or absolute path to the rsession executable.\nType: string\nDefault: rsession\n\n\nrldpath-path\nThe path to the r-ldpath script which specifies extra library paths for R versions.\nType: string\nDefault: r-ldpath\n\n\nrsession-ld-library-path\nSpecifies additional LD_LIBRARY_PATHs to use for R sessions.\nType: string\nDefault: <empty string>\n\n\nrsession-config-file\nIf set, overrides the path to the /etc/rstudio/rsession.conf configuration file. The specified path may be a relative path from the RStudio installation directory, or an absolute path.\nType: string\nDefault: <empty string>\n\n\nrsession-proxy-max-wait-secs\nThe maximum time to wait in seconds for a successful response when proxying requests to rsession.\nType: int\nDefault: 10\n\n\nrsession-exec-command\nSpecifies the wrapper command used when executing the rsession binary.\nType: string\nDefault: <empty string>\n\n\nrsession-no-profile\nIndicates whether or not to disable user profiles from executing on session start.\nType: bool\nDefault: 0\n\n\nrsession-diagnostics-enabled\nIndicates whether or not session diagnostic data should be collected. This can be used for troubleshooting issues with session starts.\nType: bool\nDefault: 0\n\n\nrsession-diagnostics-dir\nSpecifies the directory where session diagnostic data should be written.\nType: string\nDefault: /tmp\n\n\nrsession-diagnostics-strace-enabled\nIndicates whether or not strace data should be included when collecting session diagnostic data.\nType: bool\nDefault: 0\n\n\nrsession-diagnostics-libsegfault\nSpecifies the path to libSegFault.so library which is used for dumping stack trace information when session diagnostics are collected.\nType: string\nDefault: <empty string>\n\n\n\ndatabase Settings\n\ndatabase-config-file\nIf set, overrides the path to the /etc/rstudio/database.conf configuration file.\nType: string\nDefault: <empty string>\n\n\n\nauth Settings\n\nauth-none\nIf set, disables multi-user authentication. Workbench/Pro features may not work in this mode.\nType: bool\nDefault: 1 (true) if rserver was run without root privilege, otherwise 0 (false).\n\n\nauth-validate-users\nIndicates whether or not to validate that authenticated users exist on the target system. Disabling this option may cause issues to start or to run a session.\nType: bool\nDefault: 1 (true) if rserver was run with root privilege, otherwise 0 (false).\n\n\nauth-stay-signed-in-days\nThe number of days to keep a user signed in when using the “Stay Signed In” option. Will only take affect when auth-timeout-minutes is 0 (disabled).\nType: int\nDefault: 30\n\n\nauth-timeout-minutes\nThe number of minutes a user will stay logged in while idle before required to sign in again. Set this to 0 (disabled) to enable legacy timeout auth-stay-signed-in-days.\nType: int\nDefault: 60\n\n\nauth-encrypt-password\nIndicates whether or not to encrypt the password sent from the login form. For security purposes, we strongly recommend you leave this enabled.\nType: bool\nDefault: 1\n\n\nauth-login-page-html\nThe path to a file containing additional HTML customization for the login page.\nType: string\nDefault: /etc/rstudio/login.html\n\n\nauth-rdp-login-page-html\nThe path to a file containing additional HTML customization for the login page, as seen by RDP users.\nType: string\nDefault: /etc/rstudio/rdplogin.html\n\n\nauth-required-user-group\nSpecifies a group that users must be in to be able to use RStudio.\nType: string\nDefault: <empty string>\n\n\nauth-minimum-user-id\nSpecifies a minimum user id value. Users with a uid lower than this value may not use RStudio.\nType: string\nDefault: auto\n\n\nauth-pam-require-password-prompt\nIndicates whether or not to require the “Password:” prompt before sending the password via PAM. In most cases, this should be enabled. If using a custom PAM password prompt, you may need to disable this setting if PAM logins do not work correctly.\nType: bool\nDefault: 1\n\n\nauth-sign-in-throttle-seconds\nThe minimum amount of time a user must wait before attempting to sign in again after signing out.\nType: int\nDefault: 5\n\n\nauth-revocation-list-dir\nIf set, overrides the path to the directory which contains the revocation list to be used for storing expired tokens. As of RStudio Server 1.4, this has been moved to database storage, and so this setting is deprecated, but will be used to port over any existing file-based expired tokens.\nThis option is deprecated and should not be used.\nType: string\nDefault: <empty string>\n\n\nauth-cookies-force-secure\nIndicates whether or not auth cookies should be forcefully marked as secure. This should be enabled if running an SSL terminator infront of RStudio Server. Otherwise, cookies will be marked secure if SSL is configured.\nType: bool\nDefault: 0\n\n\nauth-stay-signed-in\nIndicates whether or not to allow users to stay signed in across browser sessions.\nType: bool\nDefault: 1\n\n\nauth-google-accounts\nEnables/disables authentication via Google accounts.\nType: bool\nDefault: 0\n\n\nauth-google-accounts-redirect-base-uri\nSpecifies an override URI to use instead of the redirect URI detected for Google accounts. This is needed if running behind a proxy without the X-RStudio-Request header.\nType: string\nDefault: <empty string>\n\n\nauth-openid\nEnables/disables authentication via OpenID SSO.\nType: bool\nDefault: 0\n\n\nauth-openid-base-uri\nOverrides the detected base URI for the server. This is needed if running behind a proxy without the X-RStudio-Request header.\nType: string\nDefault: <empty string>\n\n\nauth-openid-issuer\nSpecifies the HTTPS URL of the OpenID issuer and the location of ‘/.well-known/open-configuration’\nType: string\nDefault: <empty string>\n\n\nauth-openid-scopes\nSpecifies any additional space-separated scopes required by the OpenID OP to return a username claim.\nType: string\nDefault: <empty string>\n\n\nauth-openid-username-claim\nSpecifies the name of the OpenID claim used to define the username.\nType: string\nDefault: preferred_username\n\n\nauth-saml\nEnables/disables authentication via SAML SSO.\nType: bool\nDefault: 0\n\n\nauth-saml-metadata-path\nSpecifies the path to the XML SAML metadata file. Overrides the metadata URL option if present.\nType: string\nDefault: <empty string>\n\n\nauth-saml-metadata-url\nSpecifies the location of the XML SAML metadata on the Identity Provider. Requires backend connectivity.\nType: string\nDefault: <empty string>\n\n\nauth-saml-idp-entity-id\nSpecifies the entity identifier (name or URI) of the Identity Provider. Only used if no metadata is defined.\nType: string\nDefault: <empty string>\n\n\nauth-saml-idp-sso-url\nSpecifies the endpoint that will receive SSO requests on the Identity Provider. Only used if no metadata is defined.\nType: string\nDefault: <empty string>\n\n\nauth-saml-idp-sign-cert-path\nSpecifies the path to the PEM certificate file for verifying SAML signatures. Only used if no metadata is defined.\nType: string\nDefault: <empty string>\n\n\nauth-saml-idp-post-binding\nWhen enabled, uses HTTP POST for SSO. Otherwise, uses an HTTP redirect. This must match the metadata specification if metadata is defined.\nType: bool\nDefault: 0\n\n\nauth-saml-sso-initiation\nIndicates if only “idp” or “sp” can initiate a SAML SSO sequence. If not defined, both can initiate.\nType: string\nDefault: <empty string>\n\n\nauth-saml-sp-base-uri\nOverrides the detected base URI for the server. This is needed if running behind a proxy without the X-RStudio-Request header.\nType: string\nDefault: <empty string>\n\n\nauth-saml-sp-encryption-key-path\nSpecifies the path to the PEM file containing the private key for decrypting SAML responses. Also used for request signing if a signing method is defined.\nType: string\nDefault: <empty string>\n\n\nauth-saml-sp-encryption-cert-path\nSpecifies the path to the PEM certificate file for encrypting SAML responses. Also used for request signing if a signing method is defined.\nType: string\nDefault: <empty string>\n\n\nauth-saml-sp-signing-key-path\nSpecifies the path to the PEM file containing the private key for signing SAML requests. Not used if an encryption key is defined.\nType: string\nDefault: <empty string>\n\n\nauth-saml-sp-signing-cert-path\nSpecifies the path to the PEM certificate file for verifying SAML requests signature. Not used if an encryption certificate is defined.\nType: string\nDefault: <empty string>\n\n\nauth-saml-sp-request-signing-method\nIndicates whether “sha1”, “sha256”, or “sha512” is used to sign SAML requests. If not defined, the SAML requests will not be signed.\nType: string\nDefault: <empty string>\n\n\nauth-saml-sp-name-id-format\nRequests that the NameID Format be one of “unspecified”, “emailAddress”, “persistent” or “transient”. This must match the metadata specification if metadata is defined.\nType: string\nDefault: <empty string>\n\n\nauth-saml-sp-attribute-username\nSpecifies the name of the attribute in the SAML assertion used to define the username.\nType: string\nDefault: Username\n\n\nauth-proxy\nEnables/disables authentication via proxy by using a special header field.\nType: bool\nDefault: 0\n\n\nauth-proxy-sign-in-url\nSpecifies the URL of the sign in page for proxied authentication.\nType: string\nDefault: <empty string>\n\n\nauth-proxy-sign-out-url\nSpecifies the optional URL of the sign out page for proxied authentication.\nType: string\nDefault: <empty string>\n\n\nauth-proxy-sign-in-delay\nSpecifies the delay in seconds to show user sign in info when redirecting from the proxy sign in page.\nType: int\nDefault: 0\n\n\nauth-proxy-user-header\nSpecifies the name of the HTTP header that RStudio should read the proxied user identity from.\nType: string\nDefault: X-RStudio-Username\n\n\nauth-proxy-user-header-rewrite\nSpecifies the re-write rule for the auth-proxy-user-header. The format of a re-write rule is a regular expression followed by a space and then a replacement string. The replacement string can reference captured parts of the regular expression using $1, $2, etc.\nType: string\nDefault: <empty string>\n\n\nauth-pam-sessions-enabled\nEnables or disables PAM sessions when new sessions are started.\nType: bool\nDefault: Disabled if using Launcher sessions. Enabled otherwise.\n\n\nauth-pam-sessions-profile\nSpecifies the profile to use for PAM sessions.\nType: string\nDefault: su\n\n\nauth-pam-sessions-use-password\nIndicates whether or not to use passwords when creating PAM sessions. Requires storing of user passwords in memory, though we use industry best-practices for keeping the passwords secure.\nType: bool\nDefault: 0\n\n\nauth-pam-sessions-close\nIndicates whether or not to close the PAM session when the R session exits.\nType: bool\nDefault: 0\n\n\n\nmonitor Settings\n\nmonitor-interval-seconds\nThe interval in seconds at which the monitor is probed for new data.\nType: int\nDefault: 60\n\n\nmonitor-stderr-enabled\nIndicates whether or not to log metrics to stderr.\nType: bool\nDefault: 0\n\n\nmonitor-rrd-enabled\nIndicates whether or not to enable logging of metrics to RRD.\nType: bool\nDefault: 1\n\n\nmonitor-data-path\nSpecifies the path where monitor logs and RRD databases should be written.\nType: string\nDefault: /var/lib/rstudio-server/monitor\n\n\nmonitor-rstudio-session-metrics\nIndicates whether or not to collect metrics about session utilization per user.\nType: bool\nDefault: 1\n\n\nmonitor-rrd-rrdtool-binary\nSpecifies the path to the rrdtool binary.\nType: string\nDefault: /usr/bin/rrdtool\n\n\nmonitor-graphite-enabled\nEnables/disables logging of metrics to graphite.\nType: bool\nDefault: 0\n\n\nmonitor-graphite-host\nSpecifies the host to send graphite metrics to.\nType: string\nDefault: 127.0.0.1\n\n\nmonitor-graphite-port\nSpecifies the port to send graphite metrics to.\nType: int\nDefault: 2003\n\n\nmonitor-graphite-client-id\nSpecifies the optional client id to include along with graphite metrics.\nType: string\nDefault: <empty string>\n\n\naudit-data-path\nSpecifies the path to where audit data should be stored.\nType: string\nDefault: /var/lib/rstudio-server/audit\n\n\naudit-r-console\nSpecifies the level of console activity that should be audited (none, input, or all).\nType: string\nDefault: none\n\n\naudit-r-console-user-limit-months\nSpecifies the number of months of user console data to retain within the audit directory.\nType: int\nDefault: 0\n\n\naudit-r-console-user-limit-mb\nSpecifies the limit in megabytes on user console actions to retain in the audit log.\nType: int\nDefault: 50\n\n\naudit-r-console-compress\nIndicates whether or not to compress console audit logs using gzip compression.\nType: bool\nDefault: 0\n\n\naudit-r-console-format\nSpecifies the format to use for the console audit log (csv or json).\nType: string\nDefault: csv\n\n\naudit-r-sessions\nIndicates whether or not to audit R session activity.\nType: bool\nDefault: Enabled if using named user licensing. Disabled otherwise.\n\n\naudit-r-sessions-limit-months\nSpecifies the number of months of session action data to retain within the audit directory.\nType: int\nDefault: 13\n\n\naudit-r-sessions-limit-mb\nSpecifies the limit in megabytes on session actions to retain in the audit log.\nType: int\nDefault: 1024\n\n\naudit-r-sessions-format\nSpecifies the format to use for the session audit log (csv or json).\nType: string\nDefault: csv\n\n\nserver-shared-storage-path\nSpecifies the path to the shared storage directory.\nType: string\nDefault: /var/lib/rstudio-server/shared-storage"
  },
  {
    "href": "statistics.html#which-genes-should-we-remove",
    "title": "Impact of treatment on abundance of corn and Miscanthus Gigantus",
    "section": "Which genes should we remove?",
    "text": "Since we’re interested in what makes the samples different, we’ll start by removing non-informative genes from our samples. For this first pass, we’ll say that a gene is non-informative if it isn’t present in the majority of samples across both treatments. We’ll start by getting the number of non-detects for each gene in each sample group:\n\nnon_detect_counts <- data.raw.long %>%\n  group_by(fert_level, amoA) %>% \n  count(CT == 40) %>% \n  rename(non_detect = `CT == 40`) %>%\n  filter(non_detect == TRUE)\n\nhead(non_detect_counts)\n\n# A tibble: 6 x 4\n# Groups:   fert_level, amoA [6]\n  fert_level amoA     non_detect     n\n       <int> <chr>    <lgl>      <int>\n1          0 amoA.001 TRUE          38\n2          0 amoA.002 TRUE          39\n3          0 amoA.003 TRUE          26\n4          0 amoA.004 TRUE          45\n5          0 amoA.005 TRUE           8\n6          0 amoA.006 TRUE          36\n\n\nWe can use non_detect_counts to get the number of non-detects from each gene. For example:\n\nnon_detect_counts %>% \n  filter(amoA == \"amoA.001\")\n\n# A tibble: 2 x 4\n# Groups:   fert_level, amoA [2]\n  fert_level amoA     non_detect     n\n       <int> <chr>    <lgl>      <int>\n1          0 amoA.001 TRUE          38\n2        336 amoA.001 TRUE           9\n\n\nThis tells us that amoA.001 was not detected in 38 of the non-fertilized samples and in 9 of the fertilized samples.\nFrom here, we’ll remove genes that were not detected in at least 30 samples in both the fertilized and non-fertilized samples. This cutoff is chosen arbitrarily.\n\nremoves <- non_detect_counts %>% \n  pivot_wider(names_from = fert_level, values_from = n, names_prefix = \"fert.\") %>%\n  filter(fert.0 > 30 & fert.336 > 30) %>%\n  pivot_longer(cols = fert.0:fert.336, names_to = \"fert_level\", values_to = \"n\")\n\nremoves %>% \n  distinct(amoA)\n\n# A tibble: 17 x 1\n# Groups:   amoA [17]\n   amoA    \n   <chr>   \n 1 amoA.006\n 2 amoA.021\n 3 amoA.028\n 4 amoA.030\n 5 amoA.038\n 6 amoA.040\n 7 amoA.048\n 8 amoA.050\n 9 amoA.053\n10 amoA.064\n11 amoA.069\n12 amoA.071\n13 amoA.073\n14 amoA.075\n15 amoA.076\n16 amoA.077\n17 amoA.078\n\n\nSo we see that we’re removing 17 genes. We’ll keep it in a long format so we can visualize them with ggplot:\n\nremoves %>% \n  mutate(amoA = str_sub(amoA, -3)) %>% \n  mutate(favored = case_when(\n    amoA %in% c(\"006\", \"038\", \"064\", \"069\", \"071\") ~ \"Nothing\",\n    amoA %in% c(\"021\", \"028\", \"030\", \"048\", \"073\", \"075\", \"076\", \"077\", \"078\") ~ \"Non-fertilized\",\n    amoA %in% c(\"040\", \"050\", \"053\") ~ \"Fourth quadrant\",\n    TRUE ~ \"First quadrant\"\n  )) %>% \n  mutate(fert_level = str_sub(fert_level, start = 6)) %>% \n  ggplot(aes(amoA, n, fill = favored )) +\n  geom_col() +\n  facet_wrap(~ fert_level) + \n  theme(\n    plot.title = element_text(hjust = 0.5),\n    legend.text = element_markdown(size = 12),\n    legend.title = element_markdown(size = 12, hjust = 0),\n    strip.background = element_rect(size = 1, color = \"black\", fill = \"NA\"),\n    panel.grid = element_line(color = \"gray95\"),\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor.y = element_blank(),\n    panel.grid.minor.x = element_blank(),\n    panel.border = element_rect(color = \"black\", size = 1, fill = NA)\n  ) +\n  scale_fill_viridis_d(begin = 0, end = 0.5) +\n  scale_y_continuous(limits = c(0, 50), expand = expansion(add = c(0, 0))) +\n  scale_x_discrete(limits = rev) + \n  coord_flip() + \n  labs(\n    y = \"Number of samples with > 30 non-detects\",\n    title = \"Fertilizer level\",\n    fill = \"Favored by...\"\n  )\n\n\n\n\nFinally, let’s remove those non-informative genes from the dataset before doing our statistics.\n\ndata.priming.reduced <- data.priming %>% \n  select(-one_of(removes$amoA))"
  },
  {
    "href": "statistics.html#do-treatments-have-a-significant-effect-on-community-composition",
    "title": "Impact of treatment on abundance of corn and Miscanthus Gigantus",
    "section": "Do treatments have a significant effect on community composition?",
    "text": "X <- data.priming.reduced %>% \n  select(-c(amoA.001:amoA.074))\nY <- data.priming.reduced %>% \n  select(amoA.001:amoA.074)\n\nadonis(Y ~ X$fert_level + X$addition + X$crop + X$timepoint) \n\n\nCall:\nadonis(formula = Y ~ X$fert_level + X$addition + X$crop + X$timepoint) \n\nPermutation: free\nNumber of permutations: 999\n\nTerms added sequentially (first to last)\n\n             Df SumsOfSqs MeanSqs F.Model      R2 Pr(>F)    \nX$fert_level  1    1.4426 1.44255  56.092 0.37093  0.001 ***\nX$addition    2    0.0327 0.01633   0.635 0.00840  0.679    \nX$crop        1    0.0882 0.08823   3.431 0.02269  0.030 *  \nX$timepoint   1    0.0367 0.03671   1.427 0.00944  0.189    \nResiduals    89    2.2889 0.02572         0.58855           \nTotal        94    3.8890                 1.00000           \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nLooks like fertilization level (and to a lesser extent, crop) significantly impacts community composition."
  },
  {
    "href": "statistics.html#gene-wise-anova",
    "title": "Impact of treatment on abundance of corn and Miscanthus Gigantus",
    "section": "Gene-wise anova",
    "text": "First pivot dataset to long format:\n\ndata.priming.reduced.long <- data.priming.reduced %>% \n  select(-sample_id, field_rep) %>% \n  pivot_longer(cols = amoA.001:amoA.074) \n\nCreate an ANOVA formula for each gene against all the factors. Borrowed heavily from Kevin Blighe on this BioStars post:\n\nformulae <- lapply(colnames(data.priming.reduced %>% select(amoA.001:amoA.074)), function(x) as.formula(paste0(x, \" ~ fert_level * crop * timepoint * addition\")))\n\nres <- lapply(formulae, function(x) broom::tidy(aov(x, data = data.priming.reduced)))\nnames(res) <- format(formulae)\nnames(res) <- str_sub(names(res), end = 8)\n\nanova_results <- lapply(seq_along(res), function(i) res[[i]] %>% mutate(gene = names(res)[[i]])) %>% \n  bind_rows() %>% \n  filter(term != \"Residuals\")\n\nWe can then visualize the anova results in a heatmap. Here, each column represents a gene, the rows represent the factors being tested by the ANOVA, and the colors indicate the significance of the ANOVA test.\n\nanova_results %>% \n  mutate(sig = case_when(\n    p.value < 0.05 & p.value > 0.01 ~ \"*\",\n    p.value < 0.01 & p.value > 0.001 ~ \"**\",\n    p.value < 0.001 ~ \"***\",\n    TRUE ~ \"NS\"\n  )) %>% \n  mutate(gene = str_sub(gene, -3)) %>% \n  ggplot(aes(gene, term, fill = sig)) + \n  geom_tile(color = \"black\") + \n  coord_equal() + \n  labs(y = \"\",\n       x = \"amoA\",\n       title = \"Summary of ANOVA results\",\n       fill = \"Significance \") + \n  theme(\n    plot.title = element_text(hjust = 0.5),\n    axis.text.x = element_text(angle = 90, hjust = 0, vjust = 0.5)\n  ) + \n  scale_fill_viridis_d(option = \"magma\", direction = -1)"
  },
  {
    "href": "session_user_settings/session_user_settings.html",
    "title": "Session User Settings",
    "section": "",
    "text": "The following table enumerates the settings supported in the user (or system) rstudio-prefs.json file, along with their type, allowable values, and defaults.\n\n\n\n\n\n\n\n\n\n\nProperty\nDescription\nType\nDefault\n\n\n\n\nallow_source_columns\nWhether to enable the ability to add source columns to display.\nboolean\nTRUE\n\n\nalways_enable_rnw_concordance\nWhether to always enable the concordance for RNW files.\nboolean\nTRUE\n\n\nalways_save_history\nWhether to always save the R console history.\nboolean\nTRUE\n\n\nalways_shown_extensions\nList of file extensions (beginning with ., not case sensitive) that are always shown in the Files Pane, regardless of whether hidden files are shown\narray\n.circleci, .gitattributes, .github, .gitignore, .httr-oauth, .r, .rbuildignore, .rdata, .renvignore, .renviron, .rhistory, .rprofile, .ruserdata\n\n\nalways_shown_files\nList of file names (case sensitive) that are always shown in the Files Pane, regardless of whether hidden files are shown\narray\n.build.yml, .gitlab-ci.yml, .travis.yml\n\n\nansi_console_mode\nHow to treat ANSI escape codes in the console.\nstring (off, on, strip)\non\n\n\nauto_append_newline\nWhether to ensure that source files end with a newline character.\nboolean\nFALSE\n\n\nauto_detect_indentation\nWhether to automatically detect indentation settings from file contents.\nboolean\nFALSE\n\n\nauto_discover_package_dependencies\nWhether to automatically discover and offer to install missing R package dependencies.\nboolean\nTRUE\n\n\nauto_expand_error_tracebacks\nWhether to automatically expand tracebacks when an error occurs.\nboolean\nFALSE\n\n\nauto_run_setup_chunk\nWhether to automatically run an R Markdown document’s Setup chunk before running other chunks.\nboolean\nTRUE\n\n\nauto_save_idle_ms\nThe idle period, in milliseconds, after which documents should be auto-saved.\ninteger\n1000\n\n\nauto_save_on_blur\nWhether to automatically save when the editor loses focus.\nboolean\nFALSE\n\n\nauto_save_on_idle\nHow to deal with changes to documents on idle.\nstring (commit, backup, none)\nbackup\n\n\nbackground_diagnostics\nWhether to run code diagnostics in the background, as you type.\nboolean\nTRUE\n\n\nbackground_diagnostics_delay_ms\nThe number of milliseconds to delay before running code diagnostics in the background.\ninteger\n2000\n\n\nbioconductor_mirror_name\nThe name of the default Bioconductor mirror.\nstring\nSeattle (USA)\n\n\nbioconductor_mirror_url\nThe URL of the default Bioconductor mirror.\nstring\nhttp://www.bioconductor.org\n\n\nblinking_cursor\nWhether to flash the cursor off and on.\nboolean\nTRUE\n\n\nbrowser_fixed_width_fonts\nList of fixed-width fonts to check for browser support.\narray\nAndale Mono, Bitstream Vera Sans Mono, Cascadia Code, Consolas, Courier New, Courier, DejaVu Sans Mono, Droid Sans Mono, Fira Code, Hack, IBM Plex Mono, Inconsolata, JetBrains Mono, Lucida Console, Lucida Sans Typewriter, Menlo, Monaco, Monoid, Operator Mono, Pragmata, SF Mono, Source Code Pro, Vera Sans Mono, Victor Mono, Ubuntu Mono\n\n\nbusy_detection\nHow to detect busy status in the Terminal.\nstring (always, never, whitelist)\nalways\n\n\nbusy_whitelist\nA whitelist of apps that should not be considered busy in the Terminal.\narray\ntmux, screen\n\n\ncheck_arguments_to_r_function_calls\nWhether to check arguments to R function calls.\nboolean\nFALSE\n\n\ncheck_for_updates\nWhether to check for new versions of RStudio when RStudio starts.\nboolean\nTRUE\n\n\ncheck_unexpected_assignment_in_function_call\nWhether to check for unexpected variable assignments inside R function calls.\nboolean\nFALSE\n\n\nclang_verbose\nThe verbosity level to use with Clang (0 - 2)\ninteger\n0\n\n\nclean_texi2dvi_output\nWhether to clean output after running Texi2Dvi.\nboolean\nTRUE\n\n\ncleanup_after_r_cmd_check\nWhether to clean up temporary files after running R CMD CHECK.\nboolean\nTRUE\n\n\ncode_completion\nWhen to use auto-completion for R code in the RStudio code editor.\nstring (always, never, triggered, manual)\nalways\n\n\ncode_completion_characters\nThe number of characters in a symbol that can be entered before completions are offered.\ninteger\n3\n\n\ncode_completion_delay\nThe number of milliseconds to wait before offering code suggestions.\ninteger\n250\n\n\ncode_completion_other\nWhen to use auto-completion for other languages (such as JavaScript and SQL) in the RStudio code editor.\nstring (always, triggered, manual)\nalways\n\n\ncommand_palette_mru\nWhether to keep track of recently used commands in the Command Palette\nboolean\nTRUE\n\n\nconsole_code_completion\nWhether to always use code completion in the R console.\nboolean\nTRUE\n\n\nconsole_double_click_select\nWhether double-clicking should select a word in the Console pane.\nboolean\nFALSE\n\n\nconsole_line_length_limit\nThe maximum number of characters to display in a single line in the R console.\ninteger\n1000\n\n\nconsole_max_lines\nThe maximum number of console actions to store and display in the console scrollback buffer.\ninteger\n1000\n\n\ncontinue_comments_on_newline\nWhether continue comments (by inserting the comment character) after adding a new line.\nboolean\nFALSE\n\n\ncran_mirror\nThe CRAN mirror to use.\nobject\n\n\n\ncustom_shell_command\nThe fully qualified path to the custom shell command to use in the Terminal tab.\nstring\n\n\n\ncustom_shell_options\nThe command-line options to pass to the custom shell command.\nstring\n\n\n\ndata_viewer_max_columns\nThe maximum number of columns to show at once in the data viewer.\ninteger\n50\n\n\ndefault_encoding\nThe default character encoding to use when saving files.\nstring\n\n\n\ndefault_latex_program\nThe default program to use when processing LaTeX documents.\nstring\npdfLaTeX\n\n\ndefault_project_location\nThe directory path under which to place new projects by default.\nstring\n\n\n\ndefault_r_version\nThe R version to use by default.\nobject\n\n\n\ndefault_sweave_engine\nThe default engine to use when processing Sweave documents.\nstring\nSweave\n\n\ndiagnostics_in_r_function_calls\nWhether to run diagnostics in R function calls.\nboolean\nTRUE\n\n\ndiagnostics_on_save\nWhether to check code for problems after saving it.\nboolean\nTRUE\n\n\ndisabled_aria_live_announcements\nList of aria-live announcements to disable.\narray\nEmpty\n\n\ndoc_outline_show\nWhich objects to show in the document outline pane.\nstring (sections_only, sections_and_chunks, all)\nsections_only\n\n\ndocument_author\nThe default name to use as the document author when creating new documents.\nstring\n\n\n\ndocument_load_lint_delay\nThe number of milliseconds to wait before linting a document after it is loaded.\ninteger\n5000\n\n\neditor_keybindings\nThe keybindings to use in the RStudio code editor.\nstring (default, vim, emacs, sublime)\ndefault\n\n\neditor_theme\nThe name of the color theme to apply to the text editor in RStudio.\nstring\nTextmate (default)\n\n\nemoji_skintone\nPreferred emoji skintone\nstring ((None), (Default), Light, Medium-Light, Medium, Medium-Dark, Dark)\n(None)\n\n\nenable_screen_reader\nSupport accessibility aids such as screen readers (RStudio Server).\nboolean\nFALSE\n\n\nenable_snippets\nWhether to enable code snippets in the RStudio code editor.\nboolean\nTRUE\n\n\nenable_text_drag\nWhether to enable moving text on the editing surface by clicking and dragging it.\nboolean\nTRUE\n\n\nexecution_behavior\nThe unit of R code to execute when the Execute command is invoked.\nstring (line, statement, paragraph)\nstatement\n\n\nfile_monitor_ignored_components\nList of path components; file monitor will ignore paths containing one or more of these components.\narray\nEmpty\n\n\nfind_panel_legacy_tab_sequence\nIn source editor find panel, tab key moves focus directly from find text to replace text.\nboolean\nFALSE\n\n\nfocus_console_after_exec\nWhether to focus the R console after executing an R command from a script.\nboolean\nFALSE\n\n\nfold_style\nThe style of folding to use.\nstring (begin-only, begin-and-end)\nbegin-and-end\n\n\nfont_size_points\nThe default editor font size, in points.\nnumber\n10\n\n\nfull_project_path_in_window_title\nWhether to show the full path to project in desktop window title.\nboolean\nFALSE\n\n\ngit_diff_ignore_whitespace\nWhether to ignore whitespace when generating diffs of version controlled files.\nboolean\nFALSE\n\n\ngit_exe_path\nThe path to the Git executable to use.\nstring\n\n\n\nglobal_theme\nThe theme to use for the main RStudio user interface.\nstring (classic, default, alternate)\ndefault\n\n\ngraphics_antialiasing\nType of anti-aliasing to be used for generated R plots.\nstring (default, none, gray, subpixel)\ndefault\n\n\ngraphics_backend\nR graphics backend.\nstring (default, cairo, cairo-png, quartz, windows, ragg)\ndefault\n\n\nhandle_errors_in_user_code_only\nWhether to handle errors only when user code is on the stack.\nboolean\nTRUE\n\n\nhelp_font_size_points\nThe help panel font size, in points.\nnumber\n10\n\n\nhide_console_on_chunk_execute\nWhether to hide the R console when executing inline R Markdown chunks.\nboolean\nTRUE\n\n\nhide_object_files\nWhether to hide object files in the Files pane.\nboolean\nTRUE\n\n\nhighlight_code_chunks\nWhether to highlight code chunks in R Markdown documents with a different background color.\nboolean\nTRUE\n\n\nhighlight_console_errors\nWhether to display error, warning, and message output in a different color.\nboolean\nTRUE\n\n\nhighlight_r_function_calls\nWhether to highlight R function calls in the code editor.\nboolean\nFALSE\n\n\nhighlight_selected_line\nHighlight the selected line in RStudio’s code editor.\nboolean\nFALSE\n\n\nhighlight_selected_word\nHighlight the selected word in RStudio’s code editor.\nboolean\nTRUE\n\n\nhighlight_web_link\nWhether web links in comments are clickable.\nboolean\nTRUE\n\n\nignore_uppercase_words\nWhether to ignore words in uppercase when spell checking.\nboolean\nTRUE\n\n\nignore_words_with_numbers\nWhether to ignore words with numbers in them when spell checking.\nboolean\nTRUE\n\n\ninitial_working_directory\nThe initial working directory for new R sessions.\nstring\n\n\n\ninsert_matching\nWhether to insert matching pairs, such as () and [], when the first is typed.\nboolean\nTRUE\n\n\ninsert_native_pipe_operator\nWhether the Insert Pipe Operator command should insert the native R pipe operator, |>\nboolean\nFALSE\n\n\ninsert_numbered_latex_sections\nWhether to insert numbered sections in LaTeX.\nboolean\nFALSE\n\n\ninsert_parens_after_function_completion\nWhether to insert parentheses after function completions.\nboolean\nTRUE\n\n\ninsert_spaces_around_equals\nWhether to insert spaces around the equals sign in R code.\nboolean\nTRUE\n\n\ninstall_pkg_deps_individually\nWhether to install R package dependencies one at a time.\nboolean\nTRUE\n\n\njobs_tab_visibility\nThe visibility of the Jobs tab.\nstring (closed, shown, default)\ndefault\n\n\nknit_working_dir\nThe working directory to use when knitting R Markdown documents.\nstring (default, current, project)\ndefault\n\n\nlatex_preview_on_cursor_idle\nWhen to preview LaTeX mathematical equations when cursor has not moved recently.\nstring (never, inline_only, always)\nalways\n\n\nlatex_shell_escape\nWhether to enable shell escaping with LaTeX documents.\nboolean\nFALSE\n\n\nlauncher_jobs_sort\nHow to sort jobs in the Launcher tab in RStudio Pro and RStudio Workbench.\nstring (recorded, state)\nrecorded\n\n\nlimit_visible_console\nWhether to only show a limited window of the total console output\nboolean\nFALSE\n\n\nline_ending_conversion\nThe line ending format to use when saving files.\nstring (default, windows, posix, native, passthrough)\nnative\n\n\nload_workspace\nWhether to load the workspace when the R session begins.\nboolean\nTRUE\n\n\nmargin_column\nThe number of columns of text after which the margin is shown.\ninteger\n80\n\n\nmemory_query_interval_seconds\nHow many seconds to wait between automatic requeries of memory statistics (0 to disable)\ninteger\n10\n\n\nnavigate_to_build_error\nWhether to navigate to build errors.\nboolean\nTRUE\n\n\nnew_proj_git_init\nWhether a git repo should be initialized inside new projects by default.\nboolean\nFALSE\n\n\nnew_project_git_init\nWhether to initialize new projects with a Git repo by default.\nboolean\nFALSE\n\n\nnum_spaces_for_tab\nThe number of spaces to insert when pressing the Tab key.\ninteger\n2\n\n\npackages_pane_enabled\nWhether to enable RStudio’s Packages pane.\nboolean\nTRUE\n\n\npanes\nLayout of panes in the RStudio workbench.\nobject\n\n\n\npdf_previewer\nThe program to use to preview PDF files after generation.\nstring (none, default, rstudio, desktop-synctex, system)\ndefault\n\n\nplumber_viewer_type\nWhere to display Shiny applications when they are run.\nstring (user, none, pane, window, browser)\nwindow\n\n\nposix_terminal_shell\nThe terminal shell to use on POSIX operating systems (MacOS and Linux).\nstring (default, bash, zsh, custom, none)\ndefault\n\n\nproject_safe_startup_seconds\nThe number of seconds after which a project is deemed to have successfully started.\ninteger\n30\n\n\npublish_ca_bundle\nThe path to the custom certificate authority (CA) bundle to use when publishing content.\nstring\n\n\n\npublish_check_certificates\nWhether to check remote server SSL certificates when publishing content.\nboolean\nTRUE\n\n\npython_path\nThe path to the default Python interpreter.\nstring\n\n\n\npython_type\nThe Python type.\nstring\n\n\n\npython_version\nThe Python version.\nstring\n\n\n\nrainbow_parentheses\nWhether to highlight parentheses in a variety of colors.\nboolean\nFALSE\n\n\nreal_time_spellchecking\nWhether to enable real-time spellchecking by default.\nboolean\nTRUE\n\n\nreduced_motion\nReduce use of animations in the user interface.\nboolean\nFALSE\n\n\nreindent_on_paste\nWhether to automatically re-indent code when it’s pasted into RStudio.\nboolean\nTRUE\n\n\nremove_history_duplicates\nWhether to remove duplicate entries from the R console history.\nboolean\nFALSE\n\n\nrestore_last_project\nWhether to restore the last project when starting RStudio.\nboolean\nTRUE\n\n\nrestore_project_r_version\nWhether to restore the last version of R used by the project in RStudio Pro and RStudio Workbench.\nboolean\nTRUE\n\n\nrestore_source_document_cursor_position\nWhether to save the position of the cursor when a file is closed, restore it when the file is opened.\nboolean\nTRUE\n\n\nrestore_source_documents\nWhether to restore the last opened source documents when RStudio starts up.\nboolean\nTRUE\n\n\nreuse_sessions_for_project_links\nWhether to reuse sessions when opening projects in RStudio Workbench.\nboolean\nFALSE\n\n\nrmd_chunk_output_inline\nWhether to show chunk output inline for ordinary R Markdown documents.\nboolean\nTRUE\n\n\nrmd_preferred_template_path\nThe path to the preferred R Markdown template.\nstring\n\n\n\nrmd_viewer_type\nWhere to display R Markdown documents when they have completed rendering.\nstring (window, pane, none)\nwindow\n\n\nroot_document\nThe root document to use when compiling PDF documents.\nstring\n\n\n\nrsa_key_path\nThe path to the RSA key file to use.\nstring\n\n\n\nrun_rprofile_on_resume\nWhether to run .Rprofile again after resuming a suspended R session.\nboolean\nFALSE\n\n\nsave_before_sourcing\nWhether to automatically save scripts before executing them.\nboolean\nTRUE\n\n\nsave_files_before_build\nWhether to save all open, unsaved files before building the project.\nboolean\nFALSE\n\n\nsave_retry_timeout\nThe maximum amount of seconds of retry for save operations.\ninteger\n15\n\n\nsave_workspace\nWhether to save the workspace to an .Rdata file after the R session ends.\nstring (always, never, ask)\nask\n\n\nscreenreader_console_announce_limit\nMaximum number of lines of console output announced after a command.\ninteger\n25\n\n\nscroll_past_end_of_document\nWhether to allow scrolling past the end of a file.\nboolean\nFALSE\n\n\nserver_editor_font\nThe name of the fixed-width editor font to use with RStudio Server.\nstring\n\n\n\nserver_editor_font_enabled\nWhether to use a custom editor font in RStudio Server.\nboolean\nFALSE\n\n\nsession_protocol_debug\nEnable session protocol debug logging showing all session requests and events\nboolean\nFALSE\n\n\nshiny_background_jobs\nWhether to run Shiny applications as background jobs.\nboolean\nFALSE\n\n\nshiny_viewer_type\nWhere to display Shiny applications when they are run.\nstring (user, none, pane, window, browser)\nwindow\n\n\nshow_diagnostics_cpp\nWhether to show diagnostic messages for C++ code as you type.\nboolean\nTRUE\n\n\nshow_diagnostics_other\nWhether to show diagnostic messages for other types of code (not R or C++).\nboolean\nFALSE\n\n\nshow_diagnostics_r\nWhether to show diagnostic messages (such as syntax and usage errors) for R code as you type.\nboolean\nTRUE\n\n\nshow_doc_outline_rmd\nWhether to show the document outline by default when opening R Markdown documents.\nboolean\nFALSE\n\n\nshow_focus_rectangles\nControl with keyboard focus displays a visual focus indicator.\nboolean\nTRUE\n\n\nshow_function_signature_tooltips\nWhether to show function signature tooltips during autocompletion.\nboolean\nTRUE\n\n\nshow_help_tooltip_on_idle\nWhether to show help tooltips for functions when the cursor has not been recently moved.\nboolean\nFALSE\n\n\nshow_hidden_files\nWhether to show hidden files in the Files pane.\nboolean\nFALSE\n\n\nshow_indent_guides\nWhether to show indentation guides in the RStudio code editor.\nboolean\nFALSE\n\n\nshow_inline_toolbar_for_r_code_chunks\nWhether to show a toolbar on code chunks in R Markdown documents.\nboolean\nTRUE\n\n\nshow_internal_functions\nWhether to show functions without source references in the Traceback pane while debugging.\nboolean\nFALSE\n\n\nshow_invisibles\nWhether to show invisible characters, such as spaces and tabs, in the RStudio code editor.\nboolean\nFALSE\n\n\nshow_last_dot_value\nShow the result of the last expression (.Last.value) in the Environment pane.\nboolean\nFALSE\n\n\nshow_launcher_jobs_tab\nWhether to show the Launcher jobs tab in RStudio Pro and RStudio Workbench.\nboolean\nTRUE\n\n\nshow_line_numbers\nShow line numbers in RStudio’s code editor.\nboolean\nTRUE\n\n\nshow_margin\nWhether to show the margin guide in the RStudio code editor.\nboolean\nTRUE\n\n\nshow_memory_usage\nWhether to compute and show memory usage in the Environment Pane\nboolean\nTRUE\n\n\nshow_panel_focus_rectangle\nShow which panel contains keyboard focus.\nboolean\nFALSE\n\n\nshow_publish_diagnostics\nWhether to show verbose diagnostic information when publishing content.\nboolean\nFALSE\n\n\nshow_rmd_render_command\nWhether to print the render command use to knit R Markdown documents in the R Markdown tab.\nboolean\nFALSE\n\n\nshow_terminal_tab\nWhether to show the Terminal tab.\nboolean\nTRUE\n\n\nshow_user_home_page\nWhen to show the server home page in RStudio Workbench.\nstring (always, never, sessions)\nsessions\n\n\nsoft_wrap_r_files\nWhether to soft-wrap R source files, wrapping the text for display without inserting newline characters.\nboolean\nFALSE\n\n\nsoft_wrap_rmd_files\nWhether to soft-wrap R Markdown files (and similar types such as R HTML and R Notebooks)\nboolean\nTRUE\n\n\nsort_file_names_naturally\nWhether to sort file names naturally, so that e.g., file10.R comes after file9.R\nboolean\nTRUE\n\n\nsource_with_echo\nWhether to echo R code when sourcing it.\nboolean\nFALSE\n\n\nspelling_custom_dictionaries\nThe list of custom dictionaries to use when spell checking.\narray\nEmpty\n\n\nspelling_dictionary_language\nThe language of the spelling dictionary to use for spell checking.\nstring\nen_US\n\n\nstrip_trailing_whitespace\nWhether to strip trailing whitespace from each line when saving.\nboolean\nFALSE\n\n\nstyle_diagnostics\nWhether to show style diagnostics (suggestions for improving R code style)\nboolean\nFALSE\n\n\nsubmit_crash_reports\nWhether to automatically submit crash reports to RStudio.\nboolean\nTRUE\n\n\nsurround_selection\nWhich kinds of delimiters can be used to surround the current selection.\nstring (never, quotes, quotes_and_brackets)\nquotes_and_brackets\n\n\nsvn_exe_path\nThe path to the Subversion executable to use.\nstring\n\n\n\nsync_files_pane_working_dir\nWhether to change the directory in the Files pane automatically when the working directory in R changes.\nboolean\nFALSE\n\n\nsyntax_color_console\nWhether to use syntax highlighting in the R console.\nboolean\nFALSE\n\n\ntab_completion\nWhether to attempt completion of statements when pressing Tab.\nboolean\nTRUE\n\n\ntab_key_move_focus\nTab key moves focus out of text editing controls instead of inserting tabs.\nboolean\nFALSE\n\n\ntab_multiline_completion\nWhether to attempt completion of multiple-line statements when pressing Tab.\nboolean\nFALSE\n\n\nterminal_bell_style\nTerminal bell style\nstring (none, sound)\nsound\n\n\nterminal_close_behavior\nWhether to close the terminal pane after the shell exits.\nstring (always, clean, never)\nalways\n\n\nterminal_initial_directory\nInitial directory for new terminals.\nstring (project, current, home)\nproject\n\n\nterminal_local_echo\nWhether to use local echo in the Terminal.\nboolean\nTRUE\n\n\nterminal_path\nThe path to the terminal executable to use.\nstring\n\n\n\nterminal_python_integration\nEnable Python terminal hooks. When enabled, the RStudio-configured version of Python will be placed on the PATH.\nboolean\nTRUE\n\n\nterminal_renderer\nTerminal rendering engine: canvas is faster, dom may be needed for some browsers or graphics cards\nstring (canvas, dom)\ncanvas\n\n\nterminal_track_environment\nWhether to track and save changes to system environment variables in the Terminal.\nboolean\nTRUE\n\n\nterminal_weblinks\nWhether web links displayed in the Terminal tab are made clickable.\nboolean\nTRUE\n\n\nterminal_websockets\nWhether to use websockets to communicate with the shell in the Terminal tab.\nboolean\nTRUE\n\n\ntoolbar_visible\nWhether to show the toolbar at the top of the RStudio workbench.\nboolean\nTRUE\n\n\ntyping_status_delay_ms\nNumber of milliseconds to wait after last keystroke before updating live region.\ninteger\n2000\n\n\nuse_dataimport\nWhether to use RStudio’s data import feature.\nboolean\nTRUE\n\n\nuse_devtools\nWhether to use the devtools R package.\nboolean\nTRUE\n\n\nuse_internet2\nWhether to use Internet2 for networking on R for Windows.\nboolean\nTRUE\n\n\nuse_newlines_in_makefiles\nWhether to use newlines when saving Makefiles.\nboolean\nTRUE\n\n\nuse_publish_ca_bundle\nWhether to use a custom certificate authority (CA) bundle when publishing content.\nboolean\nFALSE\n\n\nuse_rcpp_template\nWhether to use RCPP templates.\nboolean\nTRUE\n\n\nuse_roxygen\nWhether to use Roxygen for documentation.\nboolean\nFALSE\n\n\nuse_secure_download\nWhether to use secure downloads when fetching R packages.\nboolean\nTRUE\n\n\nuse_spaces_for_tab\nWhether to insert spaces when pressing the Tab key.\nboolean\nTRUE\n\n\nuse_tinytex\nUse tinytex to compile .tex files.\nboolean\nFALSE\n\n\nvcs_autorefresh\nAutomatically refresh VCS status?\nboolean\nTRUE\n\n\nvcs_enabled\nWhether to enable RStudio’s version control system interface.\nboolean\nTRUE\n\n\nvertically_align_arguments_indent\nWhether to vertically align arguments to R function calls during automatic indentation.\nboolean\nTRUE\n\n\nview_dir_after_r_cmd_check\nWhether to view the directory after running R CMD CHECK.\nboolean\nFALSE\n\n\nvisual_markdown_code_editor\nThe name of the editor to use to provide code editing in visual mode\nstring (ace, codemirror)\nace\n\n\nvisual_markdown_editing_canonical\nWhether to write canonical visual mode markdown when saving from source mode.\nboolean\nFALSE\n\n\nvisual_markdown_editing_font_size_points\nThe default visual editing mode font size, in points\ninteger\n0\n\n\nvisual_markdown_editing_is_default\nWhether to enable visual editing by default for new markdown documents\nboolean\nFALSE\n\n\nvisual_markdown_editing_list_spacing\nDefault spacing for lists created in the visual editor\nstring (tight, spaced)\nspaced\n\n\nvisual_markdown_editing_max_content_width\nMaximum content width for visual editing mode, in pixels\ninteger\n700\n\n\nvisual_markdown_editing_references_location\nPlacement of footnotes within markdown output.\nstring (block, section, document)\nblock\n\n\nvisual_markdown_editing_show_doc_outline\nWhether to show the document outline by default when opening R Markdown documents in visual mode.\nboolean\nTRUE\n\n\nvisual_markdown_editing_show_margin\nWhether to show the margin guide in the visual mode code blocks.\nboolean\nFALSE\n\n\nvisual_markdown_editing_wrap\nWhether to automatically wrap text when writing markdown\nstring (none, column, sentence)\nnone\n\n\nvisual_markdown_editing_wrap_at_column\nThe column to wrap text at when writing markdown\ninteger\n72\n\n\nwarn_if_no_such_variable_in_scope\nWhether to generate a warning if a variable is used without being defined in the current scope.\nboolean\nFALSE\n\n\nwarn_variable_defined_but_not_used\nWhether to generate a warning if a variable is defined without being used in the current scope\nboolean\nFALSE\n\n\nwindows_terminal_shell\nThe terminal shell to use on Windows.\nstring (default, win-git-bash, win-wsl-bash, win-cmd, win-ps, ps-core, custom, none)\ndefault\n\n\nwrap_tab_navigation\nWhether to wrap around when going to the previous or next editor tab.\nboolean\nTRUE\n\n\nzotero_libraries\nZotero libraries to insert citations from.\narray\nMy Library"
  },
  {
    "href": "jupyter_sessions/configuration.html#configuration",
    "title": "RStudio Workbench Administration",
    "section": "Configuration",
    "text": "Jupyter configuration\nConfiguration of the Jupyter feature is handled via the config file /etc/rstudio/jupyter.conf. Note that this file is not automatically created by RStudio, and must be created before being configured, and the Jupyter feature is disabled by default. The following table lists the various configuration options that are available to be specified in the jupyter.conf configuration file:\n/etc/rstudio/jupyter.conf\n\n\n\n\n\n\n\n\n\nConfig Option\nDescription\nDefault Value\n\n\n\n\n\nlabs-enabled\nEnables launching of JupyterLab sessions.\n0 (disabled)\n\n\n\nnotebooks-enabled\nEnabled launching of Jupyter Notebook sessions.\n0 (disabled)\n\n\n\njupyter-exe\nPath to the Jupyter executable.\n/usr/local/bin/jupyter\n\n\n\nlab-command\nThe Jupyter command to run when starting a Lab session.\nlab\n\n\n\nlab-version\nThe version of Jupyter Lab being used. If set to auto, the version is automatically detected by running the Jupyter Lab version command. If Jupyter is being launched via the Launcher and is not installed locally, you are strongly encouraged to set this to the version in use. Running against multiple different Jupyter versions simultaneously in different Launcher clusters is not supported - they must all be running the same version, or proxying issues will occur.\nauto\n\n\n\nlab-args\nArguments to be passed to the Jupyter Lab command. Note that this does not override the default value - if you wish to use some of the default arguments, you must contain the default arguments in the configuration value. It is strongly recommended that you do not change this unless you know what you’re doing!\n--no-browser --allow-root --ip=0.0.0.0\n\n\n\nnotebook-command\nThe Jupyter comman to run when starting a Notebook session.\nnotebook\n\n\n\nnotebook-version\nThe version of Jupyter Notebook being used. If set to auto, the version is automatically detected by running the Jupyter Notebook version command. If Jupyter is being launched via the Launcher and is not installed locally, you are strongly encouraged to set this to the version in use. Running against multiple different Jupyter versions simultaneously in different Launcher clusters is not supported - they must all be running the same version, or proxying issues will occur.\nauto\n\n\n\nnotebook-args\nArguments to be passed to the Jupyter Notebook command. Note that this does not override the default value - if you wish to use some of the default arguments, you must contain the default arguments in the configuration value. It is strongly recommended that you do not change this unless you know what you’re doing!\n--no-browser --allow-root --ip=0.0.0.0\n\n\n\nsession-clusters\nList of available Job Launcher clusters for launching Jupyter sessions. Leave blank to specify all clusters.\n\n\n\n\ndefault-session-cluster\nThe default Job Launcher cluster to use when launching a Jupyter session.\n\n\n\n\ndefault-session-container-image\nThe default container image to use when launching a containerized Jupyter session.\n\n\n\n\nsession-container-images\nComma-delimited list of images that may be used for running Jupyter sessions.\n\n\n\n\njupyter-session-path\nPath to the Jupyter Session launcher executable/script. It is recommended that you do not change this unless you know what you’re doing, and you need to point to a different script.\n/usr/lib/rstudio-server/bin/jupyter-session-run\n\n\n\nsession-no-profile\nEnables/disables running of bash profile scripts when starting Jupyter sessions.\n0 (run profile scripts)\n\n\n\nsession-cull-minutes\nThe amount of idle time to wait in minutes before a Jupyter session’s kernels and terminals is automatically “culled” (shut down). To disable culling, set the value to 0. Enabling this sets the following Jupyter arguments: --MappingKernelManager.cull_interval=60 --MappingKernelManager.cull_idle_timeout=<60 * session-cull-minutes value>\n120\n\n\n\nsession-shutdown-minutes\nThe amount of idle time to wait in minutes before a Jupyter session is shut down after its kernels and terminals have been culled. To disable automatic shutdown, set the value to 0. This setting sets the the following Jupyter arguments: --NotebookApp.shutdown_no_activity_timeout=<60 * session-shutdown-minutes value> --LapApp.shutdown_no_activity_timeout=<60 * session-shutdown-minutes value>\n5\n\n\n\nsession-cull-connected\nWhether or not to cull sessions that have a browser connected. Regardless of this setting, only idle (unused) sessions are culled. Sets the --MappingKernelManager.cull_connected Jupyter setting.\n1 (true)\n\n\n\n\nFor example, your jupyter.conf file might look like the following:\n# /etc/rstudio/jupyter.conf\njupyter-exe=/usr/bin/jupyter\nlabs-enabled=1\nnotebooks-enabled=1\nsession-cull-minutes=240\ndefault-session-cluster=Kubernetes\ndefault-session-container-image=rstudio:jupyter-session\n\n\nJupyter Versions\nCurrently, RStudio Workbench supports JupyterLab 2.x and 3.x, as well as Jupyter Notebooks 6.x. Due to differences between Jupyter versions, RStudio Workbench needs to know the versions of Jupyter Notebook and Jupyter Lab that are in use. They can be automatically detected by RStudio Workbench on start up by running the Jupyter command, or can be specified by using the lab-version and notebook-version settings in /etc/rstudio/jupyter.conf. Automatic version detection is done if the default value of auto is used.\nIf you are running Jupyter in a remote cluster like Kubernetes, you will need to manually specify the version of Jupyter if it is not locally installed or is not running the same version as the remote cluster. Due to differences in routing, running against multiple different versions of Jupyter in different Launcher clusters simultaneously is not supported - the versions must match in all clusters.\nYou should specify a full Jupyter 3-part version number like so:\n# /etc/rstudio/jupyter.conf\nlab-version=3.0.6\nnotebook-version=6.2.0\n\n\nLauncher Configuration\nWhen creating containerized Jupyter sessions via the Job Launcher, you will need to specify mount points as appropriate to mount the users’ home drives and any other desired paths. In order for sessions to run properly within containers, it is required to mount the home directories into the containers.\nFor more information, see Launcher Mounts. Note that you can specify the Workbench with either JupyterLab or Jupyter Notebook to configure mount entries that should only be mounted for JupyterLab and Jupyter Notebook sessions, respectively.\n\n\n\n\n\n\nNote\n\n\n\nIf you are using NFSv3 for the shared storage for user home directories, you will need to set the local_lock=all NFS setting in /etc/fstab in order for Jupyter sessions to work properly. Failure to do this will cause Jupyter sessions to hang. For this reason, we strongly recommend the use of NFSv4 for Jupyter sessions. See the NFS documentation for information on NFS settings.\n\n\n\n\n\n\n\n\nNote\n\n\n\nOnly a user’s home folder is visible within Jupyter sessions. To access other folders, create symbolic links to them within the home folder.\n\n\n\n\nContainer Configuration\nWhen running Jupyter sessions in containers, such as by using the Kubernetes Job Launcher plugin, you will need to ensure that the image(s) used to launch Jupyter sessions contain, at minimum, the following:\n\nPython 2.7 or Python 3.x\nJupyterLab and/or Jupyter Notebook installation\nRStudio session binaries\nIf creating container users (see Server Configuration), you must have the libuser1-dev or libuser-devel packages, depending on your platform to install the libuser library and development tools.\n\nFor ease of use, it is recommended that you use the r-session-complete Docker image as a base for any Jupyter session images you intend to create. This will allow you to use that one base image to provide Jupyter itself and a default version of Python, which you can extend if necessary to add/modify Jupyter versions or add additional versions of Python if desired. See Docker Hub for more information.\n\n\nInstalling the Jupyter Notebook Plugin\nRStudio Workbench can further integrate with Jupyter Notebooks by utilizing the rsp-jupyter Jupyter Notebook plugin. This plugin will automatically track and write recently opened notebooks to the Workbench homepage under the Recent Projects section, and also provides an easy way for users to leave their notebooks and return to the homepage.\nIf running Workbench in containers via the r-session-complete Docker image, you do not need to install the Notebook plugin, as it comes with the container. Otherwise, to install and enable the plugin, run the following commands:\npip install rsp_jupyter\njupyter-nbextension install --sys-prefix --py rsp_jupyter\njupyter-nbextension enable --sys-prefix --py rsp_jupyter\nIf you need to uninstall the plugin for whatever reason, run the following command:\njupyter-nbextension uninstall --sys-prefix --py rsp_jupyter\nTo upgrade the plugin, you must first uninstall and then reinstall it.\n\n\nAdding Python Environments to Jupyter\nYou can add new Python virtual environments or conda environments to Jupyter as Python Kernels that users can select, allowing them to have flexibility in the Python versions they can use.\nThe following steps show how to add a new Python virtualenv as a Kernel to Jupyter:\n\nCreate the virtualenv or conda environment\nAdd the environment as an iPython kernel\nVerify the kernel is available in Jupyter\n\n# first, create the virtual env in a directory accessible by all users\ncd /opt/python-kernels\n\n# then make the virtualenv\nvirtualenv myenv\n\n# alternatively, you can make a conda environment\n# conda create -n myenv\n\n# then, add the virtualenv to the Kernels list globally for all users\nsudo ipython kernel install --name \"myenv\" --display-name \"My Python Environment\"\n\n# finally, verify that the kernel is registered with Jupyter\nsudo jupyter kernelspec list\nOnce the Kernel is listed in the output of the jupyter kernelspec list command, it will be available for use in both JupyterLab and Jupyter Notebooks.\nTo remove the kernel, simply run the following command:\nsudo jupyter kernelspec remove \"myenv\"\nFor more information, see the IPython docs.\n\n\nInstalling JupyterLab Extensions\nWith the release of JupyterLab 3, it is now easier for system administrator to add extensions to Jupyter by using pip. Simply pip install the extension you want, and it will show up in JupyterLab sessions launched from RStudio Workbench.\nFor example, to install the jupyterlab-kernelspy extension using pip:\npip install jupyterlab-kernelspy\n\n\n\n\n\n\nNote\n\n\n\nYou will need to install the desired extensions on all Launcher nodes that are running JupyterLab sessions. For containerized sessions, the extension must be installed in the container image(s) that are used.\n\n\nThere is no need to explicitly enable or disable the extension. Once installed, active sessions can see the extension after refreshing the browser. Other extensions can be found on the Pypi.org site.\nIn previous versions of JupyterLab, you needed to install packages from source and build them with nodejs. This flow is still supported, but installing prebuilt extensions via pip is much simpler. For more information, see the JupyterLab extension docs."
  },
  {
    "href": "jupyter_sessions/troubleshooting.html#troubleshooting",
    "title": "RStudio Workbench Administration",
    "section": "Troubleshooting",
    "text": "If you experience issues related to running Jupyter sessions, you can use the Launcher verification tool which will attempt to launch both RStudio and Jupyter launcher sessions and provide diagnostic output about what could be going wrong. For more information, see the Troubleshooting section for the Job Launcher integration documentation."
  },
  {
    "href": "jupyter_sessions/jupyter_sessions.html#jupyter-sessions",
    "title": "RStudio Workbench Administration",
    "section": "Jupyter Sessions",
    "text": "RStudio Workbench allows you to launch Jupyter sessions from the home page via the Job Launcher, if configured. Users have the option of starting either JupyterLab or Jupyter Notebook sessions that allow them to work with Jupyter while still working within the administrative framework provided by RStudio, such as authentication, PAM session management, etc.\n\n\n\n\n\n\nNote\n\n\n\nBefore Jupyter sessions can be launched, the Job Launcher must be setup correctly. For more information, see the Job Launcher section."
  },
  {
    "href": "hardening/hardening.html",
    "title": "RStudio Workbench Administration",
    "section": "",
    "text": "Overview\nRStudio uses secure defaults wherever possible, but for maximal security hardening it’s necessary to use values that make stronger assumptions or require additional configuration. This section of the Administration Guide demonstrates the use of these more secure configuration values and describes other security considerations.\nA summary of these recommendations in the form of a set of example configuration files is presented at the end of this section: Example Secure Configuration"
  },
  {
    "href": "hardening/other.html#other",
    "title": "RStudio Workbench Administration",
    "section": "Other",
    "text": "Encrypt Database Password\nWhen using PostgreSQL as a database provider, ensure that you’re using an encrypted database password as described in PostgreSQL password encryption.\n# /etc/rstudio/database.conf\n# Generated by rstudio-server encrypt-password\npassword=ThX7skaB8VhMRk7jQr1J3lS0fk+GLmXDp3JIVcHwPiK1CMixSIEsNTt3cNBYj9Rx\n\n\nEnforce Group Requirement\nBy default, anyone who can successfully authenticate on the system can use the IDE. You can get more control over who’s able to log into the system by creating a group such as rstudio-users and instructing RStudio to limit access to that group.\n# /etc/rstudio/rserver.conf\nauth-required-user-group=rstudio-users"
  },
  {
    "href": "hardening/example_secure_configuration.html#example-secure-configuration",
    "title": "RStudio Workbench Administration",
    "section": "Example Secure Configuration",
    "text": "This section aggregates all of the security recommendations from the above sections. Note, again, that some adjustment is likely to be necessary depending on your environment; for example, this set of configuration values presumes that SSL termination is happening in RStudio, that RStudio is the only application running on its domain, and that it is never embedded in another page.\nTherefore, use these files as a starting point rather than copying and pasting them into your own system.\n# /etc/rstudio/rsession.conf\n# Disable publishing to RPubs and shinyapps.io\nallow-external-publish=0\n\n# Prevent exploration of system directories\nrestrict-directory-view=1\n# /etc/rstudio/rserver.conf\n# Limit access to those users to whom it's been explicitly granted via group membership\nauth-required-user-group=rstudio-users\n\n# Sign users out after 20 minutes of inactivity (default is 60)\nauth-timeout-minutes=20\n\n# Use HTTPS when connecting to web browsers\nssl-enabled=1\nssl-certificate=/var/certs/your_domain_name.crt\nssl-certificate-key=/var/certs/your_domain_name.key  \n\n# Limit SSL protocol versions to modern TLS\nssl-protocols=TLSv1.2 TLSv1.3\n\n# Increase HTTP Strict Transport Security to 1 year and include subdomains\nssl-hsts-max-age=31536000\nssl-hsts-include-subdomains=1\n\n# Enable origin checks on all HTTP requests (CSRF defense)\nwww-enable-origin-check=1\n\n# Ensure that the domain on which RStudio is hosted is permitted as an origin\nwww-allow-origin=mysubdomain.mydomain.com\n\n# Ensure the SameSite attribute is set on all cookies\nwww-same-site=lax\n\n# Disallow embedding on other pages\nwww-frame-origin=none\n\n# Use HTTPS when connecting to the Job Launcher\nlauncher-use-ssl=1\n# /etc/rstudio/launcher.conf\nenable-ssl=1\ncertificate-file=/var/certs/your_domain_name.crt\ncertificate-key-file=/var/certs/your_domain_name.key  \n# /etc/rstudio/database.conf\n# Generated by rstudio-server encrypt-password\npassword=ThX7skaB8VhMRk7jQr1J3lS0fk+GLmXDp3JIVcHwPiK1CMixSIEsNTt3cNBYj9Rx"
  },
  {
    "href": "hardening/browser_security.html#browser-security",
    "title": "RStudio Workbench Administration",
    "section": "Browser Security",
    "text": "This section summarizes the recommendations in the Access and Security section.\n\nEnable Origin Checks\nTo help mitigate against CSRF attacks, RStudio can automatically reject any request that originated from a domain it doesn’t recognize. To enable this check, add the following configuration:\n# /etc/rstudio/rserver.conf\nwww-enable-origin-check=1\nwww-allow-origin=mysubdomain.mydomain.com\nThe www-allow-origin setting is optional, but is helpful when RStudio is running behind a proxy. See Additional Security Considerations for details.\n\n\nDisable Frame Embedding\nBy default, RStudio does not permit frame embedding (that is, it will not load inside another web page’s <frameset> or <iframe>). No change is necessary to enforce this, but you can request it explicitly as follows:\n# /etc/rstudio/rserver.conf\nwww-frame-origin=none\n\n\nSet SameSite Cookie Header\nRStudio does not set the SameSite cookie header by default (see Same Site cookies for details). We recommend setting it explicitly.\n# /etc/rstudio/rserver.conf\nwww-same-site=lax"
  },
  {
    "href": "hardening/r_session_security.html#r-session-security",
    "title": "RStudio Workbench Administration",
    "section": "R Session Security",
    "text": "RStudio includes a number of options which can help harden the surface of the RStudio IDE itself. The settings in this section all apply to the IDE’s user interface for R sessions.\nRemember that RStudio is an interface to R itself, which has a variety of tools that can access the file system and shell as the user themselves. Follow security best practices by relying on operating system-level permissions, not front end restrictions, to guard access to sensitive content and files.\n\nLimit Idle Time\nBy default, RStudio allows users to be idle for up to an hour before automatically signing them out. If your users work with sensitive data, you may wish to decrease this.\n# /etc/rstudio/rserver.conf\nauth-timeout-minutes=20\nSee Inactivity Timeout for details.\n\n\nRestrict System Directory Access\nRStudio can optionally prevent users from browsing to system directories; see Restricted Directories for details. Enable this feature as follows:\n# /etc/rstudio/rsession.conf\nrestrict-directory-view=1\n\n\nDisable External Publishing\nRStudio includes support for publishing to several external services, including RPubs and Shinyapps.io. If your users work with sensitive information, you should disable publishing to these services as follows:\n# /etc/rstudio/rsession.conf\nallow-external-publish=0\n\n\nDisable Other Features\nThe are a few other features you should consider disabling. We have not included them in our Example Secure Configuration because they can impede productivity for end users.\n\nDisable shell access (allow-shell=0); disables the Terminal tab used to execute system commands\nDisable file downloads (allow-file-downloads=0); disables downloading files using the Files pane\nDisable file uploads (allow-file-uploads=0); disables uploading files using the Files pane\nDisable package installation (allow-package-installation=0); disables the user interface for installing R packages\n\nNote that regardless of the values of these settings, users can execute system commands, install packages, and upload and download content using R itself."
  },
  {
    "href": "hardening/set_up_ssl.html#set-up-ssl",
    "title": "RStudio Workbench Administration",
    "section": "Set up SSL",
    "text": "A secure installation of RStudio encrypts network traffic using SSL. SSL doesn’t come pre-configured since it requires certificates signed by a Certificate Authority (CA) trusted by all parties.\n\nUse SSL for Web Users\nIf your configuration of RStudio is accessed directly by end users, see the SSL Configuration section, which describes how you can ensure that HTTPS is used when RStudio is accessed via a web browser. Note that this does not apply if you are terminating SSL upstream, for example when you are using nginx or Apache in front of RStudio as described in Running with a Proxy and handling SSL there.\n\n\nUse SSL for the Job Launcher\nEnsure that communication with the Job Launcher is encrypted by setting launcher-use-ssl=1 as follows:\n# /etc/rstudio/rserver.conf\nlauncher-use-ssl=1\nNote that additional configuration for the Job Launcher is required to make it possible to connect to it over SSL. See Job Launcher Configuration for details. Example Launcher configuration:\n# /etc/rstudio/launcher.conf\nenable-ssl=1\ncertificate-file=/var/certs/your_domain_name.crt\ncertificate-key-file=/var/certs/your_domain_name.key  \n\n\nRestrict TLS Versions\nRStudio Workbench supports many different SSL protocols for compatibility with older browsers, but several are no longer considered secure. We recommend disabling support for all SSL protocols except the most recent two, TLS 1.2 and 1.3. See the SSL Protocols section for more details.\n# /etc/rstudio/rserver.conf\nssl-protocols=TLSv1.2 TLSv1.3\n\n\nUse HTTP Strict Transport Security (HSTS)\nWhen configured with SSL, RStudio Workbench uses HTTP Strict Transport Security automatically. This is a security setting that forces the browser to always use HTTPS when connecting to RStudio Workbench. We recommend including the maximum age to 1 year, and extending coverage to subdomains.\n# /etc/rstudio/rserver.conf\nssl-hsts-max-age=31536000\nssl-hsts-include-subdomains=1\nThis ensures that the browser will not connect via HTTP to the domain running RStudio Server (and any of its subdomains) for one year.\n\n\nUsing SSL with RStudio Server Open Source\nRStudio Workbench has built-in SSL and HTTPS controls as described in this section. However, much of the same advice applies if you are securing an installation of the Open Source edition of RStudio Server; you can run RStudio Server behind a reverse proxy such as Nginx and perform SSL termination upstream."
  },
  {
    "href": "vscode_sessions/configuration.html#configuration",
    "title": "RStudio Workbench Administration",
    "section": "Configuration",
    "text": "VS Code Configuration\nConfiguration of VS Code sessions is handled via the config file /etc/rstudio/vscode.conf. Note that this file is not automatically created by RStudio and must be created manually or with the install-vs-code script, as VS Code sessions are disabled by default. The following table lists the various configuration options that are available to be specified in the vscode.conf configuration file:\n/etc/rstudio/vscode.conf\n\n\n\n\n\n\n\n\n\nConfig Option\nDescription\nDefault Value\n\n\n\n\n\nenabled\nEnables launching of VS Code sessions.\n0 (disabled)\n\n\n\nexe\nPath to the code-server executable. VS Code sessions rely on the open source code-server project. For more information, see the project site\n/opt/code-server/bin/code-server\n\n\n\nversion\nThe version of VS Code code-server being used. If set to auto, the version is automatically detected by running the code-server version command. If VS Code is being launched via the Launcher and is not installed locally, you are strongly encouraged to set this to the version in use. Running against multiple different code-server versions simultaneously in different Launcher clusters is not supported - they must all be running the same version, or issues will occur.\ncur. | auto\n|\n\n\nargs\nArguments to be passed to the code-server launch command. You can supply an --extensions-dir= to point to previously installed extensions via this parameter. If no --host argument is supplied, a default of --host=0.0.0.0 will be assumed.\n| | --host=0.0.0.0\n| |\n\n\nsession-clusters\nComma-delimited list of available Job Launcher clusters for launching VS Code sessions. Leave blank to specify all clusters.\n\n\n\n\ndefault-session-cluster\nThe default Job Launcher cluster to use when launching a VS Code session.\n\n\n\n\ndefault-session-container-image\nThe default container image to use when launching a containerized VS Code session.\n\n\n\n\nsession-container-images\nComma-delimited list of images that may be used for running VS Code sessions.\n\n\n\n\nvscode-session-path\nPath to the VS Code Session launcher executable/script. It is recommended that you do not change this unless you know what you’re doing, and you need to point to a different script.\n/usr/lib/rstudio-server/bin/vscode-session-run\n\n\n\nsession-no-profile\nEnables/disables running of bash profile scripts when starting VS Code sessions.\n0 (run profile scripts)\n\n\n\n\nFor example, your vscode.conf file might look like the following:\n# /etc/rstudio/vscode.conf\nexe=/usr/bin/code-server\nenabled=1\ndefault-session-cluster=Kubernetes\ndefault-session-container-image=rstudio:vscode-session\n\n\nVS Code code-server Versions\nCurrently, RStudio Workbench supports code-server 3.9.3. Due to differences between code-server versions, RStudio Workbench needs to know the versions of code-server that is in use. It can be automatically detected by RStudio Workbench on start up by running the code-server command, or can be specified by using the version setting in /etc/rstudio/vscode.conf. Automatic version detection is done if the default value of auto is used.\nIf you are running VS Code in a remote cluster like Kubernetes, you will need to manually specify the version of code-server if it is not locally installed or is not running the same version as the remote cluster. Due to version differences, running against multiple different versions of code-server in different Launcher clusters simultaneously is not supported - the versions must match in all clusters.\nYou can manually specify the version number like so:\n# /etc/rstudio/vscode.conf\nversion=3.9.3\n\n\nVS Code User Settings\nBy default, code-server writes VS Code user settings under ~/.local/share/code-server. This can be changed by adding the user-data-dir path argument to the VS Code options, like so:\n# /etc/rstudio/vscode.conf\nexe=/usr/bin/code-server\nargs=--host=0.0.0.0 --verbose\nuser-data-dir=<desired user path>\nNote that the  specified in the configuration can contain the ~ to represent the user’s home directory.\nWhenever a VS Code session is launched, RStudio automatically merges the user settings template file at /etc/rstudio/vscode-user-settings.json with the user’s settings file. This file should be a valid JSON file that contains desired VS Code user settings. Any matching settings that already exist in the user settings file are not overridden, allowing users the freedom to customize their environment. You should use the vscode-user-settings.json file to provide them with a simple baseline configuration.\nIf you installed VS Code via the sudo rstudio-server install-vs-code command, a simple template is created for you automatically which instructs VS Code to use the bash shell by default and to disable automatic extension updates. The generated file looks like the following:\n/etc/rstudio/vscode-user-settings.json\n{\n      \"terminal.integrated.shell.linux\": \"/bin/bash\",\n      \"extensions.autoUpdate\": false,\n      \"extensions.autoCheckUpdates\": false\n}\n\n\nLauncher Configuration\nWhen creating containerized VS Code sessions via the Job Launcher, you will need to specify mount points as appropriate to mount the users’ home drives and any other desired paths. In order for sessions to run properly within containers, it is required to mount the home directories into the containers.\nFor more information, see Launcher Mounts. Note that you can specify the Workbench with VS Code to configure mount entries that should only be mounted for VS Code sessions.\n\n\n\n\n\n\nNote\n\n\n\nOnly a user’s home folder is visible within VS Code sessions. To access other folders, create symbolic links to them within the home folder.\n\n\n\n\nContainer Configuration\nWhen running VS Code sessions in containers, such as by using the Kubernetes Job Launcher plugin, you will need to ensure that the image(s) used to launch VS Code sessions contain, at minimum, the following:\n\ncode-server 3.9.3 binary\nRStudio Workbench session binaries\nIf creating container users (see Server Configuration), you must have the libuser1-dev or libuser-devel packages, depending on your platform to install the libuser library and development tools.\n\nFor ease of use, it is recommended that you use the r-session-complete Docker image as a base for any VS Code session images you intend to create."
  },
  {
    "href": "vscode_sessions/troubleshooting.html#troubleshooting",
    "title": "RStudio Workbench Administration",
    "section": "Troubleshooting",
    "text": "If you experience issues related to running VS Code sessions, you can use the Launcher verification tool which will attempt to launch VS Code sessions and provide diagnostic output about what could be going wrong. For more information, see the Troubleshooting section for the Job Launcher integration documentation."
  },
  {
    "href": "vscode_sessions/installation.html#installation",
    "title": "RStudio Workbench Administration",
    "section": "Installation",
    "text": "General Installation\nIn order to add VS Code integration to RStudio Workbench, you must first install the open-source code-server wrapper. This wrapper allows access to VS Code via a web server in a browser, allowing Workbench to create VS Code sessions and proxy them through the browser.\nTo install, simply run the command rstudio-server install-vs-code <path to installation directory>. This will install the code-server binary, and automatically configure /etc/rstudio/vscode.conf.\nVS Code utilizes extensions to provide support for different languages and other features, such as custom themes. Normally extensions are managed by a user who installs them through an extension marketplace onto their desktop. For RStudio Workbench, you need to decide if users will be able to install extensions individually themselves, or if you will provide a global installation of extensions. User installation of extensions provides the most flexibility and is consistent with a user’s desktop experience. However, if RStudio Workbench will be in a restricted or airgapped network, admins may need to install extensions globally for users.\nThe default configuration will allow users to manage their own extensions; if use of a global extensions directory is desired, then it may be passed as an option to the install-vs-code command. Alternatively, vscode.conf can be manually updated to include --extensions-dir after it has been created. For example, to install everything at /opt/code-server with per-user extensions directories:\n# likely need root privilege to install to /opt\nsudo rstudio-server install-vs-code /opt/code-server\nTo install everything at /opt/code-server with a global extensions directory at /opt/code-server/extensions:\n# likely need root privilege to install to /opt\nsudo rstudio-server install-vs-code /opt/code-server --extensions-dir=/opt/code-server/extensions\nAny arguments after the installation directory will be added to the args entry in vscode.conf, which is supplied to the code-server binary when the session is started. Note that if a global extensions directory is provided this way, this command will also automatically install the RStudio Workbench VS Code extension as described in the Installing the RStudio Workbench Extension section.\nOnce the installation completes, you’ll need to restart the RStudio service for it to detect availability of VS Code sessions.\n\n\n\n\n\n\nNote\n\n\n\nYou must also install code-server on all Launcher nodes (for Local or Slurm plugins) and within any containers used (if using Kubernetes).\n\n\n\n\nInstalling the RStudio Workbench Extension\n\nRequirements\nThe RStudio Workbench extension requires code-server 3.9.3. While later versions may work as expected, compatibility is only guaranteed with version 3.9.3. The install-vs-code-ext command can upgrade code-server automatically for you if you include the -d flag with the directory that code-server should be installed in. For example, your command may look like this:\nrstudio-server install-vs-code-ext -d /opt/code-server\n\n\nInstallation\nIf using a global extensions directory, the install-vs-code-ext script can be used to install the latest version of the extension. This script is run while upgrading RStudio Workbench, but may fail with a warning if the version requirement is not met.\nIf allowing user extension directories, and the requirements above are met, the extension will be installed on a per user basis when the user launches their first VS Code session.\n\n\n\nManual Installation\ncode-server can be installed manually, if desired. Additionally, if you have opted for a global extensions directory you can also opt to manually install the RStudio Workbench VS Code extension, and it may be necessary to manually install any other extensions that you require, if users will not have write access to the extensions directory.\n\nManually Installing code-server\nIf you’d like to install code-server manually, simply download the code-server Linux distributable (available at https://rstd.io/vs-code-server-3-9-3) and extract it to the desired location on the RStudio Workbench host(s).\nFor example, to manually install code-server under /opt:\n# create directory to house code-server\nmkdir /opt/code-server\ncd /opt/code-server\n\n# download the code server package\nwget https://rstd.io/vs-code-server-3-9-3 -O vs-code-server.tar.gz\n\n# extract code-server binary\ntar zxvf vs-code-server.tar.gz --strip 1\n\n# remove the archive\nrm vs-code-server.tar.gz\n\n\nManually Installing the RStudio Workbench VS Code Extension\nWhen VS Code sessions are configured with a global extensions directory, it is possible to manually install the VS Code extension rather than using the provided install-vs-code-ext script. If VS Code sessions are not configured with a global extensions directory, the RStudio Workbench VS Code Extension will be automatically installed the first time a user launches a VS Code session. It is still possible to manually install the extension in this circumstance, however the operation will have to be performed for every user.\nThe RStudio Workbench VS Code extension can be downloaded from https://rsw-vscode-extension.s3.amazonaws.com/rstudio-workbench-1.0.4.vsix. The current latest version is 1.0.4.\nFor example, to install the RStudio Workbench VS Code extension to the global extension directory /opt/code-server/extensions:\n# Ensure the extension directory exists\nmkdir -p /opt/code-server/extensions\ncd /opt/code-server/extensions\n\n# Download the extension\nexport RSW_EXT_VERSION=1.0.4\nwget https://rsw-vscode-extension.s3.amazonaws.com/rstudio-workbench-${RSW_EXT_VERSION}.vsix -O rstudio-workbench-${RSW_EXT_VERSION}.vsix\n\n# Install the extension\n/opt/code-server/code-server --extensions-dir /opt/code-server/extensions --install-extension ./rstudio-workbench-${RSW_EXT_VERSION}.vsix\nTo install the extension manually on behalf of a particular user, when not using a global installation directory, run the following commands as the desired user:\n# Ensure the extension directory exists\nmkdir -p \"${XDG_DATA_HOME:-~/.local/share}/rstudio\"\ncd \"${XDG_DATA_HOME:-~/.local/share}/rstudio\"\n\n# Download the extension\nexport RSW_EXT_VERSION=1.0.4\nwget https://rsw-vscode-extension.s3.amazonaws.com/rstudio-workbench-${RSW_EXT_VERSION}.vsix -O rstudio-workbench-${RSW_EXT_VERSION}.vsix\n\n# Install the extension\n/opt/code-server/code-server --install-extension ./rstudio-workbench-${RSW_EXT_VERSION}.vsix\n\n\n\n\n\n\nNote\n\n\n\nInstalling the extension manually when a global installation directory is not in use will require you to repeat the operation for every user.\n\n\n\n\nManually Installing Language Extensions\nWhen VS Code sessions are configured with a global extensions directory, users without write access to this directory will not be able to install extensions and the extensions marketplace will be disabled. Otherwise, users are able to manage their own extensions, and installs must be performed on a per user basis by the user. There are three ways in which extensions can be installed:\n\nInstall the extension through code-server’s hosted repository. This can be done from within a VS Code session via the UI. Alternatively, this can be done via the command line with the following command, with the --extensions-dir argument omitted when a global directory is not in use:\n\n/opt/code-server/code-server --extensions-dir /opt/code-server/extensions --install-extension <extension name>\n\nDownload an extension in VSIX format from an online marketplace such as Open VSX. Then, install it using the --install-extension command like the example above, passing the VSIX file path as the extension name. Note that if the latest version of the extension is incompatible with the version of code-server, it will fail to install. You can try using an older version of the extension in this case.\n\n\n\n\n\n\n\nNote\n\n\n\nIt is against VS Code’s Terms of Service to use the official Marketplace extensions with third party tools like code-server. We strongly recommend using a free and open source alternative like Open VSX.\n\n\n\nBuild the extension from source. There are several extensions freely available on GitHub that can be built into a VSIX file yourself and then installed via the --install-extension command. Building third party extensions from source is outside of the scope of this document.\n\nRStudio does not provide support for external extensions. If you have questions or issues we encourage you to check Stack Overflow, the extension’s repository, or the code-server repository."
  },
  {
    "href": "vscode_sessions/multiple_sessions.html#multiple-sessions",
    "title": "RStudio Workbench Administration",
    "section": "Multiple Sessions",
    "text": "Multiple VS Code windows with distinct processes and projects can be opened within the same VS Code session in separate browser windows. Closing a VS Code session window causes the processes associated with that window to exit, while other processes associated with the same session will remain running.\nAfter a user closes all windows associated with a session, restarting the session from the RStudio Workbench homepage will open the last project that the user opened in this session. The order in which the windows are closed does not impact this. Reopening the VS Code Workspace or folder the user was previously working in will return the window to the state that it was left in."
  },
  {
    "href": "vscode_sessions/vs_code_sessions.html#vs-code-sessions",
    "title": "RStudio Workbench Administration",
    "section": "VS Code Sessions",
    "text": "RStudio Workbench allows you to launch VS Code sessions from the home page via the Job Launcher, if configured. Users can start VS Code sessions that allow them to work with VS Code while still working within the administrative framework provided by RStudio, such as authentication, PAM session management, etc.\n\n\n\n\n\n\nNote\n\n\n\nBefore VS Code sessions can be launched, the Job Launcher must be setup correctly. For more information, see the Job Launcher section.\n\n\n\n\n\n\n\n\nNote\n\n\n\nRStudio is not affiliated with Microsoft. Your usage of the open source code-server and VS Code are subject to their respective licenses: see here and here.\n\n\n\nRStudio Workbench Extension\nVS Code sessions are intended to be used with the RStudio Workbench VS Code extension installed. The extension provides users with a button to open the RStudio Workbench homepage in a new tab. Because VS Code sessions are running remotely, any web server a user may be developing, such as Shiny, Dash, or Streamlit, will also be running remotely. The RStudio Workbench VS Code extension allows users to access these remote web servers through their browser. If the extension is not installed, VS Code sessions will launch but without the additional features; users working on these types of apps will not be able to access the servers they are running on."
  },
  {
    "href": "404.html#youre-lost",
    "title": "RStudio Workbench Administration",
    "section": "You’re lost!",
    "text": ""
  },
  {
    "href": "database/configuration.html#configuration",
    "title": "RStudio Workbench Administration",
    "section": "Configuration",
    "text": "In order to set up a database connection, modify the file /etc/rstudio/database.conf. The file contains documentation about how to use it, and you can simply uncomment any lines that are relevant to your configuration. Note that because the file can contain password data, this file must be user read/write only (file mask 600).\n\nSQLite\nBy default, RStudio creates a SQLite database for you automatically under the /var/lib/rstudio-server directory. For single-node installations, this is sufficient, but as stated before, will not be sufficient for load balanced deployments.\nYou should never specify a SQLite directory that is on shared storage, such as NFS. Per the SQLite documentation, this can cause data corruption.\nSample configuration:\n# /etc/rstudio/database.conf\nprovider=sqlite\n\n# Directory in which the sqlite database will be written\ndirectory=/var/lib/rstudio-server\n\n\nPostgreSQL\nIf you wish to use PostgreSQL, you must create an empty database for RStudio to connect to. You must not share this database with other products or services. If running an HA setup, it is strongly recommended to run the database on a separate server than the RStudio services to ensure maximum availability. The minimum supported PostgreSQL version is 9.5.\nRStudio requires PostgreSQL to be configured for password-based authentication. For more details on this and other PostgreSQL fundamentals, see the support article Install and Configure PostgreSQL for RStudio Workbench / RStudio Server Pro.\nSample configuration:\n# /etc/rstudio/database.conf\n# Note: when connecting to a PostgreSQL database, a default empty rstudio database must first be created!\nprovider=postgresql\n\n# Specifies the host (hostname or IP address) of the database host\nhost=localhost\n\n# Specifies the database to connect to\ndatabase=rstudiodb\n\n# Specifies the TCP port where the database is listening for connections\nport=5432\n\n# Specifies the database connection username\nusername=rstudio\n\n# Specifies the database connection password. This may be encrypted with the secure-cookie-key.\n# The encrypted password can be generated using the helper command rstudio-server encrypt-password.\n# It is strongly recommended that you encrypt the password!\npassword=test\n\n# Specifies the maximum amount of seconds allowed before a database connection attempt\n# is considered failed. The default if not specified is 10 seconds. Corresponds to the\n# PostgreSQL \"connect_timeout=\" connection string parameter. \nconnection-timeout-seconds=12\nPostgreSQL connection URIs are also supported if preferred. If specifying additional options other than the ones provided above, such as sslmode, the use of a URI is required.\nFor example:\n# /etc/rstudio/database.conf\nprovider=postgresql\n\n# Specifies the connection URL in the form of a postgresql:// connection URL. This can be used if you need\n# to set special database settings that are not available with the other parameters. If set, this parameter will\n# override any other postgresql parameters that have been set, with the exception of the password. A password in \n# the URI is supported as a convenience but we strongly recommend using the separate password field, which will\n# always replace any password specified in the URI.\nconnection-uri=postgresql://rstudio@localhost:5432/rstudiodb?sslmode=allow&options=-csearch_path=public\nAvailable PostgreSQL connection string parameters are documented in the official PostgreSQL documentation.\n\n\n\n\n\n\nNote\n\n\n\nThe password in connection-uri may contain characters that may need to be URL-encoded to work properly. Avoid encoding the password by using the separate password field in the configuration.\n\n\n\nSSL\nSSL for the PostgreSQL database can be used with RStudio by specifying sslmode=allow within the connection-uri parameter. The connection-uri mode of configuration must be used to specify additional database connection options such as these, beyond the simple name/value pairs that are supported.\nFor example:\n# /etc/rstudio/database.conf\nprovider=postgresql\nconnection-uri=postgresql://postgres@localhost:5432/rstudio?sslmode=allow\n\n\nSchemas\nIf you need to, you can tell RStudio to restrict itself to keeping its tables within a specific schema. You control this by giving PostgreSQL a search path as part of the URL by adding options=-csearch_path=<schema-name> to the connection-uri. If it’s the only item you’re adding, separate it from the rest of the URL with ? (just like the sslmode item above). Otherwise, separate it from other items with ‘&’.\nFor example:\nprovider=postgresql\nconnection-uri=postgresql://postgres@localhost:5432/rstudio?sslmode=allow&options=-csearch_path=rstudio_schema\nRStudio will refuse to start when given a schema that does not already exist. The schema must be owned by the connecting user or by a group that contains the connecting user.\n\n\nPostgreSQL Account\nWhen setting up your PostgreSQL database for use with RStudio, ensure that you do not use the default postgres user account that comes with a standard installation. This is to ensure that your database is secure. Always ensure that whichever account that is used to access the database contains a strong password - do not use an account that has no password! You should also ensure that only one PostgreSQL user has access to the RStudio database for maximum security.\n\n\nPostgreSQL Password Encryption\nA plain-text password in the password or connection-uri options of the /etc/rstudio/database.conf file must only be used temporarily for testing purposes. A warning will be present in RStudio log output when a plain-text password is being used.\nWe strongly recommend encrypting the password using the command rstudio-server encrypt-password. This way, if you have to backup your configuration, save it to a repository or share it with RStudio Support, your PostgreSQL password will be protected.\nUse the following steps to encrypt the PostgreSQL password:\n\nRemove the password from the connection-uri option if defined in the database.conf file.\nRun the command sudo rstudio-server encrypt-password and enter the PostgreSQL password.\nCopy the resulting encrypted password printed in the terminal.\nAdd or replace the password option in the database.conf file using the encrypted password copied above.\nRestart RStudio. Confirm it operates normally. You should no longer see a warning about plain-text password in RStudio logs.\n\n\n\n\n\n\n\nNote\n\n\n\nAlternatively, you can also “pipe” your password to the rstudio-server encrypt-password command to skip the prompt. Useful when the password is already stored elsewhere. For example:\ncat passwordfile | sudo rstudio-server encrypt-password\n\n\nThe password encryption uses the secure-cookie-key value. By default RStudio generates this key during installation and stores it in /var/lib/rstudio-server/secure-cookie-key.\nThe same key value must be used for both encryption and decryption. If the key value used to encrypt the PostgreSQL password changes, the password must be re-encrypted with the new key and updated in /etc/rstudio/database.conf.\nIf preparing RStudio configuration files on one system for deployment on other system(s), you must manually generate a key and store it in /etc/rstudio/secure-cookie-key, then encrypt the password again, update /etc/rstudio/database.conf, and ensure this secure-cookie-key file is deployed along with other RStudio configuration files. The technique for creating this file is described in Generating a Key.\n\n\nPostgreSQL Connection Testing and Troubleshooting\nOnce the settings have been entered in /etc/rstudio/database.conf, use the sudo rstudio-server verify-installation command to test connectivity and quickly view errors and warnings.\n\n\n\nConnection Pool\nRStudio will create a pool of connections to the database at startup. The size of this pool defaults to the number of logical CPUs on the host running RStudio Workbench, up to 20. It is not generally recommended that you adjust the size of this pool manually unless you need to address a specific problem, such as exceeding a connection limit on the database or experiencing delays in RStudio Workbench caused by unavailable connections.\nIf you do need to adjust the size of the pool, you can do so by setting pool-size in database.conf as follows:\n# /etc/rstudio/database.conf\npool-size=5"
  },
  {
    "href": "database/database.html",
    "title": "RStudio Workbench Administration",
    "section": "",
    "text": "Overview\nRStudio supports multiple database options. Currently, the supported databases are SQLite and PostgreSQL. When running RStudio Workbench in a load balanced configuration, you must use a PostgreSQL database, as SQLite is insufficient for managing state between multiple nodes."
  },
  {
    "href": "database/migration.html#migration",
    "title": "RStudio Workbench Administration",
    "section": "Migration",
    "text": "When changing database providers, you must migrate your existing database data from your current database provider to the new provider to prevent unexpected data loss.\nThe following steps should be taken to perform a successful migration from SQLite to PostgreSQL:\n\nCreate an empty database called rstudio in PostgreSQL (or any custom name according to your RStudio configuration below). Ensure the connection credentials work for the new database.\nStop RStudio.\nSwitch to PostgreSQL by modifying the /etc/rstudio/database.conf file. If you are storing the SQLite database in a different location be sure to keep the directory option in the file during the migration.\nRun the command sudo rstudio-server migrate-db. Watch for the output and confirm that the migration was successful.\nOnce the data has been imported to the new database, restart RStudio.\n\n\n\n\n\n\n\nNote\n\n\n\nThe migration from PostgreSQL to SQLite is not currently supported."
  },
  {
    "href": "auditing_and_monitoring/auditing_and_monitoring.html#auditing-and-monitoring",
    "title": "RStudio Workbench Administration",
    "section": "Auditing and Monitoring",
    "text": "In this section:\n\nAuditing Configuration\nMonitoring Configuration\nServer Health Checks"
  },
  {
    "href": "auditing_and_monitoring/monitoring_configuration.html#monitoring-configuration",
    "title": "RStudio Workbench Administration",
    "section": "Monitoring Configuration",
    "text": "System and Per-User Resources\nRStudio Workbench monitors the use of resources (CPU, memory, etc.) on both a per-user and system wide basis. By default, monitoring data is written to a set of RRD files and can be viewed using the Administrative Dashboard.\nThe storage of system monitoring data requires about 20MB of disk space and the storage of user monitoring data requires about 3.5MB per user. This data is stored by default at /var/lib/rstudio-server/monitor. If you have a large number of users you may wish to specify an alternate volume for monitoring data. You can do this using the monitor-data-path setting. For example:\n# /etc/rstudio/rserver.conf\nmonitor-data-path=/monitor-data\nYou also might wish to disable monitoring with RRD entirely. You can do this using the monitor-rrd-enabled setting. For example:\n# /etc/rstudio/rserver.conf\nmonitor-rrd-enabled=0\nNote that changes to the configuration will not take effect until the server is restarted.\n\nAnalyzing RRD files\nThe RRD files powering RStudio’s Administrative Dashboard are available for your own analysis, too. You can find them in /var/lib/rstudio-server/monitor/rrd (unless you’ve changed monitor-data-path as described above); they store all the metrics you can see on the dashboard, so you can use the information for your own reports and insights.\nMore information on how to read and visualize RRD data from R is available in the following blog post:\nReading and analysing log files in the RRD database format\n\n\n\nUsing Graphite\nIf you are managing several servers it might be convenient to send server monitoring data to a centralized database and graphing facility as opposed to local RRD files. You can do this by configuring the server to send monitoring data to Graphite (or any other engine compatible with the Carbon protocol). This can be done in addition to or entirely in place of RRD.\nThere are four settings that control interaction with Graphite:\n\n\n\n\n\n\n\nmonitor-graphite-enabled\nWrite monitoring data to Graphite (defaults to 0)\n\n\nmonitor-graphite-host\nHost running Graphite (defaults to 127.0.0.1)\n\n\nmonitor-graphite-port\nPort Graphite is listening on (defaults to 2003)\n\n\nmonitor-graphite-client-id\nOptional client ID for sender\n\n\n\nFor example, to enable Graphite monitoring on a remote host with the default Graphite port you would use these settings:\n# /etc/rstudio/rserver.conf\nmonitor-graphite-enabled=1\nmonitor-graphite-host=134.47.22.6\nIf you are using a service like hosted graphite.com that requires that you provide an API key as part of reporting metrics you can use the monitor-graphite-client-id setting. For example:\n# /etc/rstudio/rserver.conf\nmonitor-graphite-enabled=1\nmonitor-graphite-host=carbon.hostedgraphite.com\nmonitor-graphite-client-id=490662a4-1d8c-11e5-b06d-000c298f3d04\nNote that changes to the configuration will not take effect until the server is restarted."
  },
  {
    "href": "auditing_and_monitoring/server_health_checks.html#server-health-checks",
    "title": "RStudio Workbench Administration",
    "section": "Server Health Checks",
    "text": "Enabling Health Checks\nYou may wish to periodically poll RStudio Workbench to ensure that it’s still responding to requests as well as to examine various indicators of server load. You can enable a health check endpoint using the server-health-check-enabled setting. For example:\n# /etc/rstudio/rserver.conf\nserver-health-check-enabled=1\nAfter restarting the server, the following health-check endpoint will be available:\nhttp://<server-address-and-port>/health-check\nBy default, the output of the health check will appear as follows:\nactive-sessions: 1\nidle-seconds: 0\ncpu-percent: 0.0\nmemory-percent: 64.2\nswap-percent: 0.0\nload-average: 4.1\n\n\nCustomizing Responses\nThe response to the health check is determined by processing a template that includes several variables. The default template is:\nactive-sessions: #active-sessions#\nidle-seconds: #idle-seconds#\ncpu-percent: #cpu-percent#\nmemory-percent: #memory-percent#\nswap-percent: #swap-percent#\nload-average: #load-average#\nYou can customize this template to return an alternate format (e.g. XML or JSON) that is parse-able by an external monitoring system. To do this you simply create a template and copy it to /etc/rstudio/health-check For example, an XML format:\n<!--/etc/rstudio/health-check-->\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<health-check>\n  <active-sessions>#active-sessions#</active-sessions>\n  <idle-seconds>#idle-seconds#</idle-seconds>\n  <cpu-percent>#cpu-percent#</cpu-percent>\n  <memory-percent>#memory-percent#</memory-percent>\n  <swap-percent>#swap-percent#</swap-percent>\n  <load-average>#load-average#</load-average>\n</health-check>\nOr a Prometheus endpoint. Prometheus is an open-source systems monitoring and alerting toolkit with a custom input format:\n# /etc/rstudio/health-check\n# HELP active_sessions health_check metric Active RStudio sessions\n# TYPE active_sessions gauge\nactive_sessions #active-sessions#\n# HELP idle_seconds health_check metric Time since active RStudio sessions\n# TYPE idle_seconds gauge\nidle_seconds #idle-seconds#\n# HELP cpu_percent health_check metric cpu (percentage)\n# TYPE cpu_percent gauge\ncpu_percent #cpu-percent#\n# HELP memory_percent health_check metric memory used (percentage)\n# TYPE memory_percent gauge\nmemory_percent #memory-percent#\n# HELP swap_percent health_check metric swap used (percentage)\n# TYPE swap_percent gauge\nswap_percent #swap-percent#\n# HELP load_average health_check metric cpu load average\n# TYPE load_average gauge\nload_average #load-average#\n\n\nChanging the URL\nIt’s also possible to customize the URL used for health checks. RStudio Workbench will use the first file whose name begins with health-check in the /etc/rstudio directory as the template, and require that the full file name be specified in the URL. For example, a health check template located at the following path:\n/etc/rstudio/health-check-B64C900E\nWould be accessed using this URL:\nhttp://<server-address-and-port>/health-check-B64C900E\nNote that changes to the health check template will not take effect until the server is restarted."
  },
  {
    "href": "auditing_and_monitoring/auditing_configuration.html#auditing-configuration",
    "title": "RStudio Workbench Administration",
    "section": "Auditing Configuration",
    "text": "R Console Auditing\nRStudio Workbench can be optionally configured to audit all R console activity by writing console input and output to a central location (the /var/lib/rstudio-server/audit/r-console directory by default). This feature can be enabled using the audit-r-console setting. For example:\n# /etc/rstudio/rserver.conf\naudit-r-console=input\nThis will audit all R console input. If you wish to record both console input and output then you can use the all setting. For example:\n# /etc/rstudio/rserver.conf\naudit-r-console=all\nNote that if you choose to record both input and output you’ll need considerably more storage available than if you record input only. See the Storage Options section below for additional discussion of storage requirements and configuration.\n\nData Format\nThe R console activity for each user is written into individual files within the r-console data directory (by default /var/lib/rstudio-server/audit/r-console). The following fields are included:\n\n\n\n\n\n\n\nsession_id\nUnique identifier for R session where this action occurred.\n\n\nproject\nPath to RStudio project directory if the action occurred within a project.\n\n\npid\nUnix process ID where this console action occurred.\n\n\nusername\nUnix user which executed this console action.\n\n\ntimestamp\nTimestamp of action in milliseconds since the epoch.\n\n\ntype\nConsole action type (prompt, input, output, or error).\n\n\ndata\nConsole data associated with this action (e.g. output text).\n\n\n\nThe session_id field refers to a concurrent R session as described in the section on Multiple R Sessions (i.e. it can span multiple projects and/or pids).\nThe default format for the log file is CSV (Comma Separated Values). It’s also possible to write the data to Newline Delimited JSON by using the audit-r-console-format option. For example:\naudit-r-console-format=json\nNote that when using the JSON format the entire file is not a valid JSON object but rather each individual line is one. This follows the Newline Delimited JSON specification supported by several libraries including the R jsonlite package.\n\n\nStorage Options\nYou can customize both the location where audit data is written as well as the maximum amount of data to log per-user (by default this is 50 MB). To specify the root directory for audit data you use the audit-data-path setting. For example:\n# /etc/rstudio/rserver.conf\naudit-data-path=/audit-data\nNote that this path affects the location of both R console auditing and R session auditing data.\nTo specify the maximum amount of data to write to an individual user’s R console log file you use the audit-r-console-user-limit-mb setting. For example:\n# /etc/rstudio/rserver.conf\naudit-r-console-user-limit-mb=100\nThe default maximum R console log file size is 50 megabytes per-user. To configure no limit to the size of files which can be written you set the value to 0, for example:\n# /etc/rstudio/rserver.conf\naudit-r-console-user-limit-mb=0\nIf you wish for RStudio to automatically roll the log files once the maximum size is reached, set the audit-r-console-user-limit-months setting. For example:\n# /etc/rstudio/rserver.conf\naudit-r-console-user-limit-months=2\nThis will cause log files to be rolled over once the maximum size is reached, and only two months of data will be kept. Note that this setting is not set by default.\nNote that if the month limit is not set, then log files will not be rolled automatically. Depending on the number of users and their activity level this means that you should either create a scheduled (e.g. cron) job to periodically move the files off the server onto auxiliary storage and/or ensure that the volume they are stored on has sufficient capacity.\n\n\n\nR Session Auditing\nRStudio Workbench can be optionally configured to write an audit log of session related events (e.g. login/logout, session start/suspend/exit) to a central location (the /var/lib/rstudio-server/audit/r-sessions directory by default). This feature can be enabled using the audit-r-sessions setting. For example:\n# /etc/rstudio/rserver.conf\naudit-r-sessions=1\nNote that this is enabled by default if you are using named user licenses.\n\n\n\n\n\n\nNote\n\n\n\nSession auditing is only supported for RStudio IDE R Sessions and is not currently supported for Jupyter or VS Code sessions.\n\n\n\nData Format\nThe R session event log is written by default to the file at /var/lib/rstudio-server/audit/r-sessions/r-sessions.csv. The following fields are included:\n\n\n\n\n\n\n\npid\nUnix process ID the event is associated with (for auth events this will be the main rserver process, for session events the rsession process).\n\n\nusername\nUnix user that the event is associated with.\n\n\ntimestamp\nTimestamp of event in milliseconds since the epoch.\n\n\ntype\nEvent type (see documentation on event types below).\n\n\ndata\nEvent data (see documentation on event types below).\n\n\n\nThe following values are valid for the event type field:\n\n\n\n\n\n\n\nauth_login\nUser logged in to RStudio Workbench; data contains name of admin user if they are impersonating the user\n\n\nauth_throttled\nUser temporarily blocked due to multiple login attempts (as defined by the option auth-sign-in-throttle-seconds)\n\n\nauth_unlicensed\nUser is locked or there is no license available\n\n\nauth_license_failed\nUser blocked due to a failure in obtaining a license\n\n\nauth_logout\nUser logged out of RStudio Workbench\n\n\nauth_login_failed\nUser login attempt failed because a local account may not exist\n\n\nsession_start\nR session started\n\n\nsession_suicide\nR session exiting due to suicide (internal error)\n\n\nsession_suspend\nR session exiting due to suspend\n\n\nsession_file_upload\nFile uploaded from browser to R session; data field contains file name\n\n\nsession_file_download\nFile downloaded from R session to browser; data field contains file name\n\n\nsession_quit\nR session exiting due to user quit\n\n\nsession_exit\nR session exited\n\n\nsession_admin_suspend\nAdministrator attempt to suspend R session; data field contains administrative user who initiated the event\n\n\nsession_admin_terminate\nAdministrator attempt to terminate R session ; data field contains administrative user who initiated the event\n\n\n\nThe default format for the log file is CSV (Comma Separated Values). It’s also possible to write the data to Newline Delimited JSON by using the audit-r-sessions-format option. For example:\naudit-r-sessions-format=json\nNote that when using the JSON format the entire file is not a valid JSON object but rather each individual line is one. This follows the Newline Delimited JSON specification supported by several libraries including the R jsonlite package.\n\n\nStorage Options\nYou can customize both the location where audit data is written as well as the maximum amount of R session event data to log (by default this is 1 GB). To specify the root directory for audit data you use the audit-data-path setting. For example:\n# /etc/rstudio/rserver.conf\naudit-data-path=/audit-data\nNote that this path affects the location of both R console auditing and R session auditing data.\nTo specify the maximum amount of R session event data to log you use the audit-r-sessions-limit-mb setting. For example:\n# /etc/rstudio/rserver.conf\naudit-r-sessions-limit-mb=2048\nThe default maximum R session event log file size is 1 GB (1024 MB). To configure no limit to the size of files which can be written you set the value to 0, for example:\n# /etc/rstudio/rserver.conf\naudit-r-sessions-limit-mb=0\nIf you wish for RStudio to automatically roll the log files once the maximum size is reached, set the audit-r-sessions-limit-months setting. The default is set to 13 months. To set it manually, for example:\n# /etc/rstudio/rserver.conf\naudit-r-sessions-limit-months=13\nThis will cause log files to be rolled over once the maximum size is reached, and only thirteen months of data will be kept. We do not recommend you change this setting if using named user licenses.\nNote that if the month limit is not set, then log files will not be rolled automatically. This means that you should either create a scheduled (e.g. cron) job to periodically move the file off the server onto auxiliary storage and/or ensure that the volume that it is stored on has sufficient capacity.\nIn any case, the amount of data written to the R session event log file is not large (less than 1 KB per session) so a large number of session events can be stored within the default 1 GB maximum log file size."
  },
  {
    "href": "sample_python.html#sample-code",
    "title": "RStudio Workbench Administration",
    "section": "Sample code",
    "text": "xs = [x for x in range(10)]\n\nprint(*(f'{x} squared is {x^2}.' for x in xs), sep='\\n')\n\n0 squared is 2.\n1 squared is 3.\n2 squared is 0.\n3 squared is 1.\n4 squared is 6.\n5 squared is 7.\n6 squared is 4.\n7 squared is 5.\n8 squared is 10.\n9 squared is 11."
  },
  {
    "href": "sample_python.html#sample-plot",
    "title": "RStudio Workbench Administration",
    "section": "Sample plot",
    "text": "import matplotlib.pyplot as plt\nfrom matplotlib.colors import BoundaryNorm\nfrom matplotlib.ticker import MaxNLocator\nimport numpy as np\n\nZ = np.random.rand(6, 10)\nx = np.arange(-0.5, 10, 1) \ny = np.arange(4.5, 11, 1)  \n\nfig, ax = plt.subplots();\nax.pcolormesh(x, y, Z);"
  },
  {
    "href": "sample_python.html#ipyleaflet-example",
    "title": "RStudio Workbench Administration",
    "section": "IPyLeaflet Example",
    "text": "from ipyleaflet import Map\n\nMap(center=[34.6252978589571, -77.34580993652344], zoom=10)\n\n\n{\"model_id\":\"2d499e1a148e4a4ea77b9a2d1302395b\",\"version_major\":2,\"version_minor\":0}"
  },
  {
    "href": "r_package_dependencies/r_package_dependencies.html",
    "title": "RStudio Workbench Administration",
    "section": "",
    "text": "R Package Dependencies\nThe following is a list of all of the R packages RStudio depends on in some way. None of these packages are necessary for the basic operation of RStudio; they all enable additional IDE functionality as noted in in Features.\nThis information is also available in the IDE itself using the rstudioapi package as follows:\nrstudioapi::getRStudioPackageDependencies()\nNote that some of these packages may require a higher version of R than RStudio itself requires; consult the individual package’s documentation for more details.\n\n\n\n\n\n\n\n\n\nName\nVersion\nFeatures\n\n\n\n\nbase64enc\n0.1-3\nR Markdown\n\n\ncrayon\n1.3.4\nPlumber R APIs, Shiny\n\n\ncurl\n4.2\nPublishing\n\n\nDBI\n0.8\nDatabase Interface, RSQLite\n\n\ndevtools\n1.11.1\nR Unit Testing\n\n\ndigest\n0.6\nR Markdown, Shiny\n\n\nevaluate\n0.13\nR Markdown\n\n\nglue\n1.3.0\nR Markdown\n\n\nhaven\n0.2.0\nSPSS/SAS/Stata Import\n\n\nhighr\n0.3\nR Markdown\n\n\nhtmltools\n0.3.6\nR2D3, R Markdown, Shiny, Visual Profiling\n\n\nhtmlwidgets\n1.2\nR2D3, Visual Profiling\n\n\nhttpuv\n1.3.3\nPlumber R APIs, Shiny\n\n\njsonlite\n0.9.19\nR2D3, Plumber R APIs, Publishing, R Markdown, Shiny, Python/Reticulate, JSON Import, Mongo DB Import, Visual Profiling\n\n\nkeyring\n1.1.0\nSecret Management\n\n\nknitr\n1.22\nR Markdown\n\n\nlater\n0.7.2\nShiny\n\n\nlearnr\n0.10.1\nRStudio Tutorials\n\n\nmagrittr\n1.5\nR Markdown\n\n\nmarkdown\n0.7\nR Markdown\n\n\nmime\n0.5\nR Markdown, Shiny\n\n\nminiUI\n0.1.1\nShiny Add-Ins\n\n\nmongolite\n0.8\n\n\n\nodbc\n1.1.6\nODBC Connections\n\n\nopenssl\n1.0.2\nPublishing\n\n\npackrat\n0.4.8-1\nPackrat, Publishing\n\n\nplumber\n1.0.0\nPlumber R APIs\n\n\npng\n0.1-7\nPython/Reticulate\n\n\nprofvis\n0.3.2\nVisual Profiling\n\n\npromises\n1.0.1\nShiny\n\n\nr2d3\n0.2.2\nR2D3\n\n\nR6\n2.0\nPlumber R APIs, Shiny\n\n\nragg\n0.1.5\nR Interface to AGG\n\n\nRcpp\n0.11.5\nShiny, CSV Import, SPSS/SAS/Stata Import, Excel Import\n\n\nreadr\n1.1.0\nCSV Import\n\n\nreadxl\n0.1.0\nExcel Import\n\n\nrenv\n0.9.3\nrenv\n\n\nreticulate\n1.20\nPython/Reticulate\n\n\nrJava\n0.4-15\nJDBC Import\n\n\nRJDBC\n0.2-5\nJDBC Import\n\n\nrlang\n0.2.2\nShiny\n\n\nrmarkdown\n2.5\nR Markdown\n\n\nRODBC\n1.3-12\nODBC Import\n\n\nroxygen2\n6.0.1\nR Package Documentation\n\n\nrsconnect\n0.8.16\nPublishing\n\n\nRSQLite\n2.1.0\nRSQLite\n\n\nrstan\n2.15.1\nStan\n\n\nrstudioapi\n0.11\nPublishing, Shiny Add-Ins, ODBC Connections, RStudio Tutorials\n\n\nshiny\n1.2.0\nShiny\n\n\nshinytest\n1.3.1\nShiny Tests\n\n\nsourcetools\n0.1.5\nShiny\n\n\nstringi\n0.3.0\nPlumber R APIs, R Markdown\n\n\nstringr\n1.2.0\nR Markdown, Visual Profiling\n\n\ntestthat\n2.0.0\nR Unit Testing\n\n\ntinytex\n0.16\nR Markdown, TinyTeX\n\n\nxfun\n0.15\nR Markdown\n\n\nxml2\n1.2.0\nXML Import\n\n\nxtable\n1.7\nShiny\n\n\nyaml\n2.1.19\nPublishing, R Markdown, Visual Profiling"
  },
  {
    "href": "tutorial_api/configuration.html#configuration",
    "title": "RStudio Workbench Administration",
    "section": "Configuration",
    "text": "This section describes how to configure the example page, shown below. The upper-region has controls for experimenting with the Tutorial API calls, and the lower region is an <iframe> hosting RStudio Workbench.\n\n\n\nExample Page\n\n\n\nAllow IFrame\nFor security reasons, RStudio will not load inside a browser frame (such as an IFrame) by default. You can modify this behavior by using the www-frame-origin option. See Frame Origin for full details.\nTo enable the Tutorial API example page to host RStudio Workbench on a non-production localhost server, do the following:\n# /etc/rstudio/rserver.conf\nwww-frame-origin=http://localhost:8080\n\n\n\n\n\n\nNote\n\n\n\nIf the www-frame-origin option is set to same or any instead of a URI, you must add the following setting with the actual URI:\n# /etc/rstudio/rsession.conf\ntutorial-api-client-origin=http://localhost:8080\n\n\n\n\nEnable API Calls from Host Page\nTo enable calling the Tutorial APIs from the hosting page:\n# /etc/rstudio/rsession.conf\ntutorial-api-enabled=1\n\n\nEnable Callbacks from RStudio to Host Page\nRStudio may optionally notify the hosting page of certain events using the JavaScript PostMessage mechanism.\nThe receiver is responsible for parsing, interpreting, and reacting to the value of the callbacks. Any JavaScript running in the context of the IDE IFrame could do an arbitrary SendMessage to the parent (in addition to those being generated by the RStudio IDE JavaScript). The host page should ensure the response string is valid JSON, and follows one of the patterns described in Tutorial API Callbacks.\nTo enable callbacks:\n# /etc/rstudio/rsession.conf\ntutorial-api-parent-notify-enabled=1\n\n\nDisable RStudio Workbench Home Page\nThe Tutorial API cannot be used to manipulate the RStudio Workbench Home Page. To disable the home page:\n# /etc/rstudio/rserver.conf\nserver-user-home-page=0\n\n\n\n\n\n\nNote\n\n\n\nThe server-user-home-page setting is automatically forced on if Job Launcher sessions are enabled via launcher-sessions-enabled=true in /etc/rstudio/rserver.conf.\n\n\n\n\nDisable Multiple Session Support\nEven with the Home Page disabled, a user can still open new sessions via Session / New Session which will open a new IDE instance outside of the host page. To prevent this:\n# /etc/rstudio/rserver.conf\nserver-multiple-sessions=0\nIf multiple sessions are disabled, the Home Page is automatically turned off, so not necessary to include both settings.\n\n\n\n\n\n\nNote\n\n\n\nThe server-multiple-sessions setting is automatically forced on when Job Launcher sessions are enabled via launcher-sessions-enabled=true in /etc/rstudio/rserver.conf.\n\n\n\n\nServe the Example Page\nServe the folder /usr/lib/rstudio-server/extras/tutorial with a web server. For example, change to that directory in a terminal and run this command:\npython -m SimpleHTTPServer 8080\nLoad http://localhost:8080/demo.htm in a web browser and you should see the page shown earlier."
  },
  {
    "href": "tutorial_api/tutorial_api.html#tutorial-api",
    "title": "RStudio Workbench Administration",
    "section": "Tutorial API",
    "text": "The Tutorial API provides an interface for driving automated interactions with the RStudio IDE. The Tutorial API assumes that RStudio is hosted within an <iframe> with the hosting page content surrounding it (e.g. in a sidebar).\nThe hosting <iframe> must be connected to the DOM and have non-zero dimensions (including not having the display: none style) when the IDE is loaded into it.\nThe API supports a variety of interactions with the IDE including typing console input, opening source files, opening projects, creating projects, showing help topics, and executing arbitrary R code.\nThis document describes the basic workings of the Tutorial API, and related settings. A simple example page is provided to demonstrate invoking the APIs.\nThe Tutorial API files are installed with RStudio Workbench in /usr/lib/rstudio-server/extras/tutorial.\n\ndemo.htm is an example host page\nrstudio.js is used by a hosting page to interact with the Tutorial API; always use the version of rstudio.js that came with the installed version of RStudio Workbench and ensure it is cache-busted to prevent web browsers from using an older cached version (one option would be to rename it and reference it via that new name, e.g. rstudio001.js)\n\n\n\n\n\n\n\nImportant\n\n\n\nThese instructions, and the example page itself, assume the following regarding the domains utilized:\n\nThe demo host page is served from domain http://localhost:8080\nThe RStudio IDE is served from domain http://localhost:8787\n\nIf the IDE is being served from a different domain than http://localhost:8787 edit the demo.htm file and change all instances of http://localhost:8787 to the actual domain where the IDE is available."
  },
  {
    "href": "tutorial_api/tutorial_api_methods.html#tutorial-api-methods",
    "title": "RStudio Workbench Administration",
    "section": "Tutorial API Methods",
    "text": "Methods are asynchronous and do not directly return a result.\nIf Report Result is true below then that API will attempt to invoke a success or error callback when it completes, but this is never guaranteed.\nMethods which report a result take an optional final string parameter callerID which will be returned in both success and error callbacks. This can be used to correlate calls and responses.\nThe RStudio object supports the following methods:\n\n\n\n\n\n\n\n\nMethod\nDescription\nReports Result\n\n\n\n\nisReady()\nIs the RStudio API available yet? (has the IDE loaded)\nNo\n\n\nconsoleInput(code)\nType input in the R console and execute it.\nNo\n\n\nconsoleClear()\nClear all previous input and output from the console.\nNo\n\n\nconsoleMaximize()\nMaximize the console so it occupies the full height of the IDE.\nNo\n\n\nexecuteR(code)\nExecute arbitrary R code within the global environment.\nNo\n\n\nopenFile(file, location)\nOpen the specified source file and (optionally) navigate it to a specific location. The location parameter can either be a line number (e.g. 42) or a regular expression delimited by / (e.g. /foo/).\nNo\n\n\nhelpTopic(topic)\nNavigate the help pane to a topic. The topic should be a namespace qualified reference to package documentation (e.g. graphics::plot). Note that help topics defined within the base package do not need qualification.\nNo\n\n\nhelpDoc(doc)\nShow a markdown (.md) or R Markdown (.Rmd) document within the help pane.\nNo\n\n\nsaveAllSourceDocs()\nSave all unsaved source documents.\nNo\n\n\nquitSession()\nQuit session. User cannot cancel but is prompted to save files and workspace if needed.\nNo\n\n\ncreateProjFromGit(repoUrl, projDir, parentDir, [callerID])\nClone a project from Git and open it.\nYes\n\n\ncreateNewProj(projDir, parentDir, createRepo, [callerID])\nCreate and open a new project.\nYes\n\n\nopenProj(projFile, [callerID])\nOpen an existing project, can specify existing .Rproj, or just the folder.\nYes\n\n\ngetState([callerID])\nRequest info on current RStudio IDE state.\nYes"
  },
  {
    "href": "tutorial_api/tutorial_api_methods.html#example-calls",
    "title": "RStudio Workbench Administration",
    "section": "Example Calls",
    "text": "Here are some sample JavaScript calls, followed by the response JSON.\n\nClone project from github and open it (with callerID = ‘abcd’)\ncreateProjFromGit('https://github.com/rstudio/rstudioapi', 'rstudioapi', '~/R', 'abcd');\n{\n  \"message\":\"success\",\n  \"api\":\"createProjFromGit\",\n  \"result\":\"\",\n  \"callerID\":\"abcd\"\n}\n\n\nCreate an new project but don’t create a git repo (no callerID)\ncreateNewProj('myproj', '~/R', false);\n{\n  \"message\":\"success\",\n  \"api\":\"createNewProj\",\n  \"result\":\"\"\n}\n\n\nTry to open a project that doesn’t exist\nopenProj('~/myproj', 'abcd');\n{\n  \"message\":\"error\",\n  \"api\":\"openProj\",\n  \"result\":\"Unable to find .Rproj file in [~/myproj]\",\n  \"callerID\":\"abcd\"\n}"
  },
  {
    "href": "tutorial_api/tutorial_api_callbacks.html#tutorial-api-callbacks",
    "title": "RStudio Workbench Administration",
    "section": "Tutorial API Callbacks",
    "text": "As seen in the examples above, the callback returns JSON. The following are examples of calls that trigger callbacks.\n\n\n\n\n\n\n\n\nMethod\nDescription\nExample payload\n\n\n\n\ngetState\nresponse from getState\nSee examples below\n\n\nerror\na prior API call failed\n{“message”: “error”, “api”: “createProjFromGit”, “result”: “access denied”, “callerID”: “abcd”}\n\n\nsuccess\na prior API call succeeded\n{“message”: “success”, “api”: “createProjFromGit”, “callerID”: “abcd”}\n\n\n\nThere are also callbacks sent directly by RStudio (i.e. not in response to Tutorial API calls).\n\n\n\n\n\n\n\n\nMethod\nDescription\nExample payload\n\n\n\n\nfileSave\ncontents of a file loaded in RStudio IDE were saved (including auto-save of content and/or metadata)\n{“message”: “fileSave”}\n\n\nsessionDisconnect\nconnection between RStudio IDE and its rsession process was closed\n{“message”: “sessionDisconnect”}\n\n\nsessionSuspend\nthe rsession process has been suspended\n{“message”: “sessionSuspend”}"
  },
  {
    "href": "tutorial_api/tutorial_api_callbacks.html#getstate",
    "title": "RStudio Workbench Administration",
    "section": "getState",
    "text": "The getState() method returns the path to the currently loaded .Rproj (if any) and any git remotes.\nThe results come via the callback. Here are some examples.\n\nProject with remotes\n{\n  \"message\": \"getState\",\n  \"callerID\": \"abcd\",\n  \"project\": \"~/aaa/aaa.Rproj\",\n  \"remotes\": [\n    {\n      \"active\": true,\n      \"remote\": \"origin\",\n      \"type\": \"fetch\",\n      \"url\": \"https://github.com/rstudio/aaa\"\n    },\n    {\n      \"active\": true,\n      \"remote\": \"origin\",\n      \"type\": \"push\",\n      \"url\": \"https://github.com/rstudio/aaa\"\n    }\n  ]\n}\n\n\nProject with no remotes\n{\n  \"message\": \"getState\",\n  \"callerID\": \"abcd\",\n  \"project\": \"~/localproj/localproj.Rproj\",\n  \"remotes\": []\n}\n\n\nNo project and no remotes\n{\n  \"message\": \"getState\",\n  \"callerID\": \"abcd\",\n  \"project\": null,\n  \"remotes\": []\n}"
  },
  {
    "href": "tutorial_api/overview.html#overview",
    "title": "RStudio Workbench Administration",
    "section": "Overview",
    "text": "The Tutorial API provides an interface for driving automated interactions with the RStudio IDE. The Tutorial API assumes that RStudio is hosted within an <iframe> with the hosting page content surrounding it (e.g. in a sidebar).\nThe hosting <iframe> must be connected to the DOM and have non-zero dimensions (including not having the display: none style) when the IDE is loaded into it.\nThe API supports a variety of interactions with the IDE including typing console input, opening source files, opening projects, creating projects, showing help topics, and executing arbitrary R code.\nThis document describes the basic workings of the Tutorial API, and related settings. A simple example page is provided to demonstrate invoking the APIs.\nThe Tutorial API files are installed with RStudio Workbench in /usr/lib/rstudio-server/extras/tutorial.\n\ndemo.htm is an example host page\nrstudio.js is used by a hosting page to interact with the Tutorial API; always use the version of rstudio.js that came with the installed version of RStudio Workbench and ensure it is cache-busted to prevent web browsers from using an older cached version (one option would be to rename it and reference it via that new name, e.g. rstudio001.js)\n\n\n\n\n\n\n\nImportant\n\n\n\nThese instructions, and the example page itself, assume the following regarding the domains utilized:\n\nThe demo host page is served from domain http://localhost:8080\nThe RStudio IDE is served from domain http://localhost:8787\n\nIf the IDE is being served from a different domain than http://localhost:8787 edit the demo.htm file and change all instances of http://localhost:8787 to the actual domain where the IDE is available."
  },
  {
    "href": "tutorial_api/interface.html#interface",
    "title": "RStudio Workbench Administration",
    "section": "Interface",
    "text": "You can access the Tutorial API by including rstudio.js within your host page. This will enable you to instantiate an RStudio object that has a connection to the RStudio IDE within an IFrame. For example, if the IDE were hosted in an IFrame as follows:\n<iframe id=\"rstudio\" src=\"http://localhost:8787\"></iframe>\nThen you would instantiate an RStudio object as follows:\nvar RStudio = new RStudio(document.getElementById(\"rstudio\"), \n                          \"http://localhost:8787\",\n                          function() { // onReady callback\n                             console.log(\"API is ready!\");\n                          },\n                          function(responseJSON) { // parent-notify callback\n                             console.log(responseJSON);\n                          });\nThe third argument is a callback that will be invoked once the RStudio API is ready to be called (i.e. once the IDE has loaded). Note that you should be sure to instantiate this object before the IFrame containing the IDE is fully loaded (if you don’t then you might miss the onReady callback). The best way to do this is to either:\n\nCreate the object immediately after defining the IFrame within the host page; or\nMore conservatively, create the IFrame, then create the object, then provide the src to the IFrame (this is however almost certainly not necessary and #1 should suffice).\n\nThe fourth argument is a callback that will be invoked when certain events described below in Tutorial API Callbacks are emitted by the IDE. These are only emitted if tutorial-api-parent-notify-enabled=1 was set as described earlier. The response will be a text string in JSON format, as described below in Tutorial API Callbacks."
  },
  {
    "href": "r_sessions/pam_sessions.html#pam-sessions",
    "title": "RStudio Workbench Administration",
    "section": "PAM Sessions",
    "text": "RStudio Workbench uses PAM (Pluggable Authentication Modules) for both user authentication as well to establish the environment and resources available for R sessions. This is accomplished using the PAM session API. PAM sessions are used for a variety of purposes:\n\nTo initialize environment variables\nTo automatically create local users after authentication or authorization against a directory server.\nTo mount remote drives\nTo initialize and destroy Kerberos tickets\n\nThis section explains how to configure and customize PAM sessions with RStudio Workbench.\n\nSession PAM Profile\nFor PAM authentication RStudio Workbench uses the either the /etc/pam.d/other profile (Debian/Ubuntu) or /etc/pam.d/rstudio profile (RedHat/CentOS). However, for launching R sessions a different PAM profile is used. This is because the launching of R sessions may not coincide with authentication (e.g. returning to the site with login credentials cached in a cookie or resuming a suspended session). Therefore, the PAM directive that enables authentication with root privilege only (auth sufficient pam_rootok.so) needs to be present in the PAM profile.\n\n\n\n\n\n\nNote\n\n\n\nSome sssd configuration additionally require PAM account verification as root to present on both the auth and account directives in the PAM profile (auth sufficient pam_rootok.so and account sufficient pam_rootok.so). Be sure to include this if you see errors when starting new R sessions.\n\n\nThe behavior that RStudio Workbench requires is essentially the same as that of the su command (impersonation of a user without a password). Therefore by default RStudio Workbench uses the /etc/pam.d/su profile for running R sessions.\nThe session PAM profile itself is also run whenever the user accesses the home page. Regardless of where the session actually runs (such as on another machine if using Job Launcher sessions), the PAM profile is executed on the RStudio Workbench instance itself when opened via the home page.\n\nCreating a Custom Profile\nThe /etc/pam.d/su profile has different default behavior depending upon your version of Linux and local configuration. Depending upon what type of behavior you want associated with R sessions (e.g. mounting of disks, setting of environment variables, enforcing of resource limits, etc.) you’ll likely want to create a custom profile for R sessions. For example, if you wanted to use a profile named rstudio-session you would add this to the configuration file:\n# /etc/rstudio/rserver.conf\nauth-pam-sessions-profile=rstudio-session\nHere is in turn what the custom profile might contain in order to enable a few common features of PAM sessions (this is based on a modified version of the default su profile on Ubuntu):\n# /etc/pam.d/rstudio-session\n# This allows root to su without passwords (this is required)\nauth       sufficient pam_rootok.so\n\n# This module parses environment configuration file(s)\n# and also allows you to use an extended config\n# file /etc/security/pam_env.conf.\n# parsing /etc/environment needs \"readenv=1\"\nsession    required   pam_env.so readenv=1\n\n# Locale variables are also kept into /etc/default/locale in etch\n# reading this file *in addition to /etc/environment* does not hurt\nsession    required   pam_env.so readenv=1 envfile=/etc/default/locale\n\n# Enforces user limits defined in /etc/security/limits.conf\nsession    required   pam_limits.so\n\n# The standard Unix authentication modules\n@include common-auth\n@include common-account\n@include common-session\n\n\nCustom Profile with Passwords\nNote that in the above configuration we rely on pam_rootok.so to enable authentication without a password. This is necessary because RStudio doesn’t retain the passwords used during the authentication phase.\nIn some situations however passwords are important for more than just authentication. PAM profiles support a use_first_pass directive to forward passwords used during authentication into other modules (for example, to request a Kerberos ticket with pam_krb5.so or to mount an encrypted or remote drive with pam_mount.so). For these scenarios RStudio Workbench supports an optional mode to retain passwords after login and then forward them into the PAM session profile. This is enabled via the auth-pam-sessions-use-password setting:\n# /etc/rstudio/rserver.conf\nauth-pam-sessions-use-password=1\n\n\n\n\n\n\nNote\n\n\n\nThis setting is only available when using PAM authentication.\n\n\nIn this scenario you should remove the auth sufficient pam_rootok.so directive and replace it with whatever authentication directives apply in your environment. You can then employ the use_first_pass directive to forward the password as necessary to other modules.\nFor example, here’s a very simple RedHat/CentOS PAM configuration file that uses system default authentication and forwards the password into the pam_mount.so module. Note that we are no longer using pam_rootok.so because the password is now available when the session is created.\n# /etc/pam.d/rstudio-session\n# Auth/account (use system auth and forward password to pam_mount)\nauth     include    system-auth\nauth     optional   pam_mount.so use_first_pass\naccount  required   pam_unix.so\n\n# Session (read environment variables and enforce limits)\nsession  required   pam_env.so readenv=1\nsession  required   pam_env.so readenv=1 envfile=/etc/default/locale\nsession  required   pam_limits.so\nNote that this configuration requires that RStudio Workbench retain user passwords in memory. This retention is done using industry best-practices for securing sensitive in-memory data including disabling ptrace and core dumps, using mlock to prevent paging into the swap area, and overwriting the contents of memory prior to freeing it. When using Job Launcher, the passwords are securely transmitted in encrypted form to different nodes or containers running the R sessions.\n\n\n\n\n\n\nNote\n\n\n\nLauncher will require TLS/SSL to be configured in order to allow PAM profiles with passwords to be used.\n\n\n\n\nMore Resources\nIf you want to learn more about PAM profile configuration the following are good resources:\n\nhttp://www.linux-pam.org/Linux-PAM-html/Linux-PAM_SAG.html\nhttp://linux.die.net/man/8/pam.d\nhttp://www.linuxjournal.com/article/2120\nhttp://www.informit.com/articles/article.aspx?p=20968\n\n\n\n\nPAM Session Cleanup\nBy default, RStudio Workbench does not close PAM sessions when their associated R process exits. This is because PAM sessions often initialize and maintain resources that require more persistence that the lifetime of a single R session (e.g. mounted drives, Kerberos tickets, etc.). If a user has multiple active R sessions then closing the PAM session associated with one of them might unmount a drive or revoke a ticket that is still required by another R session.\nIt is however possible to manually close the PAM session associated with an R session by force suspending it. This can be accomplished in one of two ways:\n\nBy pressing the Suspend button on the Sessions page of the Administrative Dashboard.\nBy executing a force-suspend or force-suspend-all command as described in Suspending Sessions.\n\nIf you prefer that PAM sessions be closed whenever their associated R session exits you can use the auth-pam-sessions-close setting. For example:\n# /etc/rstudio/rserver.conf\nauth-pam-sessions-close=1\nNote that if you specify this setting be aware that depending upon what resources are managed by your PAM sessions it may be incompatible with users running multiple concurrent R sessions (because for example a drive might be unmounted from underneath a running session). In this case you may wish to disable support for multiple R sessions (see the section on Multiple R Sessions for details on how to do this).\n\n\nPAM Sessions with the Job Launcher\nWhen launching sessions via the Job Launcher, you must also configure PAM on any Launcher nodes (for Local or Slurm plugins) and within any containers used (if using Kubernetes). That’s because PAM sessions are needed at the point where the R session is run, which for Launcher means some machine/container other than the one where RStudio Workbench is running. The PAM configuration is still required at the RStudio Workbench machine for authentication purposes.\nLauncher session PAM profiles run with different permissions at different stages of the session launch pipeline. When a user visits the RStudio home page for the first time, their PAM session is initiated with root privilege, allowing the session to rely on pam_rootok.so, as discussed in the previous sections, and it is opened on the RStudio Workbench instance itself. However, Job Launcher sessions themselves never have true root privilege (unlike traditional session launches which have root privileges during early initialization), and thus cannot rely on pam_rootok.so. Their PAM sessions are opened on the actual instance where the session is running (e.g. a Kubernetes or Slurm node).\nIt is generally sufficient to simply do all your necessary setup, such as user directory creation, whenever the user accesses the home page for the first time. This means that you can rely on pam_rootok.so and do not need password forwarding. However, if you need to also ensure that PAM sessions are created when actual sessions are started (e.g., for Kerberos or pam_mount), you will need to enable auth-pam-sessions-use-password to forward the user’s PAM credentials to the session.\n\n\n\n\n\n\nNote\n\n\n\nWhen Kerberos or LDAP/Active Diretory are required for PAM sessions, individual Launcher nodes or Kubernetes containers will have to either join the Kerberos domain or be configured to use sssd for obtaining LDAP/AD users and groups.\n\n\nWhen forwarding credentials over a TCP connection, we require that Job Launcher connections be secured with SSL to prevent leaking of the credentials. Therefore, if auth-pam-sessions-use-password is set for Launcher sessions, you will also need to set launcher-use-ssl and configure the Job Launcher to use SSL (see the Job Launcher SSL Considerations section for more info).\nThe following sample configuration demonstrates forwarding of PAM user credentials to Job Launcher sessions. This is only recommended if it is absolutely necessary to start PAM sessions whenever Launcher sessions are started, and it is not sufficient to simply start a PAM session whenever the user accesses the homepage for the first time:\n# /etc/rstudio/rserver.conf\nlauncher-sessions-enabled=1\nlauncher-use-ssl=1\nauth-pam-sessions-enabled=1\nauth-pam-sessions-profile=rstudio\nauth-pam-sessions-use-password=1\nThe following sample configuration demonstrates a basic PAM setup where it is sufficient to only start PAM sessions when users visit the homepage, and thus no PAM sessions are started when Launcher sessions are started:\n# /etc/rstudio/rserver.conf\nlauncher-sessions-enabled=1\nauth-pam-sessions-enabled=1\nauth-pam-sessions-profile=rstudio\n\n\nDisabling PAM Sessions\nIf you don’t want RStudio Workbench to utilize PAM sessions you can disable this feature using the auth-pam-sessions-enabled setting. For example:\n# /etc/rstudio/rserver.conf\nauth-pam-sessions-enabled=0\n\n\n\n\n\n\nWarning\n\n\n\nWhen using sssd to automatically provision local system accounts using LDAP or Active Directory, RStudio relies on PAM sessions configured with pam_mkhomedir (or equivalent) to create the home directories of a user that has never logged into the server. Disabling PAM sessions in this scenario may cause permission errors when starting session unless other methods for creating users’ home directories are used.\n\n\n\n\n\n\n\n\nImportant\n\n\n\nPAM sessions are initially disabled by default when using RStudio Launcher to simplify its initial setup in a multi-node environment. However, many environments still require PAM sesssions and in those cases that needs to be explicitly enabled with Launcher."
  },
  {
    "href": "r_sessions/notifications.html#notifications",
    "title": "RStudio Workbench Administration",
    "section": "Notifications",
    "text": "Administrators can broadcast notifications to user sessions in real-time using the notifications.conf file located at /etc/rstudio/notifications.conf. This file comes by default with commented out entries that you can uncomment and use, and helps show you the available time and message formats.\nEach session monitors for changes in the notifications.conf file, and if a new notification is detected, it will be shown to the user at the appropriate time (as defined in the next section). All open sessions for a user will receive the notification, and they will continue to see the notification in any new sessions they open until the notification is acknowledged.\nModifying a notification will cause it to count as a new notification, so make sure to only save changes to the file when you’ve confirmed what you want the message to be and what time it should be displayed. Otherwise, the same message could be shown multiple times.\n\nnotifications.conf format\nThe notifications.conf file is a file consisting of multiple notification entries separated by a blank line. The following table lists the fields that are available for each notification entry in the file.\n\n\n\n\n\n\n\nStartTime\nThe start time at which the notification can start to be delivered. This must be a time-formatted field. This field is not required.\n\n\nEndTime\nThe end time at which the notification will no longer be delivered. This must be a time-formatted field. This field is required.\n\n\nMessage\nThe message content to show to the users. The message cannot have empty lines in it. This field is required.\n\n\n\nAn example notifications.conf file is shown below. For more information on the formatting of each field, see the subsequent sections.\n# /etc/rstudio/notifications.conf\nStartTime: 2017-08-30 09:00:00 -5:00\nEndTime: 2017-08-30 20:00:00 -05:00\nMessage: Please remember to shut down your computers at the end of the day.\n\nStartTime: 2017-05-30 05:55\nEndTime: 2017-06-13\nMessage: This is a test notification. Notifications can span\n   multiple lines by indenting the next line's message text.\n   Empty lines are not supported!\nIt is important that each entry consists of 2-3 fields as specified above (StartTime, EndTime, and Message). Each field must go on its own line. There should be no empty lines between field definitions.\nFor example, this is okay:\n# /etc/rstudio/notifications.conf\nStartTime: 2017-08-30 12:00:00 -5:00\nEndTime: 2017-08-30 20:00:00 -05:00\nMessage: Please remember to shut down your computers at the end of the day.\nBut this is not:\n# /etc/rstudio/notifications.conf\nStartTime: 2017-08-30 12:00:00 -5:00\n\nEndTime: 2017-08-30 20:00:00 -05:00\n\nMessage: Please remember to shut down your computers at the end of the day.\nThere must be one empty line (2 new line characters) in between separate notification entries.\nFor example, this is okay:\n# /etc/rstudio/notifications.conf\nStartTime: 2017-08-30 08:00:00 -5:00\nEndTime: 2017-08-30 20:00:00 -05:00\nMessage: Please remember to shut down your computers at the end of the day.\n\nStartTime: 2017-08-30 08:00:00 -5:00\nEndTime: 2017-08-30 20:00:00 -05:00\nMessage: Remember to drop off any borrowed equipment at Grace's office today only.\nBut this is not:\n#  /etc/rstudio/notifications.con\nStartTime: 2017-08-30 12:00:00 -5:00\nEndTime: 2017-08-30 20:00:00 -05:00\nMessage: Please remember to shut down your computers at the end of the day.\n\n\nStartTime: 2017-08-30 12:00:00 -5:00\nEndTime: 2017-08-30 20:00:00 -05:00\nMessage: Remember to drop off any borrowed equipment at Grace's office today only.\n\nTime format\nThe time format fields, StartTime and EndTime, must be in one of the following formats:\nYYYY-MM-DD\nYYYY-MM-DD hh:mm\nYYYY-MM-DD hh:mm:ss zh:zm\nThe following table shows the meaning of the format sections.\n\n\n\n\n\n\n\nYYYY\n4 digit year (example: 2017)\n\n\nMM\n2 digit month (example: 06)\n\n\nDD\n2 digit day (example: 28)\n\n\nhh\n2 digit hours (24 hour clock. example: 19)\n\n\nmm\n2 digit minutes (example: 15)\n\n\nss\n2 digit seconds (example: 59)\n\n\nzh\nTime zone hours offset (example: -06 for CST or -08 for PST)\n\n\nzm\nTime zone minutes offset (usually just 00, different for only a few timezones)\n\n\n\nIf no time is specified, the time will be set to 00:00:00 in the current server time zone for start times and 23:59:59 in the current server time zone for end times.\nIf no seconds are specified, they will be set to 00 and the time is interpreted in the current server time zone.\nNote that if you have sessions spanning multiple servers in different time zones and you want your notifications to display at a uniform time, you MUST manually set the timezone to what is appropriate. Otherwise, sessions in different time zones will see notifications in their local time.\nThe following table shows some example dates and how they would be formatted.\n\n\n\n\n\n\n\nJanuary 1st, 2020 at 6:00 PM in the server’s time zone\n2020-01-01 18:00\n\n\nJuly 31st, 2018 at midnight in the server’s time zone (for a start time)\n2018-07-31\n\n\nSeptember 23rd, 2019 at 23:59:59 in the server’s time zone (for an end time)\n2019-09-23\n\n\nNovember 30th, 2020 at 9:14:12 in Pacific Standard Time\n2020-11-30 09:14:12 -08:00\n\n\n\n\n\nMessage format\nThe message to deliver must be plain text and cannot have any empty lines. To start text on another line, simply indent the line as in the multiline example in the previous section."
  },
  {
    "href": "r_sessions/kerberos.html#kerberos",
    "title": "RStudio Workbench Administration",
    "section": "Kerberos",
    "text": "You can use PAM sessions to arrange for Kerberos tickets to be made available for use by R sessions. This is accomplished using the pam_sss PAM module. Note that you may need to install this module separately depending on which Linux distribution/version you are running.\n\nConfiguration\n\n\n\n\n\n\nNote\n\n\n\nYou should be sure to understand the previous section on PAM Sessions before attempting to modify your configuration to support Kerberos.\n\n\nThe following are simple examples of the pam_sss and sssd.conf configuration directives you would need to add to use Kerberos with RStudio. Note that the sssd Kerberos backend supports a large number of options, some of which may be required to get Kerberos working correctly in your environment. You should consult the documentation before proceeding to ensure you’ve specified all options correctly.\n\n\n\n\n\n\nImportant\n\n\n\nIf you are migrating your Kerberos settings from the now deprecated pam_krb5 to pam_sss, consult the pam_krb5 migration documentation for additional information.\n\n\nThe main PAM profile for RStudio should be modified to include the following pam_sss directives:\n# /etc/pam.d/rstudio\nauth       sufficient     pam_sss.so\naccount    required       pam_sss.so\nsession    requisite      pam_sss.so\nIn addition to modifying the main PAM profile, you will also need to create a custom PAM session profile for RStudio (as described in Creating a Custom Profile). This needs to include the appropriate pam_sss directives. For example:\n# /etc/pam.d/rstudio-session\nauth        required      pam_sss.so\naccount     [default=bad success=ok user_unknown=ignore] pam_sss.so\npassword    sufficient    pam_sss.so use_authtok\nsession     requisite     pam_sss.so\nNote that typically when you create a custom PAM session profile you include the auth sufficient pam_rootok.so directive. However, in the case of configuring for Kerberos authentication you do not want this directive, rather you need to specify that authentication is done by Kerberos using an explicit password as illustrated in the above example.\nTo ensure that the custom PAM session profile is used by RStudio Workbench and that PAM passwords are correctly forwarded to pam_sss you’ll also need to add the following entries to the rserver.conf config file:\n# /etc/rstudio/rserver.conf\nauth-pam-sessions-profile=rstudio-session\nauth-pam-sessions-use-password=1\nFinally, you will need to specify Kerberos settings in sssd.conf (usually located at /etc/sssd/sssd.conf). For more information on SSSD configuration, see the sssd.conf documentation and the sssd-krb5 documentation.\n# /etc/sssd/sssd.conf\n[sssd]\nservices = nss, pam\n\n# replace this with a comma-separated list of your configured SSSD domains\ndomains = TEST.EXAMPLE.COM\n\n[domain/TEST.EXAMPLE.COM]\n# can also be set to ad or local depending on your authentication setup\nid_provider = ldap\n\nauth_provider = krb5\n\n# replace with the name of your Kerberos realm\nkrb5_realm = TEST.EXAMPLE.COM\n\n# we recommend setting the debug level high to make troubleshooting easier\ndebug_level = 5\n\nkrb5_validate = true\n\n# note that RHEL-7 default to KERNEL ccaches, which are preferred in most cases to FILE\nkrb5_ccachedir = /var/tmp\n\nkrb5_keytab = /etc/krb5.keytab\nSome additional notes regarding configuration:\n\nThe debug setting in sssd.conf is not required however we recommend adding it as it makes troubleshooting much more straightforward.\nThe examples above are not complete examples but rather illustrations of the pam_sss and sssd.conf entries that need to be present. Your local environment may have many additional entries which you should ensure are also included as necessary.\n\nYou should be sure to suspend active R sessions and to restart RStudio after making configuration changes to ensure that the new settings are being used. You can do this as follows:\nsudo rstudio-server force-suspend-all\nsudo rstudio-server restart\n\n\nTesting and Troubleshooting\nAfter making the required configuration changes you should test your updated PAM configuration in isolation from RStudio using the pamtester utility as described in Diagnosing PAM Authentication Problems. The following command will test both authentication as well as issuing of Kerberos tickets:\nsudo /usr/lib/rstudio-server/bin/pamtester --verbose \\\n  rstudio-session <user> authenticate setcred open_session\nNote that you should substitute an actual local username for the <user> part of the command line.\nThe specifics of both PAM configuration and Kerberos configuration can vary substantially by environment. As a result correct configuration likely requires additional entries and options which this guide isn’t able to cover. Please refer to the documentation linked to in [More Resources] as well as the pam_krb5 for additional details."
  },
  {
    "href": "r_sessions/project_sharing.html#project-sharing",
    "title": "RStudio Workbench Administration",
    "section": "Project Sharing",
    "text": "Overview\nProject Sharing is a feature of RStudio Workbench that enables users to work together on RStudio projects. When enabled, a project owner may select any number of other RStudio Workbench users as project collaborators. RStudio Workbench manages the permissions of files in the project to ensure that all collaborators can access them, enables multiple collaborators to edit a file simultaneously, and lets collaborators see who else is working inside a project with them.\n\n\nPrerequisites\nDue to high latencies, use of EFS (Elastic File System) for project sharing directories within AWS is strongly discouraged. If EFS is used, RStudio will experience highly degraded performance. We recommend using a traditional NFSv3 or NFSv4 mount instead.\nThe following sections outline additional prerequisites that your file system must meet.\n\nAccess Control Lists\nTo use Project Sharing, the directories hosting the projects to be shared must be on a volume that supports Access Control Lists (ACLs). RStudio uses ACLs to grant collaborators access to shared projects; ordinary file permissions are not modified.\nInstructions for enabling ACLs vary by Linux distribution and filesystem type (see the Guide to enabling ACLs on Ubuntu or RedHat, for example). RStudio supports both NFSv3 (POSIX compatible) and NFSv4 ACLs.\n\n\nShared Projects Root Directory\nRStudio cannot grant access to shared projects in arbritary locations. This would lead to unintended changes to the file system ACLs.\nBy default only projects stored within the users’ home directories can be shared. If you want share projects in a different location you can configure RStudio with an additional root directory for all users:\n# /etc/rstudio/rserver.conf\nserver-project-sharing-root-dir=/projects\n\n\nProject Sharing and NFS\nIf you plan to use Project Sharing with NFS-mounted volumes, there are several caveats you should be aware of.\n\nWe recommend mounting NFS with the noac mount option. Without this option, NFS caches file attributes, so it may not be possible for users working simultaneously in a project to know whether they’re seeing each others’ latest changes. The noac option does reduce performance, however, so we recommend testing to choose the right trade off for your environment.\nSome features which automatically update when directory contents change will not update on NFS. For instance, users may need to manually refresh the Files pane to see new files added by collaborators.\nACL support on NFS is more complicated than ACL support on local file systems. Read ACLs on Linux NFS for a discussion of the issues; guidance for configuring specific NFS versions is provided below.\n\n\nDetermining NFS Version\nProject Sharing works with versions 3 and 4 of the NFS protocol. However, some additional configuration may be necessary depending on the NFS version and underlying filesystem. To determine your NFS client version, run the following command on your RStudio Workbench instance:\n$ nfsstat -m\nYou should see vers=3.0 in the output if you’re using NFSv3, and vers=4.0 if you’re using NFSv4. Extra RStudio configuration is required for NFSv4 clients (see below).\n\n\nNFSv3\nTo use NFSv3 access control lists, you will need to ensure that the filesystem is mounted with the acl attribute, and modify /etc/fstab if necessary to persist the attributes.\nNote that many Linux distributions now have ACLs enabled by default in which case no special configuration is required. You can use the tune2fs command to inspect the attributes with which your filesystem is mounted (user_xattr and acl are required for project sharing).\nOn most systems this is the default, so you need only ensure that noacl is not present. It’s also necessary for the file system on the NFS server to itself be appropriately configured for ACL support; see the section above on Access Control Lists for guidance. Not all file servers that support the NFSv3 protocol also support POSIX compatible ACLs.\nTo test for POSIX compatible ACLs, you can use the setfacl command as follows:\nsetfacl -m u:user2:x /home/user1/project\nwhere /home/user1/project is the full path to a directory owned by user1, and user2 is another valid user on the system.\nBecause many Linux systems support POSIX compatible ACLs on the native filesystem, RStudio uses them by default. You can also specify them explicitly as follows:\n# /etc/rstudio/rsession.conf\nnfs-acl-version=nfsv3\n\n\nNFSv4\nVersion 4 of the NFS protocol uses a very different permissions and ACL model from Version 3. Not all NFSv4 servers support or expose the NFSv4 ACL model, so check with the server administrator to determine whether the capability exists and/or can be enabled.\nTesting for support\nTo test NFSv4 ACL support, you can use the nfs4_setfacl command as follows:\nnfs4_setfacl -a A::user2@domain:rax /home/user1/project\nwhere /home/user1/project is the full path to a directory owned by user1, user2 is another valid user on the system, and domain is your system’s user domain. Verify that this command succeeds, and that the new ACL entry for user2@domain is visible when you retrieve it:\nnfs4_getfacl /home/user1/project\nThis presumes that your environment supports using user/domain pairs as security principals. While most environments do, there are two different ways to specify security principals in NFSv4 ACLs: by user name and domain (preferred) or user ID. RStudio can use either, but you’ll need to choose one appropriate for your network environment. If unsure, examine the output of the nfs4_getfacl operation described above. The security principal (the part after e.g., A:: on each line) will be displayed as either a large integer (UID) or in username@domain format.\nUsing user name and domain security principals\nNFSv4 ACLs differ from NFSv3 ACLs in that they can associate a domain with each user named in the access control list. This is typically the same as the domain part of the machine’s host name, but can be any string that the NFSv4 client and server agree on. On Linux systems, the domain can be set in /etc/idmapd.conf.\nTell RStudio the NFSv4 domain you want to use as follows:\n# /etc/rstudio/rsession.conf\nnfs-acl-version=nfsv4\nnfs4-principal-type=username\nnfs4-domain=mydomain.com\nUsing user ID security principals\nIn some environments, it may not be possible to resolve fully qualified user@domain security principals on all of the nodes running RStudio Workbench. This is common on e.g., Kubernetes nodes which are not domain-joined. In this case, it’s possible to use raw User ID (UID) values as security principals in the access control list. You can tell RStudio to write raw UIDs as security principals in NFSv4 access control lists as follows:\nnfs-acl-version=nfsv4\nnfs4-principal-type=uid\n\n\n\nUser Visibility\nProjects can only be shared with users with provisioned local system accounts unless LDAP is used for local account provisioning.\nThe RStudio user database is scanned to list Project Sharing users. This method of user scanning avoids making calls to the system to determine the available users, and prevents making queries to the system password database (such as LDAP). However, it only lists users who have previously logged in to RStudio. To instead show all users on the server, set the following configuration to scan the system password database:\n# /etc/rstudio/rsession.conf\nproject-sharing-enumerate-server-users=1\nWhen scanning via the system password database, if you’re using sssd with LDAP, you may need to enable user enumeration so that RStudio Workbench can search the directory to create a list of users you can share a project with. To do this, set the following in your sssd.conf file:\n[domain/<domainname>]\nenumerate = true\nAlternatively, the auth-required-user-group setting can be used. This setting allows RStudio Workbench to enumerate only the members of the named groups rather than the entire user directory. Therefore, if you cannot enable user enumeration on your LDAP provider, you can instead create a group containing all RStudio users and supply it as the auth-required-user-group.\nYou can read more about user enumeration in the sssd FAQ.\n\n\nShared Storage\nTo use Project Sharing, a directory must be specified to which all users on the server can read and write. It must also have the sticky bit set, so that users cannot remove each others’ content. In a single-server installation, RStudio uses this location by default:\n/var/lib/rstudio-server/shared-storage\nIn a load-balanced configuration, however, RStudio does not provide a default, so it is necessary to provision a path both visible to and writable by all users on the system (typically on the same filesystem on which home directories are mounted). This path can be supplied to RStudio Workbench via the server-shared-storage-path option, for example:\n# /etc/rstudio/rserver.conf\nserver-shared-storage-path=/shared/rstudio-server/shared-storage\nThe server-shared-storage-path option (described above) configures the path used for shared project storage. Note that this storage contains only links to shared projects, not the projects themselves, so requires a very small amount of physical storage.\n\nLauncher Considerations\nWhen configuring RStudio Workbench to work with the RStudio Job Launcher, it is recommended to configure the Shared Storage path in a location that will be reachable both by the RStudio Workbench instance and each Launcher Session. See the Launcher Sessions section for more details.\n\n\n\nProxy Settings\nIf you are running RStudio Workbench with a proxy, you’ll need to make sure that your proxy is correctly configured to pass websocket connections through in order for all Project Sharing features to work. See the Running with a Proxy section for more on this.\n\n\n\nDisabling Project Sharing\nProject Sharing is enabled by default however you can disable it using the server-project-sharing option, for example:\n# /etc/rstudio/rserver.conf\nserver-project-sharing=0"
  },
  {
    "href": "r_sessions/first_project_template.html#first-project-template",
    "title": "RStudio Workbench Administration",
    "section": "First Project Template",
    "text": "Overview\nRStudio allows you to specify a first project to automatically open for first time users of the system. To do this, set the session-first-project-template-path parameter in rsession.conf to an RStudio project directory. This directory will be copied into the user’s home directory upon first running the IDE, and will automatically open the project contained within. For example:\n# /etc/rstudio/rsession.conf\nsession-first-project-template-path=/etc/rstudio/welcome-project\nIn the example above, the project located within /etc/rstudio/welcome-project would be copied to users’ home directories when first starting RStudio, and the project file welcome-project.Rproj would be run.\nThe project file must be named the same as the directory it is contained in. For the above example, the project file must be named welcome-project.Rproj. In addition, you must ensure that the project directory is fully readable and executable by your users, as they will be copying the contents of the directory into their home directory.\nIf you copy an existing project to be used as a project template, ensure that you delete the RStudio metadata folders and files contained within the project directory. You will want to ensure you delete the following:\n\n.Rproj.user\n.Rhistory\n.RData\n\nIf you are creating the project template for the first time, the project (.Rproj) file must contain the version specifier at a minimum. For example:\n# welcome-project.Rproj\nVersion: 1.0\n\n\nProject DefaultOpenDocs\nProject files allow you to specify default documents that should be opened when a project is opened for the very first time. For example, you could have your welcome project bring up explanatory documents to help guide your users. To do this, add the DefaultOpenDocs line to the .Rproj file. For example:\n# welcome-project.Rproj\nVersion: 1.0\nDefaultOpenDocs: welcome.txt:firstMarkdown.Rmd\nThe DefaultOpenDocs parameters specifies a list of files to automatically be opened when the project is opened for the first time, separated by a : character. These files are relative paths to the project directory. Only files contained within the project directory can be opened."
  },
  {
    "href": "r_sessions/r_executable_and_libraries.html#r-executable-and-libraries",
    "title": "RStudio Workbench Administration",
    "section": "R Executable and Libraries",
    "text": "Locating R\nRStudio uses the version of R pointed to by the output of the following command:\n$ which R\nThe which command performs a search for the R executable using the system PATH. RStudio will therefore by default bind to the same version that is run when R is executed from a terminal.\nFor versions of R installed by system package managers this will be /usr/lib/R. For versions of R installed from source this will typically (but not always) be /usr/local/lib/R.\nIf you want to override which version of R is used then you can use the rsession-which-r setting. For example:\n# /etc/rstudio/rserver.conf\nrsession-which-r=/usr/local/bin/R\nNote that this change will not take effect until the server is restarted.\n\nUsing Multiple Versions of R\nThe section above describes how RStudio locates the global default version of R. It’s also possible to specify alternate versions of R either by user or by group. The [R Versions] section describes this in more detail.\n\n\n\nLocating Shared Libraries\nYou can add elements to the default LD_LIBRARY_PATH for R sessions (as determined by the R ldpaths script) by adding an rsession-ld-library-path entry to the server config file. This might be useful for ensuring that packages can locate external library dependencies that aren’t installed in the system standard library paths. For example:\n# /etc/rstudio/rserver.conf\nrsession-ld-library-path=/opt/someapp/lib:/opt/anotherapp/lib\nNote that this change will not take effect until the server is restarted.\n\n\nCustomizing Session Launches\n\nProfile Script Execution\nRStudio launches R sessions under a bash login shell. This means that prior to the execution of the R session the bash shell will read and execute commands from this file if it exists:\n/etc/profile\nAfter reading that file, it looks for the following files and reads and executes commands from the first one that exists and is readable (it’s important to note that only one of these files will be read and executed):\n~/.bash_profile\n~/.bash_login\n~/.profile\nIf you have further RStudio specific initialization logic (exporting environment variables, etc.) you can optionally create an R session specific profile script at:\n/etc/rstudio/rsession-profile\nIf it exists this script will be executed prior to the bash shell that launches the R session. This script must be executable by all RStudio users, so it is recommended that you set its file permissions to 755 via the following command:\nchmod 755 /etc/rstudio/rsession-profile\nIn some situations, you will not want to run user shell profile scripts. This is also a good way to troubleshoot the inability for sessions to launch, as it could indicate a conflict is occurring due to environment variables being set in the shell profiles. To disable execution of the shell profiles, set the rsession-no-profile option to 1 in /etc/rstudio/rserver.conf. For example:\n# /etc/rstudio/rserver.conf\nrsession-no-profile=1\n\n\nEnvironment Variables\nR sessions inherit environment variables that are explicitly exported from the profile scripts described above. It’s also possible to append paths to the LD_LIBRARY_PATH environment variable using the rsession-ld-library-path option (see previous section for details).\nAnother source of environment variables are PAM sessions. On Debian/Ubuntu systems, the default PAM profile run by RStudio includes the environment variables defined in /etc/security/pam_env.conf and /etc/environment. To learn more about setting environment variables with PAM you should consult the [PAM Sessions] section as well as the documentation on the pam_env module here: http://linux.die.net/man/8/pam_env.\n\n\nProgram Supervisors\nYou may also wish to run R sessions under a program supervisor that modifies their environment or available resources. You can specify a supervisor (and the arguments which control it’s behavior) using the rsession-exec-command setting. For example:\n# /etc/rstudio/rserver.conf\nrsession-exec-command=nice -n 10\nThis example uses the nice command to run all R sessions with a lower scheduling priority. See http://linux.die.net/man/1/nice for more details on nice. Note that for nice in particular it’s possible to accomplish the same thing using user and group profiles (and even specify a custom priority level per user or group). See the [User and Group Profiles] section for more details.\n\n\n\nDiagnosing Session Launch Failures\nRStudio Workbench allows you to launch sessions in a diagnostics mode to capture extended session launch information in the event that you run into problems when starting sessions. This mode captures the environment variables that are set by all of the profile scripts, loading of any modules, arguments passed to the session, and the exit code of the session and any stack trace information if the session crashes. To enable collection of this diagnostic data, set the rsession-diagnostics-enabled flag in /etc/rstudio/rserver.conf like below:\n# /etc/rstudio/rserver.conf\nrsession-diagnostics-enabled=1\nWhen this setting is enabled, all sessions that are started will create a diagnostics file that contains extended launch diagnostics under the /tmp directory by default. To change the location, use the rsession-diagnostics-dir to point to the desired directory, like so:\n# /etc/rstudio/rserver.conf\nrsession-diagnostics-dir=/tmp/diagnostics\nBe aware that this directory should be accessible by all users of the system. If it does not exist, RStudio will attempt to create it and set its permissions to Read/Write/Execute for everyone (file permissions of 777).\nTo diagnose containerized sessions (e.g. Kubernetes) launched via the Job Launcher, set rsession-diagnostics-dir to a shared folder mounted in the container via /etc/rstudio/launcher-mounts. Otherwise sessions may fail to launch due to the default location under /tmp not being available in the containers.\nStrace information can be included in the diagnostics file by adding the rsession-diagnostics-strace-enabled flag as shown below. Before using this setting, ensure that strace is installed and is available on your users’ path.\n# /etc/rstudio/rserver.conf\nrsession-diagnostics-enabled=1\nrsession-diagnostics-strace-enabled=1\nWe recommend that you send these files to RStudio support to aid in troubleshooting any session launch issues should they arise.\n\nSafe Mode\nTwo of the most common session startup problems are (1) oversized global R environments, which take a long time to load into memory when the session is resumed, and (2) problematic code in .Rprofile which takes too long to run or throws errors during startup.\nIn order to help eliminate these variables as the cause of session startup issues, RStudio can start sessions in Safe Mode. This mode starts the session without running .Rprofile or restoring the global environment. If a session takes too long to start, the user will be given the option to restart a session in Safe Mode.\nIt is also possible to control these features independently, which can be helpful when troubleshooting issues.\n\nSkipping Workspace Restoration\nTo skip workspace restoration (i.e. reloading the contents of the global environment), append ?restore_workspace=0 to the R session’s full URL. For example:\nhttps://yourcorp/rstudio/s/4cc57da229b59e81c306b/?restore_workspace=0\nNote that this will work only if the session is not already running. If you are currently waiting for the session to start, it is too late to try to skip workspace restoration, since it is already in progress. Kill or force-kill the session before restarting the attempt with the restore_workspace flag.\n\n\nOmitting .Rprofile\nTo skip executing .Rprofile, append run_rprofile=0 to the R session’s full URL. For example:\nhttps://yourcorp/rstudio/s/4cc57da229b59e81c306b/?run_rprofile=0\nJust like restore_workspace, this can only be used prior to the session starting.\nNote that Safe Mode is only available when RStudio itself is starting sessions, so it is not a useful troubleshooting technique when sessions are being run using the Job Launcher."
  },
  {
    "href": "r_sessions/package_installation.html#package-installation",
    "title": "RStudio Workbench Administration",
    "section": "Package Installation",
    "text": "You can customize the location of user packages installed from CRAN as well as the default CRAN repository. You can also configure the user-interface of the RStudio IDE to discourage end-user package installation in the case where packages are deployed centrally to a site library.\n\n\n\n\n\n\nImportant\n\n\n\nThe settings discussed in this section are specified in the /etc/rstudio/rsession.conf file (rather than the rserver.conf file previously referenced).\n\n\n\nUser Library\nBy default R packages are installed into a user-specific library based on the contents of the R_LIBS_USER environment variable (more details on this mechanism are here: http://stat.ethz.ch/R-manual/R-devel/library/base/html/libPaths.html).\nIt’s also possible to configure an alternative default for user package installation using the r-libs-user setting. For example:\n# /etc/rstudio/rsession.conf\nr-libs-user=~/R/library/%v\nR interprets %v to be the major.minor version of R; for example the above would cause R 3.6 to use a package library located at ~/R/library/3.6.\n\nUnversioned R Library\nR doesn’t guarantee ABI compatibility between minor versions, so when you use packages that include compiled code, you will want to ensure that each version of R has its own library. Otherwise, compiled code may cause crashes or other unexpected behavior when R is upgraded.\nHowever, if you do not use any compiled packages, you can share a library between R versions (e.g. just ~/R/library). This makes it possible to upgrade the major version of R on the server and have user’s packages continue to work.\n\n\nUpgrading R\nYou can read more about package library considerations when upgrading R in the following article: Upgrading to a New Version of R\n\n\n\nDiscouraging User Installations\nIt may be that you’ve configured RStudio Workbench with a site package library that is shared by all users. In this case you might wish to discourage users from installing their own packages by removing the package installation UI from the RStudio IDE. To do this you use the allow-package-installation setting. For example:\n# /etc/rstudio/rsession.conf\nallow-package-installation=0\nNote that this setting merely discourages package installation by removing user-interface elements. It’s still possible for users to install packages directly using the utils::install.packages function.\n\n\nCRAN Repositories\nRStudio uses the RStudio CRAN mirror (https://cran.rstudio.com) by default. This mirror is globally distributed using Amazon S3 storage so should provide good performance for all locales. You may however wish to override the default CRAN mirror. This can be done with the r-cran-repos settings. For example:\n# /etc/rstudio/rsession.conf\nr-cran-repos=http://cran.at.r-project.org/\nWhatever the default CRAN mirror is, individual users are still able to set their own default. To discourage this, you can set the allow-r-cran-repos-edit settings. For example:\n# /etc/rstudio/rsession.conf\nallow-r-cran-repos-edit=0\nNote that even with user editing turned off it’s still possible for users to install packages from alternative repositories by directly specifying the repos parameter in a call to install.packages.\nTo specify a list of CRAN repos, define a /etc/rstudio/repos.conf file containing the primary CRAN repo and named secondary repos. For example:\n# /etc/rstudio/repos.conf\nCRAN=https://cran.rstudio.com\nAustralia=https://cran.ms.unimelb.edu.au/\nAustria=https://lib.ugent.be/CRAN/\nTo change the location of repos.conf, use the r-cran-repos-file setting. For example, by adding to rsession.conf:\nr-cran-repos-file=/etc/rstudio/mirrors.conf\nOptional CRAN repos can be made available for users in RStudio with the r-cran-repos-url setting, this setting expects a URL to retrieve a configuration file containing named secondary repos. These secondary repos won’t be set by default, but rather, RStudio will list them to users to be manually added to their repo selection. For example:\nhttp://custom-domain/repos.conf\nAustralia=https://cran.ms.unimelb.edu.au/\nAustria=https://lib.ugent.be/CRAN/\nNotice that the allow-r-cran-repos-edit option can also be used to disallow secondary repos and that repos.conf overrides the r-cran-repos setting, if specified."
  },
  {
    "href": "r_sessions/workspace_management.html#workspace-management",
    "title": "RStudio Workbench Administration",
    "section": "Workspace Management",
    "text": "Default Save Action\nWhen a user exits an R session they need to choose whether to save their R workspace (i.e. .RData file). RStudio has global and per-project settings that control what happens when a workspace has unsaved changes. Possible values are:\n\nask – Ask whether to save the workspace file\nyes – Always save the workspace file\nno – Never save the workspace file\n\nThe default global setting is ask and the default project-level setting is derived from the current global setting (these options can be modified by end users via the Global Options and Project Options dialogs respectively).\nThe default global setting can also be changed via the session-save-action-default configuration parameter in the rsession.conf config file. For example, to change the default value to no you would use this:\n# /etc/rstudio/rsession.conf\nsession-save-action-default=no\nNote that this setting is specified in the rsession.conf config file and takes effect the next time a user launches an R session (rather than requiring a full restart of the server).\n\n\nSuspend and Resume\nWhen R sessions have been idle (no processing or user interaction) for a specified period of time (2 hours by default) RStudio suspends them to disk to free up server resources. When the user next interacts with their session it is restored from disk and the user resumes right back where they left off. This is all done seamlessly such that users aren’t typically aware that a suspend and resume has occurred.\n\nSession Timeout\nTo configure the amount of idle time to wait before suspending sessions you can use the session-timeout-minutes setting in the /etc/rstudio/rsession.conf file. For example:\n# /etc/rstudio/rsession.conf\nsession-timeout-minutes=360\nThe default value if none is explicitly specified is 120 minutes.\n\n\n\n\n\n\nImportant\n\n\n\nThis setting and a few others discussed in this section are specified in the /etc/rstudio/rsession.conf file (rather than the rserver.conf file previously referenced).\n\n\nThere are some conditions where an R session will not be suspended, these include:\n\nWhen a top-level R computation is running\nWhen the R prompt is not in it’s default state (e.g. during a debugging session)\n\nYou can also specify that R sessions should never be suspended by setting the session-timeout-minutes to zero. For example:\n# /etc/rstudio/rsession.conf\nsession-timeout-minutes=0\nYou can also set session timeouts on a per-user or per-group basis, see the User and Group Profiles section for details.\nIf you simply want the session process to quit (and lose all unsaved work in the process) instead of suspending to disk, you can turn the session-timeout-suspend option off, like so:\nsession-timeout-minutes=90\nsession-timeout-suspend=0\nThe above example will quit idle sessions after 90 minutes, discarding any unsaved data.\n\n\nForcing Suspends\nYou can force the suspend of individual sessions or even all sessions on the server. You can do this directly from the main page of the Administrative Dashboard or from the system shell as follows:\n$ sudo rstudio-server force-suspend-session <pid>\n$ sudo rstudio-server force-suspend-all\n\n\nResume and .Rprofile\nBy default the Rprofile.site and .Rprofile files are not re-run when a session is resumed (it’s presumed that all of their side-effects are accounted for by simply restoring loaded packages, options, environment variables, etc.).\nIn some configurations it might be desirable to force the re-execution of profile files. There is an end user option that controls this on the General options pane which defaults to false. However, server administrators may wish to ensure that this option defaults to true. To do this you use the session-rprofile-on-resume-default option. For example:\n# /etc/rstudio/rsession.conf\nsession-rprofile-on-resume-default=1\nNote that this setting is specified in the rsession.conf config file and takes effect the next time a user launches an R session (rather than requiring a full restart of the server).\n\n\nChild Processes\nBy default, when sessions are quit or suspended, child processes created in the session will continue to run. You can specify whether or not that should occur by specifying the session-quit-child-processes-on-exit setting in /etc/rstudio/rsession.conf. The allowed values are 1 or 0 to quit child processes or leave them running, respectively.\nFor example, to quit child processes when the session exits:\n# /etc/rstudio/rsession.conf\nsession-quit-child-processes-on-exit=1\nNote that this setting is specified in the rsession.conf config file and takes effect the next time a user launches an R session (rather than requiring a full restart of the server). Also, users can specifically override this setting in their project settings.\n\n\nSession Timeout Kill\nTo configure the amount of time to wait before forcefully killing and destroying sessions you can use the session-timeout-kill-hours option in the /etc/rstudio/rsession.conf file. This allows you to specify how much time should pass before a session is automatically cleaned up. This is the length of time during which a session exists without user input (regardless of computation status) allowing you to automatically reclaim temporary disk space used by the session, and to stop its processes and children.\nThis setting should only be used to ensure that any sessions that users have forgotten about are destroyed, reclaiming valuable disk space.\n\n\n\n\n\n\nImportant\n\n\n\nSessions can be destroyed while important computations are executing. The user whose session is cleaned will also lose all unsaved code and data.\n\n\nThis setting can also be used in conjunction with session-timeout-minutes, allowing already suspended sessions to be cleaned up.\nFor example:\n# /etc/rstudio/rsession.conf\nsession-timeout-kill-hours=48\nThe default value if none is explicitly specified is 0 hours, meaning sessions will never be killed and destroyed automatically. The supplied value should be an integer representing the amount of hours a session can be idle before being killed.\n\n\n\nWorkspace Storage\nStorage of workspaces (.RData files) in RStudio does not use compression by default. This differs from the behavior of base R. Compression is disabled because we’ve observed that for larger workspaces (> 50MB) compression can result in much lower performance for session startup and suspend/resume (on the order of 3 or 4 times slower).\nThe default workspace save options under RStudio are as follows:\noptions(save.defaults=list(ascii=FALSE, compress=FALSE))\noptions(save.image.defaults=list(ascii=FALSE, safe=TRUE, compress=FALSE))\nIf you wish to use different defaults you can define the save.defaults and/or save.image.defaults options in your Rprofile.site or per-user .Rprofile and RStudio will respect the settings you specify rather than using it’s own defaults.\nSee https://stat.ethz.ch/R-manual/R-devel/library/base/html/save.html for additional details on how R saves objects and the storage and performance implications of using compression.\n\n\nUser State Storage\nBy default, RStudio stores each user’s state in their home directory, in the following folder:\n~/.local/share/rstudio\nThis folder contains information on all of a user’s active RStudio sessions, including all of the session data when the session is suspended. It also includes various internal RStudio state. Deleting it will result in a factory-fresh RStudio experience for the user, with the exception of their per-user settings (which are described in Customizing Session Settings).\nBecause this folder can include arbitrary amounts of suspended session data, it can become very large. We recommend ensuring that each user has sufficient disk space quota to store suspended sessions along with the data for their R projects, and using other controls to clean up old data (such as session-timeout-kill-hours)\n\n\n\n\n\n\nImportant\n\n\n\nRStudio 1.3 and earlier stored user state in the folder ~/.rstudio (non-configurable). If you are upgrading to RStudio 1.4 from an earlier release, RStudio will automatically move user state to the new location when the user starts their first IDE session after the upgrade. If there’s a possibility you may downgrade to a prior RStudio release, we recommend configuring RStudio to use the old location temporarily; see below for instructions.\n\n\n\nStorage Location Customization\nIf it is necessary to store user state in another folder to relieve disk quota pressure or comply with other requirements, you can customize it using the XDG_DATA_HOME environment variable. XDG_DATA_HOME must be set for the entire RStudio process tree, since RStudio needs to write and read user state both inside and outside R sessions (so attempting to set it in session startup scripts like Rprofile.site or rsession-profile is inadequate and may result in inconsistent behavior).\nIf your Linux distribution uses the systemd init system, run sudo systemctl edit rstudio-server. In the editor, add the following section to the file (replacing /mnt/storage with your choice of root, of course). Note that the rstudio folder is not included in this path; this is a configuration root directory that will be respected by other applications that use the XDG standard.\n[Service]\nEnvironment=\"XDG_DATA_HOME=/mnt/storage/$USER\"\nIf your Linux distribution does not use the systemd init system, consult the documentation for your Linux distribution to learn which init system it uses and the appropriate method for setting environment variables for the rstudio-server service.\nIn the example above, the state for the user bob would be stored in /mnt/storage/bob/rstudio. The following special variables are expanded in the value:\n\n\n\n\n\n\n\nVariable\nExpands To\n\n\n\n\n$USER $HOME $HOSTNAME\nUser’s Unix username User’s home directory Name of current host\n\n\n\nThe $HOSTNAME value can be useful to avoid conflicts between hosts running distinct RStudio installations that share a file system, but note that $HOSTNAME should only be used in installations wherein the RStudio services and R session are on the same host. It’s important that all the machines in an installation agree on the path to the user state.\n\n\nPermissions Considerations\nYou must ensure that the folder that hosts user state data is writable by all RStudio users, since the R session (running as the user) will create the state folder if it does not exist. In the example above, bob would need write access to /mnt/storage to create /mnt/storage/bob/rstudio.\nNote that the user’s default umask will be used to set permissions on this folder (i.e. RStudio does not attempt to set them). We recommend ensuring that user umasks are configured such that the folder, when created, will not be readable by other users. If you want the folder to be created with permissions other than those it would receive via umask, you can create it via some other means prior to a user’s first interaction with RStudio; RStudio will not attempt to re-create the folder or change permissions if it already exists.\n\n\nCompatibility, Sharing, and Exact Locations\nXDG_DATA_HOME affects many different XDG-compliant applications, and it sets a base (root) directory, to which /rstudio is appended to form the final path. If you wish to set the exact path, or want to avoid side effects in other applications, use the environment variable RSTUDIO_DATA_HOME instead of XDG_DATA_HOME.\nFor example, RStudio 1.3 and prior stored user state in the folder ~/.rstudio. If you wish to continue using this folder in RStudio 1.4 and later, you could use the following setting (again, in sysctl edit rstudio-server):\n[Service]\nEnvironment=\"RSTUDIO_DATA_HOME=$HOME/.rstudio\"\nNote however that having two different RStudio installations with different versions of RStudio sharing a user state folder is unsupported and can lead to runtime errors or data corruption, as RStudio’s internal state structure changes between versions. If you have multiple RStudio installations with different versions that are run by concurrently by users, we recommend using RSTUDIO_DATA_HOME to create distinct user state folders, ensuring that these installations don’t corrupt each others’ state.\nIf RSTUDIO_DATA_HOME and XDG_DATA_HOME are both set, RSTUDIO_DATA_HOME takes precedence.\n\n\nJob Launcher Mounts\nFinally, if you are using containerized sessions with the Job Launcher, and you mount RStudio’s user state data to a folder outside their home directory, you must ensure that directory is mounted into the containers in addition to the home directory itself. See Launcher Mounts for more information about mounting folders into containerized sessions."
  },
  {
    "href": "r_sessions/user_and_group_profiles.html#user-and-group-profiles",
    "title": "RStudio Workbench Administration",
    "section": "User and Group Profiles",
    "text": "User and Group Profiles enable you to tailor the behavior of sessions on a per-user or per-group basis. The following attributes of a session can be configured within a profile:\n\nVersion of R used\nCPU affinity (i.e. which set of cores the session should be bound to)\nScheduling priority (i.e. nice value)\nResource limits (maximum memory, processes, open files, etc.)\nR session timeouts (amount of idle time which triggers session suspend)\nR session kill timeouts (amount of idle time which triggers a session to be destroyed and cleaned up)\n\nNote that if launching sessions via the Job Launcher, scheduling priority and resource limits are not ignored, but these should generally be configured via the Job Launcher itself where applicable. For example, when running Kubernetes sessions, memory limits can be specified each time a session is launched, so memory limits should be configured by the Job Launcher in that case.\n\nCreating Profiles\nProfiles are defined within the file /etc/rstudio/profiles. Note that this file is not created by default so you’ll need to create it if doesn’t already exist. Profiles are divided into sections of three different type:\n\nGlobal ([*])\nPer-group ([@groupname])\nPer-user ([username])\n\nHere’s an example profiles file that illustrates each of these types:\n# /etc/rstudio/profiles\n[*]\ncpu-affinity = 1-4\nmax-processes = 800\nmax-memory-mb = 2048\nsession-limit=5\nsession-timeout-minutes=60\nsession-timeout-kill-hours=24\n\n[@powerusers]\ncpu-affinity = 5-16\nnice = -10\nmax-memory-mb = 4096\nsession-limit=10\n\n[jsmith]\nr-version = /opt/R/3.1.0\nsession-timeout-minutes=360\nThis configuration specifies that by default users will run on cores 1 to 4 with a limit of 800 processes and 2GB of virtual memory. It also specifies that members of the powerusers group will run on cores 5 to 16 with an elevated nice priority and a limit of 4GB of memory. Finally, the user jsmith is configured to use a different version of R from the system default.\nNote that the /etc/rstudio/profiles file is processed from top to bottom (i.e. settings matching the current user that occur later in the file always override ones that appeared prior). Additionally, some settings do not apply to certain editor types (like Jupyter or VS Code). The settings available within /etc/rstudio/profiles are described in more depth below.\n\n\nSession Limit\nTo configure the maximum allowed number of sessions you can use the session-limit option. This is a more flexible choice than disabling multiple sessions entirely with server-multiple-sessions.\nFor example to limit user to 5 sessions:\nsession-limit=5\nBy default there is no limit to the number of sessions other than the one specified by the license. This limit has no effect if greater than the number of sessions allowed by your license.\nThis setting applies to all session types (RStudio, Jupyter, and VS Code).\n\n\nSession Timeout\nTo configure the amount of idle time to wait before suspending sessions you can use the session-timeout-minutes option. Idle time is the amount of time since a session has run any R commands, including commands typed by the user in the console and the execution of any R scripts.\nFor example:\nsession-timeout-minutes=360\nThe default value if none is explicitly specified is 120 minutes.\nThere are some conditions where an R session will not be suspended, these include:\n\nWhen a top-level R computation is running\nWhen the R prompt is not in it’s default state (e.g. during a debugging session)\n\nYou can also specify that R sessions should never be suspended by setting the session-timeout-minutes to zero. For example:\nsession-timeout-minutes=0\nThis setting only applies to the RStudio IDE, and does not apply to Jupyter or VS Code. Session timeout can be configured for Jupyter sessions via the session-cull setting - see Jupyter configuration for more details. There is currently no mechanism for timing out VS Code sessions.\n\n\nSession Timeout Kill\nTo configure the amount of time to wait before forcefully killing and destroying sessions you can use the session-timeout-kill-hours option in the /etc/rstudio/rsession.conf file. This allows you to specify how much time should pass before a session is automatically cleaned up. This is the length of time during which a session exists without user input (regardless of computation status) allowing you to automatically reclaim temporary disk space used by the session, and to stop its processes and children.\nThis setting should only be used to ensure that any sessions that users have forgotten about are destroyed, reclaiming valuable disk space. Note that this setting does not work if the server-shared-storage-path is located on a root squash mount.\nSessions can be destroyed while important computations are executing. The user whose session is cleaned will also lose all unsaved code and data.\nThis setting can also be used in conjunction with session-timeout-minutes, allowing already suspended sessions to be cleaned up. For example:\nsession-timeout-kill-hours=48\nThe default value if none is explicitly specified is 0 hours, meaning sessions will never be killed and destroyed automatically. The supplied value should be an integer representing the amount of hours a session can go without user interaction before being killed.\nThis setting only applies to the RStudio IDE, and does not apply to Jupyter or VS Code. Session timeout can be configured for Jupyter sessions via the session-cull setting - see Jupyter configuration for more details. There is currently no mechanism for timing out VS Code sessions.\n\nInteraction with session-timeout-minutes\nIt is recommended that the session-timeout-kill-hours be set to a much higher span of time than that specified by session-timeout-minutes. This will allow sessions to be suspended (and not destroyed) before they are forcefully killed and cleaned up, allowing for a better user experience. Note however, that if a session is running a long-running computation, it may not be suspended but it will still be killed.\nIf session-timeout-kill-hours is set to an amount of time less than session-timeout-minutes (which has a default of 2 hours), then sessions will never be suspended and they will be forcefully killed and cleaned up.\nThe two settings may be set to the same amount of time, but this is not recommended. In this case, it is undefined whether or not the session will be suspended, but the session will be killed and cleaned up regardless.\n\n\n\nCPU Affinity and Scheduling Priority\nIf you have users or groups that consistently require more compute resources than others you can use profile settings to reserve CPUs (cpu-affinity) as well as raise overall scheduling priority (nice).\n\nCPU Affinity\nThe cpu-affinity setting specifies which cores on a multi-core system should be used to schedule work for a session. This is specified as a comma-separated list of core numbers (1-based) where both individual cores and ranges of cores can be specified. For example:\ncpu-affinity = 1,2,3,4\ncpu-affinity = 1-4\ncpu-affinity = 1,2,15-16\nTo determine the number of addressable cores on your system you can use the nproc command:\n$ nproc\nThis setting applies to all session types (RStudio, Jupyter, and VS Code).\n\n\nScheduling Priority\nThe nice setting specifies a relative priority for scheduling session CPU time. Negative 20 is the highest nice priority and positive 20 is the lowest priority. The system default niceness for processes is typically 0. The following are all valid nice values:\nnice = -10\nnice = 0\nnice = 15\nScheduler behavior around nice priorities varies by system. For more details see nice use and effect.\nThis setting applies to all session types (RStudio, Jupyter, and VS Code).\n\n\n\nResource Limits\nProfiles can also be used to specify limits on available memory as well as the maximum number of processes and open files.\n\nAvailable Memory\nThe max-memory-mb setting controls the maximum amount of addressable memory for R sessions (by default memory is unlimited). This example specifies a limit of 2GB:\nmax-memory-mb = 2048\nNote that this value sets the amount of virtual memory that can be used by a process. Virtual memory includes code (i.e. shared libraries) loaded by the process as well as things like memory mapped files, so can often consume several hundred megabytes even for a vanilla R session. Therefore, you want to be sure not to set this threshold too low (in no case should you set it below 1024).\nThis setting applies to all session types (RStudio, Jupyter, and VS Code).\n\n\nNumber of Processes\nThe max-processes setting controls the maximum number of system processes createable by a user. This setting is useful to prevent either inadvertent or malicious fork bombs. The following example sets a limit of 800 processes:\nmax-processes = 800\nNote that max-processes refers to system processes, not R processes. Users may need to create many system processes in order to use RStudio, so we recommend setting this value high and testing the outcome before deploying in production.\nThis setting applies to all session types (RStudio, Jupyter, and VS Code).\n\n\nNumber of Open Files\nIn most Linux environments there is a maximum of 1024 open files per process. This is typically more than enough, but if you have a particular applications that requires more open files the max-open-files setting can be used to increase the limit. For example:\nmax-open-files = 2048\nThis setting applies to all session types (RStudio, Jupyter, and VS Code).\n\n\n\nUsing Multiple Versions of R\nAs illustrated above, you can bind users or groups to distinct versions of R installed on your server. This is controlled by the r-version option. Here are several examples of it’s use:\nr-version = /usr/lib/R\nr-version = /usr/local/lib/R\nr-version = /opt/R/3.1.0\nr-version = /opt/R/3.2.0\nNote that r-version specifies the full path to the directory where R is installed.\nSee the R Versions chapter for additional details on running multiple versions of R on a single server.\nThis setting only applies to the RStudio IDE, and does not apply to Jupyter or VS Code."
  },
  {
    "href": "r_sessions/multiple_r_sessions.html#multiple-r-sessions",
    "title": "RStudio Workbench Administration",
    "section": "Multiple R Sessions",
    "text": "RStudio Workbench enables users to have multiple concurrent R sessions on a single server or load balanced cluster of servers (the open-source version of RStudio Server supports only a single session at a time).\n\nCreating New Sessions\nYou can start a new R Session using the New Session command from the Session menu (or the corresponding toolbar button near the top-right of the IDE).\nYou can also open an existing RStudio project in a new R session by using the Open Project in New Session command. When switching projects there is also a button on the right side of the projects menu that lets you specify that the project should be opened in a new session rather than within the current one.\nYou can review all currently running sessions and switch between them using the Sessions toolbar near the top-right of the IDE.\n\n\nSession Lifetimes\nR Sessions are long-running tasks that continue to be available until you explicitly quit them (you can think of them as you’d think of multiple top-level RStudio windows running on the desktop). This means that you can kickoff a long running job in one session and then switch to another session, revisiting the original session later to check on it’s progress. As is also possible on the desktop, you can navigate between different projects and working directories within a session.\nSessions will suspend automatically when they are idle and then be automatically resumed next time they are accessed. To permanently quit a session you can use the Quit Session command located on the File menu or the corresponding toolbar button at the top right of the IDE.\n\n\nDisabling Multiple Sessions\nIf you wish disable support for multiple sessions you can use the server-multiple-sessions option. For example:\n# /etc/rstudio/rserver.conf\nserver-multiple-sessions=0"
  },
  {
    "href": "r_sessions/directory_management.html#directory-management",
    "title": "RStudio Workbench Administration",
    "section": "Directory Management",
    "text": "Working Directories\nThe default working directory for both new R sessions and new R projects is the user’s home directory (~). You can change this behavior via the session-default-working-dir and session-default-new-project-dir configuration parameters within the rsession.conf config file.\nFor example, the set the default values to “~/working” and “~/projects” you’d use the following configuration:\n# /etc/rstudio/rsession.conf\nsession-default-working-dir=~/working\nsession-default-new-project-dir=~/projects\nYou should ensure that users have the permissions required to write to the specified default directories. The specified directories will be automatically created if they don’t already exist.\nNote that these settings control only the default working and new project directories (users can still override these settings locally if they choose to).\n\n\nRestricted Directories\nLike most IDEs, RStudio allows users to open and edit any file to which they have read or write permission (respectively) at the filesystem level. However, in some environments it’s important to restrict access to system files from web front ends. RStudio can optionally enforce a restrictive mode for most directories, which will prevent users from using the IDE to open files in the directories. This is enabled by the restrict-directory-view option as follows:\n# /etc/rstudio/rsession.conf\nrestrict-directory-view=1\nWhen enabled, RStudio users will only have access to open files from the following in the IDE:\n\nHome directories\nR and R library directories\nRStudio-specific directories\nUser/session specific temporary directories\n\nIf you wish to allow users to open and view files in a directory that RStudio would ordinarily forbid access to, you can change the directory-view-whitelist setting. This setting accepts a list of directories to enable access to, separated by :. For example, if you wish to allow users to open files from /var/run and /usr/share/examples:\n# /etc/rstudio/rsession.conf\ndirectory-view-whitelist=/var/run:/usr/share/examples\nNote that this setting only applies to RStudio’s IDE web interface. Users will still have access to other files on the system using R itself and/or the Terminal interface. Follow security best practices by relying on operating system-level file permissions, not front end restrictions, to guard access to sensitive content and files."
  },
  {
    "href": "r_sessions/r_sessions.html",
    "title": "RStudio Workbench Administration",
    "section": "",
    "text": "Overview\nIn this section:\n\nR Executable and Libraries\nSession Startup Scripts\nUser and Group Profiles\nMultiple R Sessions\nPAM Sessions\nKerberos\nDirectory Management\nWorkspace Management\nFirst Project Template\nProject Sharing\nPackage Installation\nFeature Limits\nNotifications\nRStudio Connect Server\nTerminal WebSockets\nCustomizing Session Settings"
  },
  {
    "href": "r_sessions/session_startup_scripts.html#session-startup-scripts",
    "title": "RStudio Workbench Administration",
    "section": "Session Startup Scripts",
    "text": "When an R session starts up, the following scripts are run:\n\nAny PAM session modules Pro\nThe /etc/rstudio/rsession-profile script Pro\nThe environment module for the R version in use, if any; see Extended R Version Definitions Pro\nThe prelaunch script for the R version in use, if any; see Extended R Version Definitions Pro\nSystem and user shell profile scripts, such as .bash_profile Pro\nThe R session itself, inside any supervisor specified by rsession-exec-command Pro\n.Rprofile and other R initialization scripts; see Initialization at the Start of a Session for details\nRStudio-internal session startup scripts\nThe rstudio.sessionInit hook\n\nThe very last of these provides a way to run code after the R session is fully booted and ready to use; since it only runs in RStudio it can be used to finalize R sessions in RStudio-specific ways, using for example methods in the rstudioapi package. Here is an example that prints the RStudio version in new R sessions:\n# /opt/R/version/lib64/r/etc/Rprofile.site\nsetHook(\"rstudio.sessionInit\", function(newSession) {\n  if (newSession)\n    message(\"Welcome to RStudio \", rstudioapi::getVersion())\n}, action = \"append\")"
  },
  {
    "href": "r_sessions/rstudio_connect_server.html#rstudio-connect-server",
    "title": "RStudio Workbench Administration",
    "section": "RStudio Connect Server",
    "text": "Users of RStudio can publish content to RStudio Connect. To do so, they must first specify the RStudio Connect server they wish to use. You can set the default RStudio Connect server URL to use when users are connecting to an account. To do so, use the default-rsconnect-server option:\n# /etc/rstudio/rsession.conf\ndefault-rsconnect-server=http://connectserver/"
  },
  {
    "href": "r_sessions/terminal_websockets.html#terminal-websockets",
    "title": "RStudio Workbench Administration",
    "section": "Terminal WebSockets",
    "text": "The RStudio terminal pane uses WebSockets to communicate between the web browser and the session. If the attempt to connect with WebSockets fails, the terminal switches to a less responsive but generally more forgiving HTTP-based protocol.\nSlow typing response in the terminal is a symptom of this slower protocol. You can check by starting a terminal, then going to Tools / Terminal / Terminal Diagnostics. Scroll down to Connection Information and look for “WebSocket connect error, switching to RPC”. This indicates that the terminal was unable to use WebSockets and has fallen back on the slower protocol.\nSeveral settings are available for tuning the terminal’s use of WebSockets.\n\nIDE Settings\nIn the IDE under Tools / Global Options / Terminal, there is a checkbox “Connect with WebSockets”. Unchecking this will cause terminals to always connect with the HTTP-based protocol.\n\n\nFeature Limit\nAs mentioned earlier, the feature limit allow-terminal-websockets completely disables the use of WebSockets.\n\n\nAdvanced Settings\nThe following settings may be modified by adding them to the /etc/rstudio/rsession.conf file.\n\n\n\n\n\n\n\n\nSetting\nDefault\nPurpose\n\n\n\n\nwebsocket-ping-seconds\n10\nHow often a keep-alive is sent over the WebSocket, in seconds. Set to 0 to disable keep-alives. Many proxies will close inactive WebSockets so keeping enabled is recommended.\n\n\nwebsocket-connect-timeout\n3\nHow long terminal waits (in seconds) for WebSocket to connect before switching to the HTTP protocol. If set to 0 then the timeout of the web browser’s WebSocket implementation will be used; this is often quite lengthy (minutes).\n\n\nwebsocket-log-level\n0\nControls logging of WebSocket diagnostics. These are for troubleshooting only, and will appear in the RStudio R Console pane while enabled.\n\n0 = no WebSocket logging\n1 = log WebSocket errors\n2 = log WebSocket activity\n3 = log WebSocket errors and activity\n\n\n\nwebsocket-handshake-timeout\n5000\nHow long the server waits (in milliseconds) for WebSocket handshake to complete when connecting and disconnecting. Set to 0 to disable.\n\n\n\nFor example, this would double the number of keep-alive packets sent, wait longer before switching to HTTP, log information on WebSocket errors, and increase the handshake timeout to 15 seconds.\nwebsocket-ping-seconds=5\nwebsocket-connect-timeout=10\nwebsocket-log-level=1\nwebsocket-handshake-timeout=15000\nFor more background on the terminal feature, see this support article."
  },
  {
    "href": "r_sessions/customizing_session_settings.html#customizing-session-settings",
    "title": "RStudio Workbench Administration",
    "section": "Customizing Session Settings",
    "text": "All of the session settings file locations described in this section conform to the XDG Base Directory Specification. They are configurable using environment variables:\n\n\n\n\n\n\n\n\nScope\nDefault\nEnvironment\n\n\n\n\nUser\n~/.config/rstudio\nXDG_CONFIG_HOME\n\n\nSystem\n/etc/rstudio\nXDG_CONFIG_DIRS\n\n\n\nIn accordance with the Base Directory Specification, the environment variables specify the location of the rstudio folder. For example, to store system-wide preference configuration in /var/config/rstudio/rstudio-prefs.json, you would set the XDG_CONFIG_DIRS variable to the value /var/config.\nIf specified, the RStudio variables take precedence over the XDG variables. These variables specify a specific directory (not a base directory). For example, to store system-wide preferences in /var/config/settings/rstudio-prefs.json, you would set the RSTUDIO_CONFIG_DIR variable to the value /var/config/settings.\nThe examples in this section presume you’re setting system-wide settings in /etc/rstudio; in each case it’s also possible to use a different folder by changing environment variables as described above, or to apply the settings to individual user accounts by changing files in ~/.config/rstudio.\n\nUser Preferences\nUser preferences set in the RStudio IDE’s Global Options dialog can also be set in the JSON file rstudio-prefs.json, located in the settings directory described above.\n\nSchema\nThe schema for the JSON file can be found at:\n/usr/lib/rstudio-server/resources/schema/user-prefs-schema.json\nIt documents all of the preferences, shows data types and allowable values, and briefly explains the usage of each. You can see a summary of this information in the [Session User Settings] appendix.\n\n\nExample\nBy default, RStudio Workbench only shows the home page (session overview) to users who have multiple sessions running. If you’d like it to be shown to all users regardless of the number of running sessions, set it in the global user preferences file as follows:\n/etc/rstudio/rstudio-prefs.json\n{\n    \"show_user_home_page\": \"always\"\n}\n\n\n\nSnippets\nYou can install global snippets files for all users in the /etc/rstudio/snippets folder. For example, if you’d like to create a snippet lib for an R library call:\n# /etc/rstudio/snippets/r.snippets\nsnippet lib\n    library(${1:package})\nYou can also define snippets for CSS files in the file css.snippets, and so on. You can find documentation on the snippet file format in the Cloud 9 IDE snippet documentation.\nNote that RStudio will not merge snippet files, which implies the following:\n\nIf you define your own snippets (for a given file type), they will replace those that ship with RStudio (for that same file type).\nIf users define their own snippets (for a given file type), changes to the system snippet file (for that same file type) won’t have any effect on those users.\n\n\n\nDefault Document Templates\nRStudio typically opens new documents with completely blank contents. You can, however, define the contents of the blank document by creating a file named default.X in /etc/rstudio/templates, where X is the file extension you wish to customize. For example, to start all R scripts with a standard comment header users can fill out, you could use the following:\n# /etc/rstudio/templates/default.R\n# -------------------------------------\n# Script:\n# Author:\n# Purpose:\n# Notes:\n#\n# Copyright(c) Corporation Name\n# -------------------------------------\nThere are also some special template files which ship with RStudio; these, too, are customizable. In /etc/rstudio/templates, you can customize the following:\n\n\n\n\n\n\n\nFile\nDescription\n\n\n\n\ndocument.Rmd\nThe default R Markdown document file content (without YAML header)\n\n\nnotebook.Rmd\nThe default R Notebook file content (without YAML header)\n\n\npresentation.Rmd\nThe default R Markdown presentation file content (without YAML header)\n\n\nshiny.Rmd\nThe default Shiny R Markdown file content (without YAML header)\n\n\nquery.sql\nThe default SQL query\n\n\n\n\n\nColor Themes\nYou can define additional custom themes for RStudio by placing .rstheme files in the following directory:\n/etc/rstudio/themes\nThe .rstheme file contains plain-text CSS with some special metadata. You can create one by importing an existing TextMate theme file, or by starting from scratch (using an existing theme file as a template). Run the R command ?rstudioapi::addTheme for more help.\n\n\nFonts\nRStudio’s code editor and R console use a fixed-width font. By default, only fonts that end users have installed locally can be selected. If you wish to make additional fixed-width fonts available to your users, you can place them here:\n/etc/rstudio/fonts\nFonts placed here will be automatically made available for selection in RStudio’s Appearances settings (Tools -> Global Options -> Appearance) for all users. It’s helpful to place the fonts preferred by your users here because it allows the font to be used in RStudio regardless of what fonts they have installed locally.\nThe following font formats are supported:\n\nWeb Open Font Format (.woff, .woff2)\nOpenType (.otf)\nEmbedded OpenType (.eot)\nTrueType (.ttf)\n\nOnly fixed-width fonts are supported by the RStudio IDE. Proportional fonts will still be installed, but if users select a proportional font, they will experience cursor positioning problems.\n\nNaming and Directory Structure\nThe name of the file is presumed to be the name of the font. If you wish to give the font a custom name, you can place it in a directory with your name of choice. For example:\n    + fonts/\n    |\n    +-- Coding-Font.ttf\n    |\n    +-- Coding Font Two/\n        |\n        +-- CodingFont2-Regular.woff\nThis directory structure would make two fonts available, Coding-Font and Coding Font Two.\nSome fonts come in many different weights and styles. If you want these weights and styles to be treated as single font, you can place them underneath a single folder. This is useful when a theme uses bold or italic variants of a font to decorate code (e.g., to set comments in italics).\nTo do this, create subfolders with the font’s weight or style as the folder’s name. For example, this creates a single font, “Coding Font 3”, which has two weights (400 and 700 for regular and bold, respectively) and an italic style for each weight.\n    + fonts/\n    |\n    +-- Coding Font Three/\n        |\n        +-- 400/\n        |   |\n        |   +-- CodingFont3-Regular.woff\n        |   |\n        |   +-- italic/\n        |       |\n        |       +-- CodingFont3-Italic.woff\n        |\n        +-- 700/\n            |\n            +-- CodingFont3-Bold.woff\n            |\n            +-- italic/\n                |\n                +-- CodingFont3-BoldItalic.woff\n\n\nAutodetection\nIn addition to displaying a list of fonts installed on the server, RStudio attempts to automatically detect available fixed-width fonts that are installed on a user’s browser. For security reasons, it is not possible for RStudio to enumerate all the fonts on the user’s machine, so a known list of popular programming fixed-width fonts are checked for compatibility. This list is stored in the option browser_fixed_width_fonts.\nIf your users have a font they prefer but it can’t be installed on the server, you can cause RStudio to start scanning for it locally by including it in the set of browser_fixed_width_fonts in the global RStudio preferences file, /etc/rstudio/rstudio-prefs.json. See User Preferences for more information on setting global options.\n\n\n\nKeybindings\nRStudio keybindings can be globally defined using the following two files:\n/etc/rstudio/keybindings/editor_commands.json\n/etc/rstudio/keybindings/rstudio_commands.json\nIt isn’t necessary to hand-author these files; RStudio can generate them for you:\n\nRemove the ~/.config/rstudio/keybindings/ folder\nStart a new R session and customize the keyboard shortcuts as desired\nCopy the new .json files from ~/.config/rstudio/keybindings to /etc/rstudio/keybindings to make them active for all users on the server\n\n\n\nSpelling\nYou can define additional spelling dictionaries for RStudio by placing dictionary files in the following folders:\n\nLanguages\nDefine additional system languages by placing Hunspell .aff files in:\n/etc/rstudio/dictionaries/languages-system\n\n\nDictionaries\nDefine additional custom dictionaries by placing Hunspell.dic files in:\n/etc/rstudio/dictionaries/custom"
  },
  {
    "href": "r_sessions/feature_limits.html#feature-limits",
    "title": "RStudio Workbench Administration",
    "section": "Feature Limits",
    "text": "RStudio Workbench has a number of other limits that can be configured. This section describes these limits. Note that these settings are specified in the /etc/rstudio/rsession.conf file (rather than the rserver.conf file previously referenced).\n\nDisabling Access to Features\nBesides the limits on package installation and CRAN repository editing described in the previous section there are a number of other limits that can be specified in /etc/rstudio/rsession.conf. The following describes all of the options that can be used in rsession.conf to limit features.\n\nallow-vcs\nAllow access to Git and SVN version control features.\n\nallow-vcs-executable-edit\nAllow editing of the underlying Git or SVN executable.\n\nallow-package-installation\nAllow installation of packages using the Packages Pane (note that even if this is set to 0 it’s still possible to install packages using utils::install.packages from the command line).\n\nallow-r-cran-repos-edit\nAllow editing of the CRAN repository used for package downloads (note that it’s still possible to specify an alternate repository using the repos parameter of utils::install.packages).\n\nallow-shell\nEnable integrated terminal feature (note that it’s still possible to execute shell commands using the system function).\n\nallow-terminal-websockets\nAllow integrated terminal feature to use WebSockets for better responsiveness.\n\nallow-file-downloads\nAllow downloading files using the Export command in the Files Pane.\n\nallow-file-uploads\nAllow uploading files using the Upload command in the Files pane.\n\nallow-external-publish\nAllow content to be published to external (cloud) services. This includes publishing HTML documents created with R Markdown or R Presentations to RPubs (http://rpubs.com), and publishing Shiny applications and documents to ShinyApps.io (http://shinyapps.io). Note that this just removes the relevant user interface elements in the IDE, and that it may still be possible for users to publish content using the R console.\n\nallow-publish\nAllow content to be published. If specified, this option removes all user interface elements related to publishing content from the IDE, and overrides allow-external-publish.\n\nallow-launcher-jobs\nAllow running standalone adhoc Job Launcher jobs from the Jobs pane.\n\n\nAll of these features are enabled by default. Specify 0 to disable access to the feature.\nNote that these options should be specified in the /etc/rstudio/rsession.conf configuration file (rather than the main rserver.conf configuration file).\n\n\nMaximum File Upload Size\nYou can limit the maximum size of a file upload by using the limit-file-upload-size-mb setting. For example, the following limits file uploads to 100MB:\n# /etc/rstudio/rsession.conf\nlimit-file-upload-size-mb=100\nThe default behavior is no limit on the size of file uploads.\n\n\nCPU Time per Computation\nIf you want to prevent runaway computations that consume 100% of the CPU you can set the maximum number of minutes to allow top-level R computations to run for using the limit-cpu-time-minutes setting. For example:\n# /etc/rstudio/rsession.conf\nlimit-cpu-time-minutes=30\nThis specifies that no top level computation entered at the R console should run for more than 30 minutes. This constraint is implemented by calling the R setTimeLimit function immediately prior to handing off console commands to R. As a result it is possible for a particular script to override this behavior if it knows that it may exceed the threshold. This would be done as follows:\nsetTimeLimit(cpu = Inf)\n# Long running R code here...\n\n\nXFS Disk Quotas\nIf your system uses the XFS file system (http://en.wikipedia.org/wiki/XFS) then RStudio Workbench can be configured to notify users when they come close to or exceed their disk quota. You can enable this using the limit-xfs-disk-quota setting. For example:\n# /etc/rstudio/rsession.conf\nlimit-xfs-disk-quota=1\nThe user’s XFS disk quota will be checked when the RStudio IDE loads and a warning message will be displayed if they are near to or over their quota."
  },
  {
    "href": "server_management/server_management.html",
    "title": "RStudio Workbench Administration",
    "section": "",
    "text": "Overview\nIn this section:\n\nCore Administrative Tasks\nLogging\nAdministrative Dashboard\nAutomated Crash Reporting"
  },
  {
    "href": "server_management/automated_crash_reporting.html#automated-crash-reporting",
    "title": "RStudio Workbench Administration",
    "section": "Automated Crash Reporting",
    "text": "RStudio allows you to automatically capture crash dumps for all RStudio processes and upload them to our crash database for easy reporting, allowing us to more easily determine the exact cause of crashes without adding administrative overhead to your team by requiring you to manually collect crash dumps. As user privacy is of utmost concern, these crash dumps only contain stack information, such as the names of the functions that were on the callstack at the time of the crash. No heap information is stored within the dumps, so no sensitive user data is captured in the crash dumps. The IP address of the machine uploading the reports is captured and used only to determine the unique amount of users experiencing a crash.\n\nCrash Handler Configuration\nA separate RStudio process is responsible for handling crashes, and may be configured similar to other RStudio processes by modifying the config file /etc/rstudio/crash-handler.conf. Automated crash handling is disabled by default, though we recommend that you enable it. The following shows a table of available configuration options for /etc/rstudio/crash-handler.conf:\n\n\n\n\n\n\n\n\n\nConfig Option\nDescription\nRequired (Y/N)\nDefault Value\n\n\n\n\ncrash-handling-enabled\nEnables/disables automatic capturing of crash dumps for all RStudio processes.\nN\n0 (disabled)\n\n\ncrash-db-path\nLocation of the path where crash dumps should be stored on disk. This path must be readable and writeable by all RStudio users.\nN\n/tmp/crashpad_database\n\n\nuploads-enabled\nEnables/disables automatic uploading of crash dumps to our crash reporting service. If this is disabled, you will have to manually upload crash dumps.\nN\n1 (enabled)\n\n\nupload-url\nWeb URL where crash reports are uploaded. You should likely not change this setting unless RStudio Support instructs you to do so.\nN\n\n\n\nupload-proxy\nProxy server to connect to when submitting the minidump. Only applicable on Linux - uses the default system-wide setting on OSX. If left blank, any system-wide setting specified will be used. This should be in the form of [scheme]://[host]:[port], where scheme may be one of the following: http https socks4 socks4a socks5 or socks5h. For more information, see https://curl.haxx.se/libcurl/c/CURLOPT_PROXY.html\nN\n\n\n\n\nFor most RStudio installations, it is sufficient to merely set crash-handling-enabled=1 in the config file , like so:\n# /etc/rstudio/crash-handler.conf\ncrash-handling-enabled=1\n\n\nManually Uploading Crash Dumps\nIn some cases, you may be unable to automatically upload crash dumps to the crash reporting service because of lack of internet connectivity or simply because you want to manually upload crash dumps. RStudio allows you to manually upload crash dumps at any time by invoking the following command:\nrstudio-server upload-minidump /path/to/minidump"
  },
  {
    "href": "server_management/logging.html#logging",
    "title": "RStudio Workbench Administration",
    "section": "Logging",
    "text": "RStudio provides the ability to change various facets of its logging functionality, such as changing the logger type (syslog vs file) on a per-binary or per-section basis. In most configurations, it is recommended that you do not change the logging configuration, but in some circumstances it is desirable to turn on debug logging to help troubleshoot issues.\n\nConfiguration File\nThe logging configuration file is located at /etc/rstudio/logging.conf. It allows you to specify logging options in a hierarchy of three different types:\n\nGlobal ([*])\nPer-binary ([@binary name])\nPer log section ([log section name])\n\nFor example:\n# /etc/rstudio/logging.conf\n[*]\nlog-level=info\nlogger-type=syslog\n\n[@rserver]\nlog-level=debug\nlogger-type=file\nmax-size-mb=10\n\n[file-locking]\nlog-dir=/var/log/file-locking\nlog-file-mode=600\nThis configuration specifies that by default, all logging should be sent to syslog at info level or higher. Debug logging is enabled for the rserver binary specifically, where logs are written to file with a maximum log file size of 10MB, in the default /var/log/rstudio-server directory. File locking logging is also specifically redirected to a different logging directory, /var/log/file-locking, with a specific file creation mode of 600. All logging sections named file-locking which occur in the rserver process will be logged to file, whereas the same logging sections in other binaries will continue to be logged to syslog.\nThe following settings may be specified in /etc/rstudio/logging.conf:\n\n\n\n\n\n\n\n\nConfig Option\nDescription\nDefault Value\n\n\n\n\nlog-level\nThe minimum log level to capture. Can be one of debug, info, warn, or error.\nwarn\n\n\nlogger-type\nThe type of logger to use. Can be one of stderr, syslog, or file.\nsyslog\n\n\n\nWhen using the file logger, the following can also be specified:\n\n\n\n\n\n\n\n\nConfig Option\nDescription\nDefault Value\n\n\n\n\nlog-dir\nThe log directory to store log files in. The resulting log file name is based on the binary name (and optionally the process ID).\n/var/log/rstudio-server\n\n\nlog-file-mode\nThe filemode to use when creating the log file. Must be a valid POSIX octal file mode.\n666 (All read/write)\n\n\nlog-file-include-pid\nWhether to include the process id in the filename. Useful for differentiating between multiple processes of the same name. Can be 0 (false) or 1 (true)\n0 (false)\n\n\nrotate\nWhether or not to rotate the log file as it reaches maximum size. Can be 0 (false) or 1 (true)\n1 (true)\n\n\nmax-size-mb\nMaximum allowable size of the file before it is rotated. Only applicable if rotate is enabled.\n2 (MB)\n\n\n\n\nList of Logging Sections\nThe following is a list of logging sections that may be used within the logging configuration file.\n\n\n\n\n\n\n\nSection Name\nDescription\n\n\n\n\nfile-locking\nLogging of file locking operations, such as processes acquiring and releasing locks.\n\n\n\n\n\nReloading Configuration\nIn order to reload the logging settings during run-time of a process, simply send the SIGHUP signal to the desired process, and the logging configuration will be reloaded for that binary.\nFor example, to send the SIGHUP signal to the rserver process after changing the configuration file:\npidof rserver | sudo xargs kill -s SIGHUP"
  },
  {
    "href": "server_management/core_administrative_tasks.html#core-administrative-tasks",
    "title": "RStudio Workbench Administration",
    "section": "Core Administrative Tasks",
    "text": "Configuration Files\nRStudio uses several configuration files all located within the /etc/rstudio directory. Configuration files and folders include:\n\n\n\n\n\n\n\nrserver.conf\nCore server settings\n\n\nrsession.conf\nSettings related to individual R sessions\n\n\nnotifications.conf\nNotifications to be delivered to user sessions Pro\n\n\nlogging.conf\nConfiguration of the logging system including logger type, location, and level\n\n\ncrash-handler.conf\nConfiguration of the crash handling system (see Automated Crash Reporting)\n\n\ndatabase.conf\nConfiguration of the database that RStudio will store data in (see Database)\n\n\nngnix.http.conf\nExtra HTTP configuration for nginx Pro\n\n\nngnix.server.conf\nExtra server configuration for nginx Pro\n\n\nngnix.site\nExtra site configuration for nginx Pro\n\n\nprofiles\nUser and group resource limits Pro\n\n\nr-versions\nManual specification of additional versions of R Pro\n\n\nip-rules\nIP access rules (allow or deny groups of IP addresses) Pro\n\n\nload-balancer\nLoad balancing configuration Pro\n\n\nhealth-check\nTemplate for content to return for server health checks Pro\n\n\ngoogle-accounts\nMappings from Google accounts to local accounts Pro\n\n\nfile-locks\nConfiguration for file locking\n\n\nenv-vars\nAdditional environment variables to set during server startup\n\n\nlogin.html\nCustom HTML for login page\n\n\nthemes/\nCustom editor color schemes\n\n\nfonts/\nFonts for RStudio’s R console and code editor\n\n\nkeybindings/\nCustom IDE keybindings\n\n\nsnippets/\nEditor snippet files\n\n\ntemplates/\nDefault templates for new files created in the IDE\n\n\ndictionaries/\nCustom spelling languages and dictionaries\n\n\n\nThe rserver.conf and rsession.conf files are created by default during installation however the other config files are optional so need to be created explicitly. It should be noted that the rsession.conf file must be readable by each RStudio user, so it should be given appropriate permissions (e.g. 644).\nThe notifications.conf and r-versions files are created, but their entries are commented out as an example.\nWhenever making changes to configuration files you need to restart the server for them to take effect. You can do this using the restart command of the server management utility:\n$ sudo rstudio-server restart\n\n\nAlternate Configuration File Location\nRStudio can be instructed to use a directory other than /etc/rstudio for hosting configuration files using the XDG standard environment variable XDG_CONFIG_DIRS. This can be useful when running RStudio in a container and mounting configuration at runtime. It can also be helpful for setting up alternate configurations for testing or troubleshooting purposes without running the risk of corrupting a known-good production configuration.\nFor the example below, presume that you’d like RStudio’s configuration to live in /mnt/config/rstudio.\n\nCreate the Directory\nFirst, create the directory that needs to host configuration (this can of course be skipped when mounting). Make sure that the rstudio-server service account can read content in this directory.\n$ mkdir -p /mnt/config/rstudio\n$ chmod 755 /mnt/config/rstudio\n\n\nCopy Configuration\nPresuming that you’d like to start with your existing configuration, copy all of the configuration files and folders from your existing configuration set to your new configuration. You can do this as follows:\n$ cp -r /etc/rstudio/* /mnt/config/rstudio/\n\n\nConfigure Service\nBecause RStudio runs as a system service, you must use your system’s service manager to change its environment. If your Linux distribution uses the systemd init system, run sudo systemctl edit rstudio-server. In the editor, add the following section to the file (replacing /mnt/config with your choice of root). Note that the rstudio folder is not included in this path; this is a configuration root directory that will be respected by other applications that use the XDG standard.\n[Service]\nEnvironment=\"XDG_CONFIG_DIRS=/mnt/config\"\nIf you wish to set RStudio’s configuration folder directly, use the RSTUDIO_CONFIG_DIR environment variable instead. For example, to use /mnt/config/rstudio as the configuration folder:\n[Service]\nEnvironment=\"RSTUDIO_CONFIG_DIR=/mnt/config/rstudio\"\nRSTUDIO_CONFIG_DIR is also useful if you do not wish other XDG-compliant applications to be affected by the environment variable. If set, it takes precedence over XDG_CONFIG_DIRS.\nIf your Linux distribution does not use the systemd init system, consult the documentation for your Linux distribution to learn which init system it uses and the appropriate method for setting environment variables for the rstudio-server service.\n\n\nChange and Restart\nFinally, make any configuration changes you’d like in your new configuration folder, and then restart the server to use the new configuration files.\n$ sudo rstudio-server restart\nTo return to the configuration in /etc/rstudio, just remove the Environment directive added above and restart the service.\n\n\n\nConfiguring the Run-Time Data Directory\nRStudio needs to write several temporary files while running to function properly. The directory at which these files is written can be set by the server-data-dir configuration option by modifying /etc/rstudio/rserver.conf like so:\nserver-data-dir=/var/run/rstudio-server\nThe data directory defaults to /var/run/rstudio-server but you can change it to any directory. The specified location must be readable by any users of RStudio.\n\n\nSetting Environment Variables\nYou can set environment variables for RStudio’s server process using the env-vars configuration file. This is an alternative to setting the environment variables using your system’s service manager. For example, to set the HTTP_PROXY and XDG_DATA_HOME environment variables for the server process:\n# /etc/rstudio/env-vars\n# Set proxy for outbound HTTP requests\nHTTP_PROXY=http://192.168.1.1\n\n# Store user data on mounted external storage\nXDG_DATA_HOME=/mnt/storage/$USER\nThe env-vars file is reloaded, and the environment variables set again, when the server process receives a SIGHUP signal. See Reloading Configuration for an example.\n\n\n\n\n\n\nNote\n\n\n\nThis technique cannot be used to set the specific environment variables XDG_CONFIG_DIRS or RSTUDIO_CONFIG_DIR, because those variables control where configuration files are loaded from, and env-vars is itself a configuration file. Use your system’s service manage to set those variables as described in Alternate Configuration File Location.\n\n\n\n\n\n\n\n\nNote\n\n\n\nWith the exception of XDG variables, environment variables set for the server process are not generally forwarded to individual R sessions. To set environment variables such as HTTP_PROXY for all R sessions on the server, use Renviron.site or set them in one of the scripts executed when R sessions are initialized (see [Profile Script Execution]).\n\n\n\n\nStopping and Starting\nDuring installation RStudio is automatically registered as a daemon which starts along with the rest of the system. The exact nature of this will depend on the init system in use on your system:\n\nOn systems using systemd (such as Debian 7, Ubuntu 15, and RedHat/CentOS 7), this registration is performed as a systemd script at /etc/systemd/system/rstudio-server.service.\nOn systems using Upstart (such as older versions of Debian and Ubuntu, and RedHat/CentOS 6), this registration is performed using an Upstart script at /etc/init/rstudio-server.conf.\nOn systems using init.d, including RedHat/CentOS 5, an init.d script is installed at /etc/init.d/rstudio-server.\n\nTo manually stop, start, and restart the server you use the following commands:\nsudo rstudio-server stop\nsudo rstudio-server start\nsudo rstudio-server restart\nTo check the current stopped/started status of the server:\n$ sudo rstudio-server status\n\n\nReloading Configuration Values\nTo reload the server’s configuration without restarting it, use the reload command:\n$ sudo rstudio-server reload\nAlternately, you can send a SIGHUP to the rserver process, using a command like kill -s SIGHUP $PID, where $PID is the process ID of the rserver process.\nNote that most configuration values cannot be applied without a full restart. The following are the values and settings that will be reloaded when you send SIGHUP or execute the reload command:\n\nLogging configuration (logging.conf), as described in Logging.\nEnvironment variables (env-vars), as described in Setting Environment Variables.\nLoad balancing settings (load-balancer), as described in Load Balancing.\nnginx configuration (nginx.*.conf), as described in Customizing Default Proxy.\nCustom R version settings (r-versions), as described in Extended R Version Definitions.\nProduct license data, as described in License Management.\n\n\n\nManaging Active Sessions\nThere are a number of administrative commands which allow you to see what sessions are active and request suspension of running sessions.\nTo list all currently active sessions:\n$ sudo rstudio-server active-sessions\n\nSuspending Sessions\nWhen R sessions have been idle (no processing or user interaction) for a specified period of time (2 hours by default) RStudio suspends them to disk to free up server resources. When the user next interacts with their session it is restored from disk and the user resumes right back where they left off. This is all done seamlessly such that users aren’t typically aware that a suspend and resume has occurred.\nTo manually suspend an individual session:\n$ sudo rstudio-server suspend-session <pid>\nTo manually suspend all running sessions:\n$ sudo rstudio-server suspend-all\nThe suspend commands also have a “force” variation which will send an interrupt to the session to request the termination of any running R command:\n$ sudo rstudio-server force-suspend-session <pid>\n$ sudo rstudio-server force-suspend-all\nThe force-suspend-all command should be issued immediately prior to any reboot so as to preserve the data and state of active R sessions across the restart.\n\n\nKilling Sessions\nIf you are for any reason unable to cooperatively suspend an R session using the commands described above you may need to force kill the session. Force killing a session results in SIGKILL being sent to the process, causing an immediate termination.\nTo force kill an individual session:\n$ sudo rstudio-server kill-session <pid>\nTo force kill all running sessions:\n$ sudo rstudio-server kill-all\nNote that these commands should be exclusively reserved for situations where suspending doesn’t work as force killing a session can cause user data loss (e.g. unsaved source files or R workspace content).\n\n\n\nListing users\nYou can list all of the users that have signed in to RStudio Workbench by running the following command:\n$ sudo rstudio-server list-users\n\n\nAdding users to the user database\nNormally, when users sign in to RStudio Workbench for the first time, they are automatically added to the RStudio user database. However, you can manually add them via script if you need to. This is useful for designating specific users as administrators to allow them access to the administration panel without requiring them to belong to the administration group. This can be done by running the following command:\n$ sudo rstudio-server add-user <username> <0 or 1>\nSpecifying a 0 in the above command will add the user without admin privilege; specify a 1 to grant admin privilege.\n\n\n\n\n\n\nNote\n\n\n\nUsers set as administrators in this way will be Admin Superusers. See Administrator Superusers.\n\n\n\n\nChanging the admin status of a user\nYou can also change the admin status of a particular existing user:\n$ sudo rstudio-server set-admin <username> <0 or 1>\n\n\nLocking and unlocking users\nIf you are using RStudio Workbench under a named user license, you can lock and unlock specific users to disallow or reallow access to the server. Locking a user will prevent them from signing in to RStudio, but will preserve their files. Locked users do not count against the named user limit on your license.\nThis feature may be used when a user leaves the organization or otherwise no longer needs access to RStudio Workbench on a permanent basis.\nTo lock a user, click on the user on the Users admin page, and then click the Lock button in the upper right-hand corner of the screen.\nYou can also lock users via the server management utility:\n$ sudo rstudio-server lock-user <username>\n$ sudo rstudio-server unlock-user <username>\nNote that RStudio’s Software License Descriptions only allow this feature to be used to permanently terminate a named user’s access.\n\n\nTaking the Server Offline\nIf you need to perform system maintenance and want users to receive a friendly message indicating the server is offline you can issue the following command:\n$ sudo rstudio-server offline\nWhen the server is once again available you should issue this command:\n$ sudo rstudio-server online\nWhen the server is taken offline all R sessions will be suspended and no new sessions can be started. Session data will be saved but any running computations will be terminated.\n\n\nUpgrading to a New Version\nIf you perform an upgrade of RStudio and an existing version of the service is currently running, then the upgrade process will also ensure that active sessions are immediately migrated to the new version. This includes the following behavior:\n\nRunning R sessions are suspended so that future interactions with the server automatically launch the updated R session binary\nCurrently connected browser clients are notified that a new version is available and automatically refresh themselves.\nThe core server binary is restarted\n\nWhen load balancing is configured upgrading multiple nodes may cause brief glitches if you upgrade each server one at a time. This is due to the possibility of two servers with different versions trying to coordinate. If some downtime is acceptable, we recommend taking all nodes offline before upgrading.\nTo upgrade to a new version of RStudio you simply install the new version:\nDebian/UbuntuRedHat/CentOS:openSUSE/SLES:\n\n\n$ sudo gdebi <rstudio-package.deb>\n\n\n$ sudo yum install <rstudio-package.rpm>\n\n\n$ sudo zypper install <rstudio-package.rpm>"
  },
  {
    "href": "server_management/administrative_dashboard.html#administrative-dashboard",
    "title": "RStudio Workbench Administration",
    "section": "Administrative Dashboard",
    "text": "RStudio Workbench includes an administrative dashboard with the following features:\n\nMonitoring of active sessions and their CPU and memory utilization;\nThe ability to suspend, forcibly terminate, or assume control of any active session;\nHistorical usage data for individual server users (session time, memory, CPU, logs);\nHistorical server statistics (CPU, memory, active sessions, system load); and\nSearchable server log (view all messages or just those for individual users)\nThe ability to lock users, preventing them from signing in to RStudio\n\nThe dashboard can be an invaluable tool in understanding server usage and capacity as well as to diagnose and resolve problems.\nNote that at this time, historical monitoring is not available for sessions spawned via the Job Launcher.\n\nEnabling the Dashboard\nThe administrative dashboard is accessed at the following URL:\nhttp://<server-address>/admin\nThe administrative dashboard is disabled by default. To enable it you set the admin-enabled option. You can also specify that only users of certain group have access to the dashboard using the admin-group option. For example:\n# /etc/rstudio/rserver.conf\nadmin-enabled=1\nadmin-group=rstudio-admins\nYou can specify a single group as the above example does or a comma-delimited list of groups. For example:\n# /etc/rstudio/rserver.conf\nadmin-group=server-admins,rstudio-admins,domain-admins\nNote that changes to the configuration will not take effect until the server is restarted.\n\n\nAdministrator Superusers\nYou can further designate a certain user or group of users as administrative “superusers”. Superusers have the following additional privileges:\n\nSuspend or terminate active sessions\nAssume control of active sessions (e.g. for troubleshooting)\nLogin to RStudio as any other server user\n\nAdministrative superusers do not have root privilege on the system, but rather have a narrow set of delegated privileges that are useful in managing and supporting the server. You can define the users with this privilege using the admin-superuser-group setting. For example:\n# /etc/rstudio/rserver.conf\nadmin-superuser-group=rstudio-superuser-admins\nNote that as with the admin groups above, you can specify a single group as the above example does or a comma-delimited list of groups. For example:\n# /etc/rstudio/rserver.conf\nadmin-superuser-group=rstudio-superuser-admins,domain-admins\nChanges to the configuration will not take effect until the server is restarted. Admin superusers can also be added via the command line. See Adding users to the user database.\n\nUser Impersonation Restrictions\nNote that the ability to login as other users and assume control of existing sessions is not available if you are authenticating with SAML SSO, Google Accounts or proxied authentication. This is because these authentication mechanisms use a different user-identity mechanism which isn’t compatible with the way that user session impersonation is implemented.\n\n\n\nServer Log Time Zone\nYou can control the time zone in which the server logs are displayed in the admin dashboard by the use of the admin-monitor-log-use-server-time-zone option. For example:\n# /etc/rstudio/rserver.conf\nadmin-monitor-log-use-server-time-zone=1\nSetting this option to 1 will display the server logs in the server’s time zone. The default value of 0 will display the log times in UTC.\n\n\nLicensing Considerations\nIf you have been granted a license which has a limit on the total number of users that may use RStudio (i.e. named user licensing), you will need to control user access to the server. Each unique user that signs in to RStudio will count against your available user limit. If too many users sign in and attempt to use the system, new users will be denied, as the license limit will be reached.\nIf this occurs, please contact sales@rstudio.com to purchase additional users.\nFor more information on licensing, see License Management."
  },
  {
    "href": "job_launcher/configuration.html#launcher-configuration",
    "title": "RStudio Workbench Administration",
    "section": "Configuration",
    "text": "Job Launcher Configuration\nBefore the Job Launcher can be run, it must be properly configured via the config file /etc/rstudio/launcher.conf; see the Job Launcher documentation for supported configuration options. If the Launcher was installed with RStudio Workbench, a default working configuration that uses the Local plugin is installed for your convenience.\nThe Launcher configuration parameter admin-group should be configured to the group value of the RStudio Workbench server user, specified in the server-user configuration parameter in rserver.conf (which defaults to rstudio-server). This makes the server user a Job Launcher admin, which is necessary to properly launch sessions on behalf of other users.\n\n\nRStudio Workbench Integration\nRStudio Workbench must be configured in order to integrate with the Job Launcher. There are several files which house the configuration, and they are described within subsequent sections.\n\nServer Configuration\nThe RStudio Workbench process rserver must be configured to communicate with the Job Launcher in order to enable session launching. The following table lists the various configuration options that are available to be specified in the rserver.conf configuration file:\n/etc/rstudio/rserver.conf\n\n\n\n\n\n\n\n\n\nConfig Option\nDescription\nRequired (Y/N)\nDefault Value\n\n\n\n\nlauncher-sessions-enabled\nEnables launching of rsession processes via the Job Launcher. This must be enabled to use the Job Launcher.\nN\n0\n\n\nlauncher-address\nTCP host/IP of the launcher host, or unix domain socket path (must match /etc/rstudio/launcher.conf configuration value). If using the default launcher configuration that ships with RStudio, this should be localhost (assuming you run the launcher side-by-side with RStudio Workbench).\nY\n\n\n\nlauncher-port\nPort that the launcher is listening on. Only required if not using unix domain sockets. If using the default launcher configuration that ships with RStudio, this should be 5559.\nY\n\n\n\nlauncher-default-cluster\nName of the cluster to use when launching sessions. Can be overridden by the launching user.\nN\n\n\n\nlauncher-sessions-callback-address\nAddress (HTTP or HTTPS) of RStudio Workbench that will be used by launcher sessions to communicate back for project sharing and launcher features. The address must be the reachable address of the rserver process from the host that will be running rsession, which in the case of launcher sessions can be on a different network segment entirely. If RStudio is configured to use SSL, you must also ensure that the callback address hostname matches the FQDN of the Common Name or one of the Subject Alternate Names on the HTTPS certificate. See the example configuration below for more details.\nY\n\n\n\nlauncher-sessions-callback-verify-ssl-certs\nWhether or not to verify SSL certificates when Launcher sessions are connecting to RStudio. Only applicable if connecting over HTTPS. For production use, you should always leave the default or have this set to true, but it can be disabled for testing purposes.\nN\n1\n\n\nlauncher-use-ssl\nWhether or not to connect to the launcher over HTTPS. Only supported for connections that do not use unix domain sockets.\nN\n0\n\n\nlauncher-verify-ssl-certs\nWhether or not to verify SSL certificates when connecting to the launcher. Only applicable if connecting over HTTPS. For production use, you should always leave the default or have this set to true, but it can be disabled for testing purposes.\nN\n1\n\n\nlauncher-sessions-clusters\nWhitelist of clusters to allow for submitting interactive session jobs to. The default allows all job launcher clusters to run interactive sessions.\nN\n\n\n\nlauncher-adhoc-clusters\nWhitelist of clusters to allow for submitting adhoc jobs from the Launcher pane. The default allows all job launcher clusters to run adhoc jobs.\nN\n\n\n\nlauncher-sessions-container-image\nThe default container image to use when creating sessions. Only required if using a plugin that requires containerization. If none is specified, the Job launcher-specified default will be used, if the plugin supports it.\nN\n\n\n\nlauncher-sessions-container-images\nComma-separated list of images which may be used for launching sessions. Used to filter out incompatible entries from the UI when a user is selecting an image to use for running the session. Leave blank to allow all images to be used.\nN\n\n\n\nlauncher-adhoc-container-images\nComma-separated list of images which may be used for launching adhoc jobs. Used to filter out incompatible entries from the UI when a user is selecting an image to use for running an adhoc job. Leave blank to allow all images to be used.\nN\n\n\n\nlauncher-sessions-container-run-as-root\nWhether or not to run as root within the session container. We recommend you do not use this in most cases.\nN\n0\n\n\nlauncher-sessions-create-container-user\nWhether or not to create the session user within the container. Only applicable if using container sessions and not running containers as root. The created user will have the same UID, GID, home directory, and login shell as the user that launched the session. It is recommended that this option be used, unless your containers connect to an LDAP service to manage users and groups. The container starts as root so it can create the correct user and group ids, then drops privilege to use the created user account. If it cannot drop privilege the container will fail to start.\nN\n1\n\n\nlauncher-sessions-forward-container-environment\nWhether or not to forward any container environment variables to the session. This is useful for example, propogating Kubernetes secrets to the sesion. However, the variables USER, HOME, and LOGNAME are not forwarded, and are loaded from the user’s passwd entry.\nN\n1\n\n\nlauncher-sessions-connection-timeout-seconds\nNumber of seconds to allow for making the initial connection to a launcher session. Connection failures are retried automatically - this is simply to prevent unreachable hosts from hanging the retry process as the default connection timeout on most systems is very high. Only change this if you are having trouble connecting to sessions. A value of 0 indicates that there should be no timeout (system default).\nN\n3\n\n\nlauncher-sessions-container-forward-groups\nWhether or not to forward the user’s supplemental groups to the created containers. This will only be done when not creating the container user, and when running the container as a non-root user, such as if integrating with LDAP. This is enabled by default, but if group lookups are very expensive in your environment and supplemental groups are not necessary, this can be disabled.\nN\n1\n\n\n\nFor example, your rserver.conf file might look like the following:\n# /etc/rstudio/rserver.conf\nlauncher-address=localhost\nlauncher-port=5559\nlauncher-sessions-enabled=1\nlauncher-default-cluster=Kubernetes\n\n# the callback address that launcher sessions will reconnect to rserver on\n# since our Kubernetes jobs run on a different network segment, this needs\n# to be the routable IP address of the web server servicing RStudio traffic\n# (routable from the point of view of any Kubernetes nodes)\nlauncher-sessions-callback-address=http://10.15.44.30:8787\n\nlauncher-use-ssl=1\nlauncher-sessions-container-image=rstudio:R-3.5\nlauncher-sessions-container-run-as-root=0\nlauncher-sessions-create-container-user=1\n\n\nSSL Considerations\nBoth RStudio Workbench and the Job Launcher can be configured to use SSL. When the Launcher is configured to use SSL, the RStudio Workbench node(s) that are connecting to the Launcher must ensure that the hostname configured in the launcher-address field matches the FQDN of the Common Name or Subject Alternate Name of the certificate that is presented by the Launcher. If the hostnames do not match exactly, SSL verification will fail, and RStudio will be unable to connect to the Job Launcher.\nSimilarly, if RStudio Workbench is configured to use SSL, the hostname configured in the launcher-sessions-callback-address field must match the FQDN of the Common Name or Subject Alternate Name of the certificate that is presented by RStudio. Failure to do so will cause certificate verification to fail when sessions attempt to connect to RStudio, preventing you from using Job Launcher functionality such as starting Launcher jobs.\nAdditionally, both the RStudio Workbench and Job Launcher root certificates need to be imported into the trusted root certificate store on the systems that are accessing those addresses. For example, the Workbench server nodes need to have the Job Launcher root certificate installed in their trusted certificate store to ensure that certificate verification works correctly. The exact steps for importing a certificate into the trusted root store are operating system specific and outside of the scope of this document.\n\n\nJob Launcher and PAM Sessions\nPAM Sessions work slightly differently when used with Launcher sessions. See PAM Sessions with the Job Launcher for more information.\n\n\nAuthentication\nRStudio Workbench authenticates with the Job Launcher via the secure-cookie-key file, a secret key that is read on startup of both the launcher and RStudio which is only readable by the root account. The file is present at /etc/rstudio/secure-cookie-key. If the Job Launcher is running on a different machine than RStudio Workbench, you will need to make sure that the exact same secure-cookie-key file is present on both machines.\nTo do this, create a secure cookie key file on one of the nodes like so:\n# generate secure-cookie-key as a simple UUID\nsudo sh -c \"echo `uuid` > /etc/rstudio/secure-cookie-key\"\n\n# ensure that the cookie is only readable by root\nsudo chmod 0600 /etc/rstudio/secure-cookie-key\nOnce this file has been created, copy it to the other node to the same location so that both services use the same key. Alternatively, you could accomplish this via a symlink to a location on a file share.\nThe path to the secure-cookie-key file can be changed, but it is not recommended in most cases. If you need to change it, it can be done by adding the following line to the /etc/rstudio/rserver.conf and /etc/rstudio/launcher.conf configuration files:\nsecure-cookie-key-file=/path/to/secure-cookie-key\nWhen running Launcher sessions in a load balanced RStudio deployment, sessions do additional authorization verification to ensure that they are only used by the user that created them. This is accomplished by an RSA key pair, located at /etc/rstudio/launcher.pem and /etc/rstudio/launcher.pub. These files must be the same on every RStudio node, or users will be unable to use their sessions on multiple nodes.\nIn order to create the RSA files, run the following commands:\nsudo openssl genpkey -algorithm RSA -out /etc/rstudio/launcher.pem -pkeyopt rsa_keygen_bits:2048\nsudo openssl rsa -in /etc/rstudio/launcher.pem -pubout > /etc/rstudio/launcher.pub\nsudo chmod 0600 /etc/rstudio/launcher.pem\"\nYou must ensure that the above private key (.pem) file is owned by root and has 600 permissions, as it must remain secret to your users.\nOnce the files are created, simply copy them to each RStudio node in your cluster.\n\n\nLauncher Sessions\nIt is recommended that you configure the Shared Storage path (see Shared Storage for configuration) in a location that will be reachable both by the RStudio Workbench instance and each Launcher Session in order to support various RStudio features. Failure to do so could cause subtle, unintended issues.\nSee the Launcher Mounts section for more details about how to configure this correctly with Containerized Sessions.\n\n\nContainerized Sessions\nIn order to run your R sessions in containers, you will need a Docker image that contains the necessary rsession binaries installed. RStudio provides an official image for this purpose, which you can get from Docker Hub.\nFor example, to get the RHEL6 image, you would run:\ndocker pull rstudio/r-session-complete:centos7\nAfter pulling the desired image, you will need to create your own Dockerfile that extends from the r-session-complete image and adds whatever versions of R you want to be available to your users, as well as adding any R packages that they will need. For example, your Dockerfile should look similar to the following:\nFROM rstudio/r-session-complete:centos7\n\n# install desired versions of R\nRUN yum install -y R\n\n# install R packages\n...\nSee Docker Hub for more information.\n\nLauncher Mounts\nWhen creating containerized sessions via the Job Launcher, you will need to specify mount points as appropriate to mount the users’ home drives and any other desired paths. In order for sessions to run properly within containers, it is required to mount the home directories into the containers, as well as any directories containing per-user state (e.g., a customized XDG_DATA_HOME). The home mount path within the container must be the same as the user’s home path as seen by the RStudio Workbench instance itself (generally, /home/{USER}).\nTo specify mount points, modify the /etc/rstudio/launcher-mounts file to consist of multiple mount entries separated by a blank line. The following table lists the fields that are available for each mount entry in the file.\n\n\n\n\n\n\n\n\n\nField\nDescription\nRequired (Y/N)\nDefault Value\n\n\n\n\nMountType\nThe type of mount. Can be Host, NFS, CephFs, GlusterFs, AzureFile, KubernetesPersistentVolumeClaim, or Passthrough\nY\n\n\n\nMountPath\nThe path within the container that the directory will be mounted to.\nY\n\n\n\nReadOnly\nWhether or not the mount is read only. Can be true or false.\nN\nfalse\n\n\nJobType\nWhat type of jobs the mount is applied to. Can be session, adhoc, or any.\nN\nany\n\n\nWorkbench\nWhat type of workbench the mount is applied to. Can be rstudio, jupyterlab, jupyter notebook, vs code, or any.\nN\nany\n\n\nCluster\nThe specific cluster that this mount applies to. Applies to all clusters if not specified.\nN\n\n\n\n\nDepending on the MountType specified above, different settings may be used to control the mount.\nMountType: Host\n\n\n\n\n\n\n\n\nField\nDescription\nRequired (Y/N)\n\n\n\n\nPath\nThe source directory of the mount, i.e. where the mount data comes from.\nY\n\n\n\nMountType: NFS\n\n\n\n\n\n\n\n\nField\nDescription\nRequired (Y/N)\n\n\n\n\nPath\nThe source directory of the mount, i.e. where the mount data comes from.\nY\n\n\nHost\nThe NFS host name for the NFS mount.\nN\n\n\n\nMountType: CephFs\n\n\n\n\n\n\n\n\nField\nDescription\nRequired (Y/N)\n\n\n\n\nMonitors\nA comma-separated list of Ceph monitor addresses. For example: 192.168.1.200:8765,192.168.1.200:8766\nY\n\n\nPath\nThe path within the Ceph filesystem to mount\nN\n\n\nUser\nThe Ceph username to use\nN\n\n\nSecretFile\nThe file which contains the Ceph keyring for authentication\nN\n\n\nSecretRef\nReference to Ceph authentication secrets, which overrides SecretFile if specified\nN\n\n\n\nMountType: GlusterFs\n\n\n\n\n\n\n\n\nField\nDescription\nRequired (Y/N)\n\n\n\n\nEndpoints\nThe name of the endpoints object that represents a Gluster cluster configuration\nY\n\n\nPath\nThe name of the GlusterFs volume\nY\n\n\n\nMountType: AzureFile\n\n\n\n\n\n\n\n\nField\nDescription\nRequired (Y/N)\n\n\n\n\nSecretName\nThe name of the secret that contains both the Azure storage account name and the key\nY\n\n\nShareName\nThe share name to be used\n\n\n\n\nMountType: KubernetesPersistentVolumeClaim\n\n\n\nField\nDescription\nRequired (Y/N)\n\n\n\n\nClaimName\nThe name of the Kubernetes Persistent Volume Claim to use\nY\n\n\n\nMountType: Passthrough\n\n\n\n\n\n\n\n\nField\nDescription\nRequired (Y/N)\n\n\n\n\nFilePath\nPath to a file that contains the raw JSON object representing the mount, which is sent directly to the back-end without transformation\nY\n\n\n\nNote that for many mount types, paths may contain the special variable {USER} to indicate that the user’s name be substituted, enabling you to mount user-specific paths.\nAn example /etc/rstudio/launcher-mounts file is shown below.\n# /etc/rstudio/launcher-mounts\n# User home mount - This is REQUIRED for the session to run\nMountType: NFS\nHost: nfs01\nPath: /home/{USER}\nMountPath: /home/{USER}\nReadOnly: false\n\n# Shared code mount\nCluster: Kubernetes\nMountType: NFS\nHost: nfs01\nPath: /dev64\nMountPath: /code\nReadOnly: false\n\n# Only mount the following directory when the user is launching a JupyterLab session\nCluster: Kubernetes\nWorkbench: JupyterLab\nMountType: CephFs\nMonitors: 127.0.0.1:8080,127.0.0.1:8081\nSecretFile: /etc/secrets/ceph\nReadOnly: true\nIt is important that each entry consists of the fields as specified above. Each field must go on its own line. There should be no empty lines between field definitions. Each entry must be separated by one full blank line (two new-line \\n characters).\nIf you choose to run your containers as root, the user home drive must be mapped to /root. For example:\n# /etc/rstudio/launcher-mounts\nMountType: NFS\nHost: nfs01\nPath: /home/{USER}\nMountPath: /root\nReadOnly: false\nAs noted in the Launcher Sessions section, it is recommended that you also mount the Shared Storage path (see [Shared Storage] for configuration) into the session container to support various RStudio features. When mounting the shared storage path, ensure that the folder is mounted to the same path within the container to ensure that the rsession executable will correctly find it. For example:\n# /etc/rstudio/launcher-mounts\nMountType: NFS\nHost: nfs01\nPath: /rstudio/shared-storage\nMountPath: /rstudio/shared-storage\nReadOnly: false\n\n\nLauncher Environment\nYou may optionally specify environment variables to set when creating launcher sessions.\nTo specify environment overrides, modify the /etc/rstudio/launcher-env file to consist of multiple environment entries separated by a blank line. The following table lists the fields that are available for each environment entry in the file.\n\n\n\n\n\n\n\n\n\nField\nDescription\nRequired (Y/N)\nDefault Value\n\n\n\n\nJobType\nWhat type of jobs the environment value(s) is applied to. Can be session, adhoc, or any.\nN\nany\n\n\nWorkbench\nWhat type of workbench the mount is applied to. Can be rstudio, jupyterlab, jupyter notebook, vs code, or any.\nN\nany\n\n\nCluster\nThe specific cluster that the environment applies to. Applies to all clusters if not specified.\nN\n\n\n\nEnvironment\nThe environment variables to set, one per line (each subsequent line must be indented with an arbitrary amount of spaces or tabs), in the form of KEY=VALUE pairs.\nN\n\n\n\n\nAdditionally, you can use the special {USER} variable to specify the value of the launching user’s username, similar to the mounts file above.\nAn example /etc/rstudio/launcher-env file is shown below.\n# /etc/rstudio/launcher-env\nJobType: session\nEnvironment: IS_LAUNCHER_SESSION=1\n IS_ADHOC_JOB=0\n USER_HOME=/home/{USER}\n\nJobType: adhoc\nEnvironment: IS_LAUNCHER_SESSION=0\n IS_ADHOC_JOB=1\n USER_HOME=/home/{USER}\n\nJobType: any\nCluster: Kubernetes\nENVIRONMENT: IS_KUBERNETES=1\nIf you do not need to set different environment variables for different job types or different clusters, you may simply specify KEY=VALUE pairs, one per line, which will be applied to all launcher ad-hoc jobs and sessions. For example:\nIS_LAUNCHER_JOB=1\nUSER_HOME=/home/{USER}\n\n\nLauncher Ports\nYou may optionally specify ports that should be exposed when creating containerized jobs. This will allow the ports to be exposed within the host running the container, allowing the ports to be reachable from external services. For example, for Shiny applications to be usable, you must expose the desired Shiny port, otherwise the browser window will not be able to connect to the Shiny application running within the container.\nTo specify exposed ports, modify the /etc/rstudio/launcher-ports file to consist of multiple port entries separated by a blank line. The following table lists the fields that are available for each port entry in the file.\n\n\n\n\n\n\n\n\n\nField\nDescription\nRequired (Y/N)\nDefault Value\n\n\n\n\nJobType\nWhat type of jobs the port(s) is applied to. Can be session, adhoc, or any.\nN\nany\n\n\nWorkbench\nWhat type of workbench the mount is applied to. Can be rstudio, jupyterlab, jupyter notebook, vs code, or any.\nN\nany\n\n\nCluster\nThe specific cluster that this set of ports applies to. Applies to all clusters if not specified.\nN\n\n\n\nPorts\nThe ports to expose, one per line (each subsequent line must be indented with an arbitrary amount of spaces or tabs).\nN\n\n\n\n\nAn example /etc/rstudio/launcher-ports file is shown below.\n# /etc/rstudio/launcher-ports\nJobType: adhoc\nPorts: 6210\n 6143\n 6244\n 6676\n\n# additional Kubernetes ports to expose\nJobType: adhoc\nCluster: Kubernetes\nPorts: 4434\nIf you do not need to set different exposed ports for different job types or different clusters, you may simply specify port values, one per line, which will be applied to all launcher ad-hoc jobs and sessions. For example:\n# /etc/rstudio/launcher-ports\n5873\n5874\n64234\n64235\n\n\n\nContainerized Adhoc Jobs\nTo run adhoc jobs in containers from the Launcher pane, you need a Docker image containing the bash shell and the desired version of R on the path.\nThe adhoc job container will run using the same userId and groupId value as the RStudio user. In order for scripts under the home directory to be found in the container, the home directory must be mounted with the same absolute path inside the container.\nJobs started from the RStudio console via rstudioapi::launcherSubmitJob() have no specific container requirements."
  },
  {
    "href": "job_launcher/troubleshooting.html#launcher-troubleshooting",
    "title": "RStudio Workbench Administration",
    "section": "Troubleshooting",
    "text": "If you experience issues related to running Launcher sessions, adhoc jobs, Jupyter sessions, or VS Code sessions, you can use the Launcher verification tool which will attempt to launch jobs and provide diagnostic output about what could be going wrong. To run the verification process, run the following command:\nsudo rstudio-server verify-installation --verify-user=user\nReplace the --verify-user value with a valid username of a user that is setup to run RStudio Workbench in your installation. This will cause the test jobs to be started under their account, allowing the verification tool to check additional aspects of launching jobs, including mounting the user’s home directories into containers. You can also specify a specific test to run by using the --verify-test flag, like so:\nsudo rstudio-server verify-installation --verify-user=user --verify-test=r-sessions\nThe above example will only test R Sessions, skipping adhoc jobs and Jupyter/VS Code sessions. The parameter can be one of r-sessions, adhoc-jobs, jupyter-sessions, or vscode-sessions. If the parameter is unspecified, all tests will be run."
  },
  {
    "href": "job_launcher/load_balancing.html#load-balancing",
    "title": "RStudio Workbench Administration",
    "section": "Load Balancing",
    "text": "Both RStudio Workbench and the Job Launcher services can be load balanced, providing maximum scalability and redundancy. When using the RStudio Workbench load balancer with the Launcher, it is generally sufficient to simply have each Workbench node point to its own node-local Launcher service via rserver.conf configuration - no external load balancer needs to control access to the Launcher itself.\n\n\n\n\n\n\nNote\n\n\n\nIn this mode, when using the local Launcher, sessions will be balanced according to the setting you have defined under balancer in /etc/rstudio/load-balancer.\n\n\nHowever, in some cases, you may want to scale the Job Launcher separately from RStudio Workbench. For example, if your Launcher cluster needs to exist in a different network for security reasons, such as to limit node connectivity to backend services (e.g., Kubernetes). In such cases, you will need to scale the Job Launcher separately via an external load balancer, and Workbench should be configured to point to this load balanced instance of the Job Launcher. In most cases, the external load balancer should be configured for sticky sessions, which will ensure that each instance of Workbench connects to just one Job Launcher node, providing the most consistent view of the current job state. For more information on configuring the Job Launcher for load balancing, see the Job Launcher documentation.\nIt should be noted that in most cases, load balancing is not needed for performance reasons, and is generally used for redundancy purposes."
  },
  {
    "href": "job_launcher/running_the_launcher.html#running-the-launcher",
    "title": "RStudio Workbench Administration",
    "section": "Running the Launcher",
    "text": "Once it is configured, you can run the Job Launcher by invoking the command sudo rstudio-launcher start, and stop it with sudo rstudio-launcher stop. The Job Launcher must be run with root privileges, but similar to rstudio-server, privileges are immediately lowered. Root privileges are used only to impersonate users as necessary."
  },
  {
    "href": "job_launcher/overview.html#overview",
    "title": "RStudio Workbench Administration",
    "section": "Overview",
    "text": "The RStudio Job Launcher provides the ability for RStudio Workbench to start processes within various batch processing systems (e.g., Slurm) and container orchestration platforms (e.g., Kubernetes). RStudio Workbench integrates with the Job Launcher to allow you to run your R Sessions within your compute cluster software of choice, and allows you to containerize your sessions for maximum process isolation and operations efficiency. Furthermore, users can submit standalone adhoc jobs to your compute cluster(s) to run computationally expensive R scripts.\n\n\n\n\n\n\nNote\n\n\n\nIntegration with the Job Launcher is not enabled in all editions of RStudio Workbench. You can run rstudio-server license-manager status to see if the Launcher is enabled. If it isn’t, contact sales@rstudio.com to purchase a license with the Job Launcher enabled."
  },
  {
    "href": "job_launcher/job_launcher.html#job-launcher",
    "title": "RStudio Workbench Administration",
    "section": "Job Launcher",
    "text": "The RStudio Job Launcher provides the ability for RStudio Workbench to start processes within various batch processing systems (e.g., Slurm) and container orchestration platforms (e.g., Kubernetes). RStudio Workbench integrates with the Job Launcher to allow you to run your R Sessions within your compute cluster software of choice, and allows you to containerize your sessions for maximum process isolation and operations efficiency. Furthermore, users can submit standalone adhoc jobs to your compute cluster(s) to run computationally expensive R scripts.\n\n\n\n\n\n\nNote\n\n\n\nIntegration with the Job Launcher is not enabled in all editions of RStudio Workbench. You can run rstudio-server license-manager status to see if the Launcher is enabled. If it isn’t, contact sales@rstudio.com to purchase a license with the Job Launcher enabled."
  },
  {
    "href": "job_launcher/creating_plugins.html#creating-plugins",
    "title": "RStudio Workbench Administration",
    "section": "Creating plugins",
    "text": "Plugins allow communication with specific batch cluster / container orchestration systems like Slurm and Kubernetes. However, you may be using a system that RStudio does not natively support. The RStudio Launcher Plugin SDK can be used to quickly develop Plugins in C/C++."
  },
  {
    "href": "biodiversity.html#converting-ct-values-to-presence-absence",
    "title": "Biodiversity analysis",
    "section": "Converting CT values to presence absence",
    "text": "We’ll start off our biodiversity analysis by converting the CT values into presence/absence. A CT of 40 indicates that the gene was not detected in that sample. We’ve converted these values to 0 to show that they are absent in that sample and the remaining values to 1 to indicate presence. After doing the transformations (not shown), we’re left with data that looks like:\n\namoA_presence_absence[1:5, 1:5]\n\n    amoA.001 amoA.002 amoA.003 amoA.004 amoA.005\n2b         1        0        1        1        1\n35b        1        0        1        1        1\n52f        0        0        0        0        1\n34f        0        0        0        0        1\n16f        1        0        1        0        1"
  },
  {
    "href": "biodiversity.html#visualizing-presence-absence",
    "title": "Biodiversity analysis",
    "section": "Visualizing presence absence",
    "text": "We can plot this data to get an idea of the richness in the samples. We’ll also separate the data by fertilization level to get an idea of the relationship between that treatment and presence/absence.\n\namoA_presence_absence %>% \n  rownames_to_column(var = \"sample_id\") %>% \n  pivot_longer(cols = amoA.001:amoA.074, names_to = \"amoA\", values_to = \"presence\") %>% \n  mutate(amoA = str_sub(amoA, -3),\n         presence = as.factor(presence)) %>% \n  left_join(metadata %>% rownames_to_column(var = \"sample_id\")) %>% \n  ggplot(aes(sample_id, amoA, fill = presence)) + \n  geom_tile(color = \"black\") +\n  labs(\n    x = \"\",\n    y = \"\",\n    fill = \"Species is...\",\n    title = \"Presence/absence of species in crop priming samples\",\n    subtitle = \"(separated by fertilization level)\"\n  ) + \n  # scale_fill_manual(values = pa_cols)\n  scale_fill_viridis_d(labels = c(\"Absent\", \"Present\"),\n                       begin = 0, end = 1,\n                       option = \"magma\") +\n  theme(\n    axis.text.x = element_blank(),\n    plot.title = element_text(hjust = 0.5),\n    plot.subtitle = element_text(hjust = 0.5),\n    # strip.background = element_rect(color = \"black\", fill = \"NA\", size = 1),\n    strip.text = element_text(size = 10, face = \"bold\")\n  ) + \n  scale_y_discrete(limits = rev) + \n  facet_wrap(~ fert_level, scales = \"free\")"
  },
  {
    "href": "load_balancing/configuration.html#lb-configuration",
    "title": "RStudio Workbench Administration",
    "section": "Configuration",
    "text": "Requirements\nThere are several requirements for nodes within RStudio clusters:\n\nAll nodes must run the same version of RStudio Workbench.\nServer configurations (i.e. contents of the /etc/rstudio directory) must be identical.\nUser accounts must be accessible from each node and usernames and user ids must be identical on all nodes. The same applies for any groups used by RStudio users, and also to the rstudio service user account.\nThe clocks on all nodes must be synchronized.\nUser home directories must be accessible via shared storage (e.g. all nodes mounting the same NFS volume).\n\n\n\n\n\n\nNote\n\n\n\nDue to high latencies, use of EFS (Elastic File System) for home directories within AWS is strongly discouraged. If EFS is used, RStudio will experience highly degraded performance. We recommend using a traditional NFSv3 or NFSv4 mount instead.\n\n\nAn explicit server-wide shared storage path also must be defined. See the Shared Storage section for additional details.\nRStudio must be configured to use a PostgreSQL database, and an empty database must be present for RStudio to write important cross-node state. If you have previously run RStudio with a SQLite database, it is strongly advised that you execute the database Migration to the PostgreSQL database first. For more information, see Database.\n\n\n\nDefining Nodes\nTo define a cluster node, two configuration files need to be provided:\n/etc/rstudio/load-balancer\n/etc/rstudio/secure-cookie-key\nThe first of these defines the available nodes and load balancing strategy. The second defines a shared key used for signing cookies (in single node configurations this key is generated automatically, however with multiple nodes explicit coordination is required. The same secure-cookie-key value must be used on each node).\nFor example, to define a cluster with two nodes that load balances based the number of actively running R sessions you could use the following configuration:\n; /etc/rstudio/load-balancer\n[config]\n\nbalancer = sessions\n\n[nodes]\n\nserver1.example.com\nserver2.example.com\n# /etc/rstudio/secure-cookie-key\na55e5dc0-d6ae-11e3-9334-000c29635f71\nThe secure cookie key file above is only an example; you need to generate your own unique key to share among the nodes in your cluster.\n\n\nKey File Requirements\nThe following are the requirements for the secure cookie key file:\n\nThe key value must have a minimum length of 128 bits (16 bytes/characters). RStudio won’t start if the key is too weak.\nThe key file must have restrictive permissions (i.e. 0600) to protect its contents from other users.\nThe key file must be identical on all nodes in a load-balanced cluster, so that the nodes can communicate with each other.\nThe key must have a secret value that cannot be guessed. Randomly generating the value is recommended; see below for one mechanism for doing so.\n\n\n\nGenerating a Key\nYou can create a secure cookie key using the uuid utility as follows:\nsudo sh -c \"echo `uuid` > /etc/rstudio/secure-cookie-key\"\nsudo chmod 0600 /etc/rstudio/secure-cookie-key\nThis is the recommended method, but any mechanism that generates a unique, random value will work.\nYou do not need to generate a secure-cookie-key file on each server; generate it once, and copy it to each node along with the rest of the /etc/rstudio directory.\nThis secure cookie key will also be used for encrypting and decrypting the PostgreSQL database password, if applicable. See PostgreSQL Password Encryption for more details.\n\nKey File Location\nYou may optionally change the path of the secure-cookie-key by changing the secure-cookie-key-file setting in rserver.conf, though it is not necessary. Changing the path in this manner is only recommended in very specific circumstances when running the launcher with both RStudio Workbench and Package Manager simultaneously. For example:\n# /etc/rstudio/rserver.conf\nsecure-cookie-key-file=/mnt/rstudio/secure-cookie-key\nIn addition, an explicit server-wide shared storage path must be defined (this is used for inter-node synchronization). This path is defined in the /etc/rstudio/rserver.conf file. For example:\n# /etc/rstudio/rserver.conf\nserver-shared-storage-path=/shared/rstudio-server/shared-storage\nFor convenience, this path will often be located on the same volume used for shared home directory storage (e.g. at path /home/rstudio-server/shared-storage).\n\n\n\nLauncher Considerations\nIf you are running RStudio Workbench load balancing in addition to using Launcher sessions, you will need to ensure that the /etc/rstudio/launcher.pub and /etc/rstudio/launcher.pem files match on all Workbench nodes in the cluster. Failure to do so will prevent users from being able to connect to their sessions from Workbench nodes other than where their sessions were initiated.\nFor more information, see RStudio Workbench Integration.\n\n\nFile Locking\nIn order to synchronize the creation of sessions across multiple nodes RStudio Workbench uses a cross-node locking scheme. This scheme relies on the clocks on all nodes being synchronized. RStudio Workbench includes a locktester utility which you can use to verify that file locking is working correctly. To use the locktester you should login (e.g. via SSH or telnet) to at least two nodes using the same user account and then invoke the utility from both sessions as follows:\n$ /usr/lib/rstudio-server/bin/locktester\nThe first node you execute the utility from should indicate the types of locks it was able to acquire, for example:\n* Acquired advisory lock\n* Acquired link-based lock\nAfter the message is printed the process will pause so that it can retain the lock (you can cause it to release the lock by interrupting it e.g. via Ctrl+C).\nThe second and subsequent nodes you execute the utility will attempt to acquire the lock. A message will be printed to the console indicating which type of locks are supported, for example:\n* Acquired advisory lock\n* Unable to acquire link-based lock\n\nYour filesystem appears to support link-based locks.\nIn this example, advisory locks are not supported (because both nodes were able to acquire an advisory lock), but link-based locks are. See Lock Configuration for more information on configuring lock types.\nIf you interrupt the first node (e.g. via Ctrl+C) the lock will be released and you can then acquire it from the other nodes.\nIf either of the following occurs then there is an issue with file locking capabilities (or configuration) that should be addressed prior to using load balancing:\n\nAll nodes successfully acquire the file lock (i.e. more than one node can hold it concurrently).\nNo nodes are able to acquire the file lock.\n\nIf either of the above conditions hold then RStudio won’t be able to correctly synchronize the creation of R sessions throughout the cluster (potentially resulting in duplicate sessions and lost data due to sessions overwriting each others state).\n\nLock Configuration\nRStudio’s file locking scheme can be configured using a file at /etc/rstudio/file-locks. Valid entries are:\n\nlock-type=[linkbased|advisory]\nrefresh-rate=[seconds]\ntimeout-interval=[seconds]\nenable-logging=[0|1]\nlog-file=[path]\n\nThe default locking scheme, linkbased, uses a file locking scheme whereby locks are considered acquired when the process successfully hardlinks a dummy file to a location within the folder RStudio uses for client state (typically ~/.local/share/rstudio). This scheme is generally more robust with older network file systems, and the locks should survive temporary filesystem mounts / unmounts.\nThe timeout-interval and refresh-rate options can be used to configure how often the locks generated in the linkbased locking scheme are refreshed and reaped. By default, a process refreshes any locks it owns every 20 seconds, and scans for stale locks every 30 seconds. If an rsession process crashes, it can leave behind stale lock files; those lock files will be cleaned up after they expire by any newly-launched rsession processes.\nadvisory can be selected to use advisory file locks (using e.g. fcntl() or flock()). These locks are robust, but are not supported by all network file systems.\nIf you are having issues with file locking, you can set enable-logging=1, and set the log-file option to a path where output should be written. When logging is enabled, RStudio will report its attempts to acquire and release locks to the log file specified by log-file. When log-file is unset, log entries will be emitted to the system logfile, typically located at /var/log/messages or /var/lib/syslog.\n\n\n\nManaging Nodes\n\nStarting Up\nAfter creating your configuration files you should ensure that these files (along with all other configuration defined in /etc/rstudio) are copied to all nodes in the cluster. Assuming that the server is already installed and running on each node, you can then apply the load balancing configuration by restarting the server:\nsudo rstudio-server restart\n\n\nCurrent Status\nOnce the cluster is running you can inspect its state (which sessions are running where) using the load balancing status HTTP endpoint. For example, when running the server on the default port (8787):\ncurl http://localhost:8787/load-balancer/status\nNote that the status endpoint is accessed using localhost rather than an external IP address. This is because this endpoint is IP restricted to only be accessible within the cluster, so needs to be accessed directly from one of the nodes.\nThe status endpoint will return output similar to the following:\n192.168.55.101:8787  Load: 0.45, 0.66, 0.32\n   12108 - jdoe\n   12202 - kmccurdy\n\n192.168.55.102:8787  Load: 1, 0.75, 0.31\n   3404 - bdylan\n\n192.168.55.103:8787 (unreachable)  Load: 0, 0, 0\n\n192.168.55.104:8787 (offline)  Load: 0.033, 0.38, 0.24\nThis output will show all of the nodes in the cluster. Each node is indicated by its address and an optional status indicating whether the node is unreachable or offline. If the node does not indicate a status, then it is healthy and servicing requests. Following the node address is its CPU Load, indicated by three decimal values indicating the last known 1-minute, 5-minute, and 15-minute load averages, represented as a fraction of total CPU load. On subsequent output lines, each RStudio IDE session that is running on that particular node is listed along with its process ID and running user.\nAn unreachable node indicates an issue connecting to it via the network. In most cases, this indicates that the rstudio-server service is not running on the node and should be troubleshooted by viewing any startup issues in the system logs for that particular node (see Diagnostics if the service is running and healthy). An offline node is one that was specifically put into offline mode via the command sudo rstudio-server offline, which causes it to stop servicing new sessions.\n\n\nAdding and Removing Nodes\nTo temporarily remove a node from the cluster you can simply stop it:\nsudo rstudio-server stop\nR sessions running on that node will be automatically moved to another active node. Note that only the session state is moved, not the running processes. To restore the node you can simply start it back up again:\nsudo rstudio-server start\nNote that removing nodes does not require changing the list of defined nodes in /etc/rstudio/load-balancer (traffic is automatically routed around nodes not currently running).\nTo add new nodes, simply add the nodes to the /etc/rstudio/load-balancer configuration file and send the SIGHUP signal to the rserver process (e.g., via sudo rstudio-server reload). It is recommended that this should be done to all nodes in the cluster, but depending on your routing configuration, at a minimum the node selected as the “main” node MUST be updated and signaled to start routing traffic to the new node(s).\nWhen removing nodes from the configuration file via the SIGHUP signal, you must ensure that any removed nodes have their processes stopped by running sudo rstudio-server stop on that node. Alternatively, you can suspend any actively running sessions by running sudo rstudio-server suspend-all on the node to be removed. Failure to do this will cause existing sessions running on the removed node to be stuck in an inaccessible state, and users will not be able to connect to those sessions.\nReloading the load balancer configuration will also cause the rserver-http proxy configuration to be updated as well, which affects the RStudio’s running HTTP server. It is recommended that you do not make any other HTTP-related changes when updating the load balancer configuration unless you are aware of the potential side-effects!\n\n\n\nTroubleshooting\nIf users are having difficulty accessing RStudio in a load balanced configuration it’s likely due to one of the load balancing requirements not being satisfied. This section describes several scenarios where a failure due to unsatisfied requirements might occur.\n\nNode network instability\nSome scenarios may causes RStudio to wait a long time for a node to respond due to network instability. You can limit how long is this waiting period with the timeout option, which is set to 10 seconds by default. This disable this timeout and use the system defaults, set it to zero.\n; /etc/rstudio/load-balancer\n[config]\n\nbalancer = sessions\ntimeout = 5\n...\n\n\nSSL\nIf one of the nodes is temporarily using a self-signed or otherwise functional but invalid certificate the load balancer may fail to use that node. You can skip SSL certificate verification by disabling the option verify-ssl-certs, which is only applicable if connecting over HTTPS. For production use, you should always leave the default or have this set to true, but it can be disabled for testing purposes.\n; /etc/rstudio/load-balancer\n[config]\n\nbalancer = sessions\nverify-ssl-certs = 0\n...\n\n\nUser Accounts Not Synchronized\nOne of the load balancing requirements is that user accounts must be accessible from each node and usernames and user ids must be identical on all nodes. If a user has the same username but different user ids on different nodes then permissions problems will result when the same user attempts to access shared storage using different user-ids.\nYou can determine the ID for a given username via the id command. For example:\nid -u jsmith\n\n\nNFS Volume Mounting Problems\nIf NFS volumes containing shared storage are unmounted during an RStudio session that session will become unreachable. Furthermore, unmounting can cause loss or corruption of file locks (see section below). If you are having problems related to accessing user directories then fully resetting the connections between RStudio nodes and NFS will often resolve them. To perform a full reset:\n\nStop RStudio on all nodes (sudo rstudio-server stop).\nFully unmount the NFS volume from all nodes.\nRemount the NFS volume on all nodes.\nRestart RStudio on all nodes (sudo rstudio-server start).\n\n\n\nFile Locking Problems\nShared user storage (e.g. NFS) must support file locking so that RStudio can synchronize access to sessions across the various nodes in the cluster. File locking will not work correctly if the clocks on all nodes in the cluster are not synchronized. This condition may be surfaced as 502 HTTP errors. You can verify that file locking is working correctly by following the instructions in the File Locking section above.\n\n\nDiagnostics\nTo troubleshoot more complicated load balancing issues, RStudio can output detailed diagnostic information about internal load balancing traffic and state. You can enable this by using the diagnostics setting as follows:\n[config]\ndiagnostics = tmp\nSet this on every server in the cluster, and restart the servers to apply the change. This will write a file /tmp/rstudio-load-balancer-diagnostics on each server containing the diagnostic information.\nThe value stderr can be used in place of tmp to send diagnostics from the rserver process to standard error instead of a file on disk; this is useful if your RStudio Workbench instance runs non-daemonized."
  },
  {
    "href": "load_balancing/access_and_availability.html#access-and-availability",
    "title": "RStudio Workbench Administration",
    "section": "Access and Availability",
    "text": "Once you’ve defined a cluster and brought it online you’ll need to decide how the cluster should be addressed by end users. There are two distinct approaches to this:\n\nSingle Node Routing. Provide users with the address of one of the nodes. This node will automatically route traffic and sessions as required to the other nodes. This has the benefit of simplicity (no additional software or hardware required) but also results in a single point of failure.\nMultiple Node Routing. Put the nodes behind some type of system that routes traffic to them (e.g. dynamic DNS or a software or hardware load balancer). While this requires additional configuration it also enables all of nodes to serve as points of failover for each other.\n\nBoth of these options are described in detail below.\n\nSingle Node Routing\nIn a Single Node Routing configuration, you designate one of the nodes in the cluster as the main one and provide end users with the address of this node as their point of access. For example:\n[nodes]\nrstudio.example.com\nrstudio2.example.com\nrstudio3.example.com\nUsers would access the cluster using http://rstudio.example.com. This node would in turn route traffic and sessions both to itself and the other nodes in the cluster in accordance with the active load balancing strategy.\nNote that in this configuration the rstudio2.example.com and rstudio3.example.com nodes can either fail or be removed from the cluster at any time and service will continue to users. However, if the main node fails or is removed then the cluster is effectively down.\n\n\nMultiple Node Routing\nIn a Multiple Node Routing configuration all of the nodes in the cluster are peers and provide failover for each other. This requires that some external system (dynamic DNS or a load balancer) route traffic to the nodes; see below for examples and caveats. In this scenario any of the nodes can fail and service will continue, so long as the external router can respond intelligently to a node being unreachable.\nFor example, here’s an Nginx reverse-proxy configuration that you could use with the cluster defined above:\nhttp {\n  upstream rstudio-server {\n    server rstudio1.example.com;\n    server rstudio2.example.com backup;\n    server rstudio3.example.com backup;\n  }\n  server {\n    listen 80;\n    location / {\n      proxy_pass http://rstudio-server;\n      proxy_redirect http://rstudio-server/ $scheme://$host/;\n    }\n  }\n}\nIn this scenario the Nginx software load balancer would be running on rstudio.example.com and reverse proxy traffic to rstudio1.example.com, rstudio2.example.com, etc. Note that one node is designated by convention as the main one so traffic is routed there by default. However, if that node fails then Nginx automatically makes use of the backup nodes.\nThis is merely one example as there are many ways to route traffic to multiple servers—RStudio Workbench load balancing is designed to be compatible with all of them.\n\n\nExternal Load Balancers\nWhen using an external load balancer with a Multiple Node Routing configuration, the external load balancer may be configured as active/active or active/passive.\nRStudio Workbench load balances all requests internally in an active/active way, deciding where new sessions will be started, and routing requests to existing sessions, regardless which RStudio node received the initial request from the external load balancer. The RStudio node that receives the request will re-route the request appropriately. Therefore, the external load balancer does not determine which RStudio node will respond to the request.\n\nExternal load balancer configured as active/passive: All requests are routed by the external load balancer to a single RStudio node. If that node becomes unavailable or unresponsive, the external load balancer will select a different RStudio node. The RStudio node may route the request to another node to handle the request. The external load balancer provides failover / high availability, while RStudio Workbench’s load balancer provides scalability across nodes.\nExternal load balancer configured as active/active: Per above, RStudio Workbench’s internal load balancer may re-route the request to another node. Consequently, having the external load balancer select different nodes per request will not actually help balance the session load. Again, the external load balancer provides high availability, while scalability is still provided by the internal load balancer.\n\n\n\nUsing SSL\nIf you are running RStudio Workbench on a public facing network then using SSL encryption is strongly recommended. Without this all user session data is sent in the clear and can be intercepted by malicious parties.\nThe recommended SSL configuration depends on which access topology you’ve deployed.\n\nSingle Node Routing\nFor a Single Node Routing deployment, you would configure each node of the cluster to use SSL as described in the Secure Sockets (SSL) section. The nodes will then use SSL for both external and intra-machine communication.\n\n\n\n\n\n\nNote\n\n\n\nIn this configuration, you must ensure that your load-balancer file lists the hostname in the same format listed on host’s SSL certificate in the Common Name (CN) or Subject Alternative Name (SAN) field, so that the nodes are able to validate each others’ certificates when connecting.\n\n\n\n\nMultiple Node Routing\nFor a Multiple Node Routing deployment, you would configure SSL within the external routing layer (e.g. the Nginx server in the example above) and use standard unencrypted HTTP for the individual nodes. You can optionally configure the RStudio nodes to use SSL as well, but this is not strictly required if all communication with outside networks is done via the external routing layer."
  },
  {
    "href": "load_balancing/load_balancing.html#load-balancing",
    "title": "RStudio Workbench Administration",
    "section": "Load Balancing",
    "text": "RStudio Workbench can be configured to load balance R sessions across two or more nodes within a cluster. This provides both increased capacity as well as higher availability.\nLoad balancing with RStudio Workbench always operates in an active-active fashion where all nodes are equally equipped to serve users. All nodes have a primary role.\nNote that load balancing for RStudio Workbench has some particular “stickiness” requirements stemming from the fact that users must always return to the same R session where their work resides (i.e. their traffic can’t be handled by more than one node). As a result, it’s not enough to simply place multiple RStudio Workbench servers behind a conventional hardware or software load balancer—additional intelligence and routing is required.\nKey characteristics of the RStudio Workbench load balancer include:\n\nMultiple primary nodes for high availability - all nodes can balance traffic to all other nodes.\nSupport for several load balancing strategies including least busy server (by active sessions or system load), even distribution by user, or a custom strategy based on an external script.\nThe ability to add and remove nodes while the cluster is running.\nWorks standalone or can be integrated with other front-end load balancing environments.\n\n\n\n\n\n\n\nNote\n\n\n\nThe standalone load balance and higher availability characteristics of RStudio Workbench are an exception among RStudio products. RStudio Connect and Shiny Server will require a front-end load balancing under the same scenarios. The use of an external load balancer can still be beneficial in a failover setup. See [External Load Balancers] below for details."
  },
  {
    "href": "load_balancing/balancing_methods.html#balancing-methods",
    "title": "RStudio Workbench Administration",
    "section": "Balancing Methods",
    "text": "There are four methods available for balancing R sessions across a cluster. The most appropriate method is installation specific and depends on the number of users and type of workloads they create.\n\nSessions\nThe default balancing method is sessions, which attempts to evenly distribute R sessions across the nodes of the cluster:\n[config]\nbalancer = sessions\nThis method allocates new R sessions to the node with the least number of active R sessions. This is a good choice if you expect that users will for the most part have similar resource requirements.\n\n\nSystem Load\nThe system-load balancing method distributes sessions based on the active workload of available nodes:\n[config]\nbalancer = system-load\nThe metric used to establish active workload is the 5-minute load average, divided by the number of cores on the machine. This is a good choice if you expect widely disparate CPU workloads and want to ensure that machines with high CPU utilization don’t receive new sessions.\n\n\nUser Hash\nThe user-hash balancing method attempts to distribute load evenly and consistently across nodes by hashing the username of clients:\n[config]\nbalancer = user-hash\nThe hashing algorithm used is CityHash, which will produce a relatively even distribution of users to nodes. This is a good choice if you want the assignment of users/sessions to nodes to be stable.\n\n\nCustom\nThe custom balancing method calls out to external script to make load balancing decisions:\n[config]\nbalancer = custom\nWhen custom is specified, RStudio Workbench will execute the following script when it needs to make a choice about which node to start a new session on:\n/usr/lib/rstudio-server/bin/rserver-balancer\nThis script will be passed two environment variables:\nRSTUDIO_USERNAME — The user on behalf or which the new R session is being created.\nRSTUDIO_NODES — Comma separated list of the host and port of available nodes.\nThe script should return the node to start the new session on using its standard output. Note that the format of the returned node should be identical to its format as passed to the script (i.e. include the host and port).\n\nNode Host Format\nIn earlier versions of RStudio, the custom load balancing script would always be passed a list of raw IP addresses in RSTUDIO_NODES; now, RSTUDIO_NODES will contain the hosts as specified in the load-balancer file. If you want to specify host names in your load-balancer file but work with raw IPs in your custom load balancing script, you can set the following option:\n# /etc/rstudio/rserver.conf\nresolve-load-balancer-nodes=1\nNote that this option is incompatible with SSL unless your servers’ SSL certificates contain IP addresses in their CN/SAN."
  },
  {
    "href": "load_balancing/load_balancing_vs_job_launcher.html#load-balancing-vs.-job-launcher",
    "title": "RStudio Workbench Administration",
    "section": "Load Balancing vs. Job Launcher",
    "text": "The Job Launcher is another method supported by RStudio Workbench to achieve increased capacity by allowing sessions to run using a compatible computing infrastructure (i.e. Kubernetes). However, the Job Launcher does not aim to provide higher availability. At least two RStudio Workbench nodes in a load balancing configuration are still required to provide service continuity in failover scenarios.\n\n\n\n\n\n\nNote\n\n\n\nThe Job Launcher itself can have its own load balancing strategy in place. See the loading balancing section in the Job Launcher documentation for more details."
  },
  {
    "href": "load_balancing/overview.html#overview",
    "title": "RStudio Workbench Administration",
    "section": "Overview",
    "text": "RStudio Workbench can be configured to load balance R sessions across two or more nodes within a cluster. This provides both increased capacity as well as higher availability.\nLoad balancing with RStudio Workbench always operates in an active-active fashion where all nodes are equally equipped to serve users. All nodes have a primary role.\nNote that load balancing for RStudio Workbench has some particular “stickiness” requirements stemming from the fact that users must always return to the same R session where their work resides (i.e. their traffic can’t be handled by more than one node). As a result, it’s not enough to simply place multiple RStudio Workbench servers behind a conventional hardware or software load balancer—additional intelligence and routing is required.\nKey characteristics of the RStudio Workbench load balancer include:\n\nMultiple primary nodes for high availability - all nodes can balance traffic to all other nodes.\nSupport for several load balancing strategies including least busy server (by active sessions or system load), even distribution by user, or a custom strategy based on an external script.\nThe ability to add and remove nodes while the cluster is running.\nWorks standalone or can be integrated with other front-end load balancing environments.\n\n\n\n\n\n\n\nNote\n\n\n\nThe standalone load balance and higher availability characteristics of RStudio Workbench are an exception among RStudio products. RStudio Connect and Shiny Server will require a front-end load balancing under the same scenarios. The use of an external load balancer can still be beneficial in a failover setup. See [External Load Balancers] below for details."
  },
  {
    "href": "authenticating_users/proxied_authentication.html#proxied-authentication",
    "title": "RStudio Workbench Administration",
    "section": "Proxied Authentication",
    "text": "You can configure RStudio Workbench to participate in an existing web-based single-sign-on authentication scheme using proxied authentication. In this configuration all traffic to RStudio Workbench is handled by a proxy server which also handles user authentication.\nIn this configuration the proxy server adds a special HTTP header to requests to RStudio Workbench letting it know which authenticated user is making the request. RStudio Workbench trusts this header, launching and directing traffic to an R session owned by the specified user.\nThe specified user must have a local system account on the server. You should set up local system accounts manually and then map authenticating users to these accounts.\n\nEnabling Proxied Authentication\nTo enable proxied authentication you need to specify both the auth-proxy and auth-proxy-sign-in-url settings (the sign-in URL is the absolute URL to the page that users should be redirected to for sign-in). For example:\n# /etc/rstudio/rserver.conf\nauth-proxy=1\nauth-proxy-sign-in-url=http://example.com/sign-in\n\n\n\n\n\n\nImportant\n\n\n\nOnce you enable authentication with a proxy, that becomes the exclusive means of authentication - you can’t concurrently use both PAM and proxied authentication.\n\n\n\n\n\n\n\n\nImportant\n\n\n\nProxied authentication still requires PAM Sessions and sssd to automatically create local system accounts. Without them, local system accounts have to be provisioned manually one-by-one.\n\n\n\n\nImplementing the Proxy\n\nSign In and Sign Out URLs\nThe sign in URL should host a page where the user specifies their credentials (this might be for example the main page for an existing web-based authentication system). After collecting and authorizing the credentials the sign in URL should then redirect back to the URL hosting RStudio Workbench.\nRStudio will redirect to the sign in URL under the following conditions:\n\nWhenever an HTTP request that lacks the username header is received by the server; and\nWhen the user clicks the “Sign out” button in the RStudio IDE user interface and there is no Sign Out URL available.\n\nThe sign out URL should host a page responsible for finishing the user session in the authentication proxy. If such a URL is URL available in your proxy, the absolute URL should be configured in RStudio using the setting auth-proxy-sign-out-url. When the user clicks the “Sign out” button in the RStudio IDE user interface the browser will be taken to the configured sign out URL.\n# /etc/rstudio/rserver.conf\nauth-proxy-sign-out-url=http://example.com/sign-out\nYou should be sure in setting up the proxy server that traffic bound for the sign-in and sign-out URLs is excluded from forwarding to RStudio Workbench (otherwise it will end up in an infinite redirect loop).\n\n\nSign-In Delay\nDuring proxied authentication in RStudio, there is a brief transition page that shows the username and some other information. By default this transition happens almost immediately. If you wish to present this page for a longer period of time, you can use the option auth-proxy-sign-in-delay to delay the transition for some seconds.\n# /etc/rstudio/rserver.conf\nauth-proxy-sign-in-delay=4\n\n\nForwarding the Username\nWhen proxying pre-authenticated traffic to RStudio Workbench you need to include a special HTTP header (by default X-RStudio-Username) with each request indicating which user the request is associated with. For example:\nX-RStudio-Username: jsmith\nIt’s also possible to specify both a system username and a display username (in the case where system accounts are dynamically provisioned and don’t convey actual user identity). For example, if the system user is ruser24 but the displayed username is jsmith, you could use:\nX-RStudio-Username: rsuser24/jsmith\n\n\n\n\n\n\nNote\n\n\n\nIt is highly recommended that you do not use the default X-RStudio-Username header name. The reasons for this are described in the section on security considerations below.\n\n\n\n\nRewriting Usernames\nIt may be that the proxy system you are using sends the username in a format that doesn’t match that of users on the system, however can be easily transformed to one that does (e.g. it has a standard prefix before the username). If this is the case you can specify the auth-proxy-user-header-rewrite option to provide a re-write rule for the inbound header. For example, the following rule strips the prefix “UID-” from a username header:\nauth-proxy-user-header-rewrite=^UID-([a-z]+)$ $1\nThe format of a re-write rule is a regular expression followed by a space and then a replacement string. The replacement string can reference captured parts of the regular expression using $1, $2, etc. Consult the Boost Perl Regular Expression Syntax reference for more syntax documentation.\n\n\n\nProxy Security Considerations\nWhen using proxied authentication, RStudio trusts that the proxy is the only element in the network capable of sending the special header with the username. Be sure to follow the recommendations below to decrease security risks in your implementation.\n\nKeeping the Header Name Secret\nUsing the default header name X-RStudio-Username creates a security problem: code running behind the proxy (e.g., code within R sessions) could form requests back to the server which impersonate other users (by simply inserting the header in their request).\nTo prevent this issue you can specify a custom header name which is kept secret from end users. This is done by creating a special configuration file (/etc/rstudio/secure-proxy-user-header) that contains the name of the header, and then setting it’s file permissions so that it’s not readable by normal users. For example:\nsudo sh -c \"echo 'X-Secret-User-Header' > /etc/rstudio/secure-proxy-user-header\"\nsudo chmod 0600 /etc/rstudio/secure-proxy-user-header\n\n\nPreventing Remote Use of the Header\nWhen implementing the proxy it’s important to remember that RStudio Workbench will always trust the username header to authenticate users. It’s therefore critical from the standpoint of security that all requests originating from the proxy have this header set explicitly by the proxy (as opposed to allowing the header to be specified by a remote client). RStudio will reject requests containing multiple occurrences of the username header.\n\n\nPreventing Internal Access\n\n\n\n\n\n\nNote\n\n\n\nIn previous versions, RStudio offered the option auth-proxy-require-hmac to require trust signatures from the proxy, though most proxies have no straightforward means for providing this signature. Therefore, this option has been retired. Following the recommendation below mitigates the same security risks previously covered by the option. If your installation used this option, it should removed from /etc/rstudio/rserver.conf. RStudio will refuse to start if this option is still present and enabled.\n\n\nYour RStudio and proxy configuration should be done in a way where it is impossible for anything other than the proxy to make requests to RStudio. Be sure that:\n\nRStudio is configured to listen on a network interface not accessible internally by other processes by adjusting the option www-address.\nThe network interface where RStudio is running must have firewall settings to prevent any connection to RStudio other than from the proxy.\n\n\n\n\n\n\n\nImportant\n\n\n\nThis should not be considered an exhaustive list. Please consult with your security personnel or IT administrators to determine the exact measures to protect RStudio authentication via a proxy.\n\n\n\n\n\nTroubleshooting with Access Logs\nIf you want to see exactly which requests RStudio is receiving and whether they include the expected username information, you can temporarily enable server access logs using the server-access-log setting as follows:\n# /etc/rstudio/rserver.conf\nserver-access-log=1\nAfter restarting RStudio the following file will contain a record of each HTTP request made to the server along with it’s HTTP response code:\n/var/log/rstudio-server/rserver-http-access.log\nThe log file will contain entries that look like this:\n127.0.0.1 - - [29/Jun/2015:06:30:41 -0400] \"GET /s/f01ddf8222bea98a/ HTTP/1.1\"\n200 91 \"http://localhost:8787/s/f01ddf8222bea98a/\" \"Mozilla/5.0 (X11; Linux x86_64)\nAppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.125 Safari/537.36\" \"jsmith\"\nNote that the very last item in the log file entry is \"jsmith\". This is the username that RStudio read from the header passed by the proxy server. If this shows up as blank (\"-\") then your proxy server isn’t forwarding the header or using the correct header name in forwarding.\n\n\n\n\n\n\nImportant\n\n\n\nOnce you’ve concluded troubleshooting it’s important that you remove the server-access-log=1 option from the /etc/rstudio/rserver.conf file (since this log file is not rotated it will eventually consume a large amount of disk space if you don’t remove the option)."
  },
  {
    "href": "authenticating_users/pam_authentication.html#pam-authentication",
    "title": "RStudio Workbench Administration",
    "section": "PAM Authentication",
    "text": "By default, RStudio authenticates users via the Linux standard PAM API. PAM itself is typically configured by default to authenticate against the system user database (/etc/passwd) however it can also be configured to authenticate against a wide variety of other systems including Active Directory, LDAP, and Kerberos.\n\n\n\n\n\n\nNote\n\n\n\nPAM can be used for both authentication as well as to tailor the environment for users with PAM sessions. This section only describes PAM for the purposes of authentication\n\n\n\nDefault PAM Configuration\nDebian / Ubuntu\nOn Debian and Ubuntu systems RStudio does not provide an RStudio specific PAM configuration file. As a result, RStudio uses the /etc/pam.d/other profile, which by default inherits from a set of common configuration files:\n/* /etc/pam.d/other */\n  @include common-auth\n  @include common-account\n  @include common-password\n  @include common-session\nIf the /etc/pam.d/other profile reflects the authentication system and policies that you’d like RStudio to use then no further configuration is required. If you want to create a custom PAM profile for RStudio you would create a file named /etc/pam.d/rstudio and specify whatever settings are appropriate.\nRedHat / CentOS / SUSE\nOn RedHat, CentOS and SUSE systems applications without their own PAM profiles are denied access by default. Therefore to ensure that RStudio is running and available after installation a default PAM profile is installed at /etc/pam.d/rstudio. This profile is configured to require a user-id greater than 500 and to authenticate users against local system accounts:\n; /etc/pam.d/rstudio\nauth      requisite      pam_succeed_if.so uid >= 500 quiet\nauth      required       pam_unix.so nodelay\naccount   required       pam_unix.so\nThis default PAM profile may not reflect the authentication behavior that you want for RStudio. In that case, some customization may be required. If you’ve already set up another PAM profile (e.g. /etc/pam.d/login) with the desired behavior then it may be enough to simply copy that profile over the RStudio one. For example:\n$ sudo cp /etc/pam.d/login /etc/pam.d/rstudio\n\n\nDiagnosing PAM Authentication Problems\nIf you are unable to log into RStudio there may be an underlying problem with the PAM configuration. The best way to diagnose PAM configuration problems is to use the pamtester utility (which is bundled with RStudio). Using pamtester enables you to test authentication in an isolated environment as well as to see much more detailed diagnostics.\nThe pamtester utility is located at /usr/lib/rstudio-server/bin/pamtester. To invoke it you pass several arguments indicating the PAM profile to test, the user to test for, and whether you want verbose output. For example:\n$ sudo /usr/lib/rstudio-server/bin/pamtester --verbose rstudio <username> authenticate\nYou can find more detailed documentation on using pamtester here: http://linux.die.net/man/1/pamtester.\nAdditionally, RStudio expects the PAM password prompt text when logging in to be Password:. If you use a nonstandard password prompt, you must disable strict prompt matching by modifying /etc/rstudio/rserver.conf like so:\nauth-pam-require-password-prompt=0"
  },
  {
    "href": "authenticating_users/user_provisioning.html#user-provisioning",
    "title": "RStudio Workbench Administration",
    "section": "User Provisioning",
    "text": "It is a common practice in Linux environments to configure sssd to fetch users and groups from an LDAP or Active Directory server to automate the creation (provisioning) of local system accounts.\nIn addition to user creation, sssd can also be configured to authenticate or authorize users via PAM using the pam_sss module.\n\n\n\n\n\n\nNote\n\n\n\nnss is an older alternative to sssd that also has LDAP synchronization capabilities. However, differently from sssd, it offers no support for authentication.\n\n\n\n\n\n\n\n\nImportant\n\n\n\nWhen a user has an active session in RStudio, changes to his or her local account name (username) or uid are not supported and it can lead to unexpected behaviors in RStudio."
  },
  {
    "href": "authenticating_users/restricting_access.html#restricting-access-to-specific-users",
    "title": "RStudio Workbench Administration",
    "section": "Restricting Access to Specific Users",
    "text": "Minimum User Id\nBy default RStudio only allows normal (as opposed to system) users to successfully authenticate. The minimum user id is determined by reading the UID_MIN value from the /etc/login.defs file. If the file doesn’t exist or UID_MIN isn’t defined within it then a default value of 1000 is used.\nYou change the minimum user id by specifying the auth-minimum-user-id option. For example:\n# /etc/rstudio/rserver.conf\nauth-minimum-user-id=100\nNote that it’s possible that your PAM configuration is also applying a constraint on user-ids (see the Default PAM Configuration section above for an example). In this case you should ensure that the auth-minimum-user-id is consistent with the value specified in your PAM configuration.\nIf your users are using very large UIDs (above 1048575/0xFFFFF), it is strongly recommended to set the auth-minimum-user-id value to enable RStudio to make better assumptions when mapping user identifiers to projects.\n\n\nRestricting by Group\nYou can specify that only users of certain groups are allowed to access RStudio. To do this you use the auth-required-user-group setting. For example:\n# /etc/rstudio/rserver.conf\nauth-required-user-group=rstudio-users\nYou can specify a single group as the above example does or a comma-delimited list of groups. For example:\n# /etc/rstudio/rserver.conf\nauth-required-user-group=analysts,admins,rstudio-users\nNote that this change will not take effect until the server is restarted.\n\nCreating and Managing Group Membership\nTo create a new group you use the groupadd command:\n$ sudo groupadd <groupname>\nTo add a user to an existing group you use the usermod command:\n$ sudo usermod -a -G <groupname> <username>\nNote that it’s critical that you include the -a flag as that indicates that the group should be added to the user rather than replace the user’s group list in it’s entirety."
  },
  {
    "href": "authenticating_users/openid_connect_authentication.html#openid-connect-authentication",
    "title": "RStudio Workbench Administration",
    "section": "OpenID Connect Authentication",
    "text": "RStudio Workbench can be configured to authenticate users via OpenID Connect. This enables users to log in with their existing Single Sign-On (SSO) credentials and to be automatically authenticated to RStudio whenever they are already logged into their OpenID Provider (OP) account.\n\nEnabling OpenID Connect\nTo enable authentication with OpenID you add the auth-openid option to the RStudio configuration file:\n# /etc/rstudio/rserver.conf\nauth-openid=1\n\n\n\n\n\n\nImportant\n\n\n\nOnce you enable authentication with OpenID, that becomes the exclusive means of authentication (you can’t concurrently use both PAM and OpenID authentication).\n\n\n\n\n\n\n\n\nImportant\n\n\n\nOpenID authentication still requires PAM Sessions and sssd to automatically create local system accounts. Without them, local system accounts have to be provisioned manually one-by-one.\n\n\n\n\nConfiguring your OpenID Provider\nIn order to use OpenID with RStudio Workbench you need to register your server on your OP first.\n\n\n\n\n\n\nNote\n\n\n\nRStudio Workbench supports the OAuth2 “Authorization Code” flow with OpenID.\n\n\n\nOpenID URLs\nRStudio Workbench expects an OAuth2 callback in order to complete the OpenID authentication. The endpoint responsible for handling this callback from the OP is localted at /openid/callback. For example, if your RStudio Workbench server is hosted at https://rstudio.example.com/ the callback URL will be https://rstudio.example.com/openid/callback. While registering RStudio Workbench on your OpenID Provider, this URL will be requested. Your server URL may also be requested as part of that setup.\n\n\nClient Credentials\nAs part of the RStudio Workbench registration on your OP, a “client ID” and a “client secret” may be presented to you. You need to add a configuration file (/etc/rstudio/openid-client-secret) containing the client-id and client-secret. For example, the configuration file might look like this:\n# /etc/rstudio/openid-client-secret\nclient-id=lllllllllllll-xxxxxxxxxxxxxxxxxxxxxx\nclient-secret=BhCC6rK7Sj2ZtPH0ord7lO1w\nThe /etc/rstudio/openid-client-secret file should have user read/write file permissions (i.e., 0600) to protect its contents from other users. You can ensure this as follows:\n$ sudo chmod 0600 /etc/rstudio/openid-client-secret\n\n\n\n\n\n\nImportant\n\n\n\nThe above client-id and client-secret aren’t the actual values you’ll use. Rather, you should substitute the values that you obtained from your OP when registering your site for OAuth 2.0 authentication.\n\n\n\nClient Secret Encryption\nAn unencrypted value in the client-secret option of the /etc/rstudio/openid-client-secret file must only be used temporarily for testing purposes. A warning will be present in RStudio log output when an unencrypted secret is being used.\nWe strongly recommend encrypting the client secret using the command rstudio-server encrypt-password. This way, if you have to backup your configuration, save it to a repository or share it with RStudio Support, your OpenID client secret will be protected.\nUse the following steps to encrypt the OpenID client secret:\n\nRun the command sudo rstudio-server encrypt-password and enter the client secret.\nCopy the resulting encrypted secret printed in the terminal.\nAdd or replace the client-secret option in the openid-client-secret file using the encrypted secret copied above.\nRestart RStudio. Confirm it operates normally. You should no longer see a warning about unencrypted secret in RStudio logs.\n\n\n\n\n\n\n\nNote\n\n\n\nAlternatively, you can also “pipe” your secret to the rstudio-server encrypt-password command to skip the prompt. Useful when the secret is already stored elsewhere. For example:\ncat secretfile | sudo rstudio-server encrypt-password\n\n\n\n\n\nOpenID Issuer and Well-Known configuration\nRStudio Workbench also needs to be configured to be able to authenticate the authorization codes returned by the OP. In order to do that, RStudio needs to know the location of the OP with its “issuer” URL. This can be done by adding the option auth-openid-issuer. This must be an HTTPS URL and the location of the /.well-known/openid-configuration metadata discovery. For example, if your OpenID issuer is https://op.example.com/ the discovery endpoint should be https://op.example.com/.well-known/openid-configuration.\n# /etc/rstudio/rserver.conf\nauth-openid-issuer=https://op.example.com\n\n\nOpenID Claims\nYour OP must return at least one claim matching the user’s Linux account username (lowercase). By default, RStudio Workbench will look for a claim called preferred_username (case-sensitive). If you wish to use a different claim, add the option auth-openid-username-claim with the appropriate value.\n# /etc/rstudio/rserver.conf\nauth-openid-username-claim=other\n\n\n\nAdvanced Options\nDepending on your choice for the username claim your OpenID Provider may require the initial request to contain a certain “scope”. RStudio Workbench automatically includes the scopes openid, email and profiles as part of the authentication. If you wish to include additional scopes, use the option auth-openid-scopes with a space-separated list of values.\n# /etc/rstudio/rserver.conf\nauth-openid-scopes=scope1 scope2\n\n\n\n\n\n\nImportant\n\n\n\nQuotation marks are not accepted around the scope values.\n\n\n\n\nProxy Considerations\nIf you are running RStudio behind a proxy, you will need to configure your proxy in a way that RStudio can tell the OP to redirect back to the correct location. There are number of options to choose from as described in Running with a Proxy.\nThe use of the X-RStudio-Request header in your proxy is recommended and the only method which works behind a path-rewriting proxy. In this case, the proxy must set the X-RStudio-Request header to the exact complete URL as requested by the browser. For example if your proxy was set up to serve RStudio requests at https://testdomain.com/rstudio/ and an incoming request for /home came in, your proxy should set X-RStudio-Request: https://testdomain.com/rstudio/home which would allow RStudio to know about the added path prefix /rstudio.\nIf your proxy does not add path prefixes, RStudio is also compatible with two options using commonly available HTTP proxy headers:\n\nThe headers X-Forwarded-Host, X-Forwarded-Proto, and X-Forwarded-Port.\nOr the header Forwarded with host, and proto values.\n\nWhen using path-rewriting proxies, it’s also recommended to use either the header X-RStudio-Root-Path or the option www-root-path to indicate the path defined for RStudio by the proxy. For example, if your URL to RStudio is www.example.com/rstudio your proxy should send the header X-RStudio-Root-Path: /rstudio or you should use:\n# /etc/rstudio/rserver.conf\nwww-root-path=/rstudio\nIf none of the headers above are set by the proxy, RStudio will attempt to redirect back to the address present in the Host header and it will determine the protocol (http or https) based on its current configuration.\nIf you are running behind a proxy but cannot set headers for whatever reason, and www-root-path is not the right choice, you can use the auth-openid-base-uri option in the RStudio configuration file to accomplish the same purpose:\n# /etc/rstudio/rserver.conf\nauth-openid-base-uri=http://testdomain.com/rstudio/\n\n\nOutgoing Proxies\nSome OpenID authentication features require RStudio to make a call to an external service over HTTP or HTTPS; for example, to retrieve the provider’s OpenID configuration from a known endpoint. If your environment requires an HTTP or HTTPS proxy for outbound requests, you must set the appropriate proxy environment variables for RStudio’s server process so that it uses the proxy when making the request.\nOne way to do this is to add the variables to env-vars; for example:\n# /etc/rstudio/env-vars\nHTTP_PROXY=http://192.168.1.1:8080\nHTTPS_PROXY=http://192.168.1.1:8080\nNO_PROXY=localhost,192.168.1.10\n\n\nLoad Balancing Considerations\nBecause RStudio stores OpenID authentication context in server memory during the OAuth flow, the entire authentication flow must be completed on a single server. If you’re using an external load balancer in front of RStudio, you will experience authentication errors if the HTTP requests associated with the authentication flow are not all routed to the same server.\nFor this reason, you must enable sticky sessions in your external load balancer when using OpenID authentication. This feature is sometimes called “sticky cookies” or “session affinity”. Consult the documentation for your load balancing software for details; for example if you’re using the Amazon Web Services Application Load Balancer (AWS ALB), more information can be found in Sticky Sessions for your Application Load Balancer.\n\n\nTroubleshooting\nAdditional information about the OpenID flow and the received claims may be written to the logs. Be sure to configure rserver logs to output info level messages in /etc/rstudio/logging.conf to see these entries."
  },
  {
    "href": "authenticating_users/authenticating_users.html",
    "title": "RStudio Workbench Administration",
    "section": "",
    "text": "Overview\nR users require local system accounts regardless of what RStudio authentication method you use. You must set up local system accounts manually or programmatically and then map authenticating users to these accounts.\nFor user identification, authentication, and authorization using local system accounts, RStudio relies heavily on Linux Pluggable Authentication Module (PAM). PAM can be used by itself to authenticate users or along with other external authentication mechanisms (e.g., Web Single Sign-On) to authorize existing local system accounts.\n\n\n\n\n\n\nNote\n\n\n\nNot all RStudio products require local system accounts or PAM. For example, RStudio Connect and Shiny Server rely on their own authentication engines and on a single system account for doing their work in most cases, not requiring individualized development environments like the ones offered by RStudio Workbench.\n\n\nHere are the various authentication mechanisms supported by RStudio:\n\n\n\n\n\n\n\nAuthentication\nRStudio Configuration\n\n\n\n\nLocal Accounts\nPAM Authentication (via pam_unix)\n\n\nLDAP or Active Directory\nPAM Authentication (via pam_sss or pam_ldap in older systems)\n\n\nKerberos\nPAM Authentication (via pam_sss or pam_krb5 in older systems)\n\n\nWeb Single Sign-On (SSO)\nSAML Single Sign-On Authentication or OpenID Connect Authentication\n\n\nOthers (client-server, e.g., RADIUS)\nAs supported by various PAM modules\n\n\nOthers (browser-based, e.g., Kerberos SPNEGO SSO)\nProxied Authentication\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nSAML, OpenID, and Proxied authentication still require PAM Sessions to automatically create local system accounts. Without it, local system accounts have to be provisioned manually one-by-one."
  },
  {
    "href": "authenticating_users/authentication_migration.html#authentication-migration",
    "title": "RStudio Workbench Administration",
    "section": "Authentication Migration",
    "text": "It is possible to migrate between the supported authentication mechanisms.\n\nMigrating from PAM\nYour local system accounts currently used with PAM can be used for Single Sing-On (SSO) authentication with SAML or OpenID. Ensure that:\n\nThe existing PAM configuration is configured for PAM & Provisioning, as suggested above.\nRStudio is configured with PAM Sessions if your local system accounts are maintained by sssd.\nRStudio is configured with the appropriate SSO authentication mechanism.\nThe configured SAML attribute or OpenID claim for username from your Identity Management system matches the names of your existing local system accounts.\n\n\n\n\n\n\n\nImportant\n\n\n\nIf PAM was used with Kerberos, please note that the credential forwarding functionality offered by Kerberos is only possible with PAM and it cannot be leveraged directly by RStudio when using SSO.\n\n\n\n\nMigrating to PAM\nSince all other authentication methods already leverage PAM in some degree, there’s no actual migration to PAM. You should only make sure PAM is configured for authenticating the existing users and configure RStudio to use PAM.\n\n\nMigrating from Proxied authentication\nYour local system accounts currently used with Proxied authentication can be used for Single Sing-On (SSO) authentication with SAML or OpenID. Ensure that:\n\nIf RStudio is placed under a different path by the proxy (e.g., example.com/rstudio), be sure to check the “Proxy Considerations” sections under SAML Single Sign-On Authentication or OpenID Connect Authentication for additional options your proxy or RStudio configuration may need.\nRStudio is configured with the appropriate SSO authentication mechanism.\nThe configured SAML attribute or OpenID claim for username match the names of your existing local system accounts as they were sent by the proxy in the HTTP header for username.\n\n\n\nMigrating to Proxied authentication\n\n\n\n\n\n\nNote\n\n\n\nThis migration is not recommended unless none of the other existing authentication mechanisms are sufficient for your organization’s needs.\n\n\nIf Migrating from PAM, you can follow the same recommendations listed above for SSO, noting that the HTTP header for username must match existing accounts. If migrating from SAML or OpenID, the same observation on the HTTP header for username applies.\n\n\nMigrating from Google accounts\nMigrating from Google accounts is similar to Migrating from PAM to SSO, or Migrating to PAM.\n\n\n\n\n\n\nImportant\n\n\n\nGoogle accounts have been deprecated and we strongly recommend against migrating to this authentication.\n\n\n\n\n\n\n\n\nNote\n\n\n\nIf you are currently using Google accounts for authentication, the migration from Google accounts to OpenID using Google itself as the OpenID provider is not yet supported. We recommend to keep using Google accounts or migrating to some other non-Google SSO authentication."
  },
  {
    "href": "authenticating_users/saml_sso.html#saml-single-sign-on-authentication",
    "title": "RStudio Workbench Administration",
    "section": "SAML Single Sign-On Authentication",
    "text": "RStudio Workbench can be configured to authenticate users via SAML. This enables users to log in with their existing Single Sign-On (SSO) credentials and to be automatically authenticated to RStudio whenever they are already logged into their Identity Provider (IdP) account.\n\nEnabling SAML SSO\nTo enable authentication with SAML you add the auth-saml option to the RStudio configuration file /etc/rstudio/rserver.conf:\n# /etc/rstudio/rserver.conf\nauth-saml=1\n\n\n\n\n\n\nImportant\n\n\n\nOnce you enable authentication with SAML that becomes the exclusive means of authentication - you can’t concurrently use both PAM and SAML authentication.\n\n\n\n\n\n\n\n\nImportant\n\n\n\nSAML authentication still requires PAM Sessions and sssd to automatically create local system accounts. Without them, local system accounts have to be provisioned manually one-by-one.\n\n\n\n\nConfiguring SAML\nTo use SAML authentication in RStudio you should configure the parts involved in this order:\n\nConfiguring RStudio as a Service Provider\nConfiguring your Identity Provider with RStudio\n\n\n\nConfiguring RStudio as a Service Provider\nRStudio Workbench needs to be configured in order to trust the SAML assertions sent by your IdP.\n\nIdentity Provider Metadata Setup\n\n\n\n\n\n\nNote\n\n\n\nRStudio Workbench expects the IdP metadata to contain the service name (EntityID), the Single Sign-On (SSO) URL and the signing certificate.\n\n\nThe easiest way to configure RStudio Workbench is to point it to the IdP metadata URL. This can be done by adding the option auth-saml-metadata-url. This option automatically renews the metadata when it expires but it requires direct connectivity between your server and the IdP.\n# /etc/rstudio/rserver.conf\nauth-saml-metadata-url=https://idp.example.com/saml/metadata\nIf you want to avoid direct connectivity between your server and the IdP or if that setup is not possible you should use an offline setup. In this scenario, you should download the metadata from your IdP and upload it to your server. Then, add the option auth-saml-metadata-path pointing to the file location within your server. This option requires manual intervention if the metadata or the signing certificate expires.\n# /etc/rstudio/rserver.conf\nauth-saml-metadata-path=/path/to/saml/metadata.xml\n\n\n\n\n\n\nWarning\n\n\n\nThe metadata URL option has precedence over the metadata file path option. You must remove the URL option first before using the file option.\n\n\nIf your Identity Provider requires information about RStudio in order to provide metadata, see the Manual Service Provider Setup section below for a list of details you may need to provide about your RStudio Workbench server.\n\n\nManual Identity Provider Setup\nIf your IdP does not provide metadata or if the metadata has any problems, you should use a manual setup. The following required options must be added to your server configuration:\n\nauth-saml-idp-entity-id - An URL to an HTTP(S) endpoint on the IdP, in general the location of its metadata. In very exceptional cases this may not be an URL.\nauth-saml-idp-sso-url - An URL to an HTTP(S) endpoint on the IdP to where your server will send authentication requests.\nauth-saml-idp-sign-cert-path - The path to a PEM file containing the public trust certificate for verifying the assertions’ signatures.\n\n# /etc/rstudio/rserver.conf\nauth-saml-idp-entity-id=https://idp.example.com/saml/metadata\nauth-saml-idp-sso-url=https://idp.example.com/saml/sso\nauth-saml-idp-sign-cert-path=/path/to/saml.cert\n\n\n\n\n\n\nWarning\n\n\n\nThe metadata URL and file path options have precedence over the individually configured options. You must remove the metadata options first before using individual settings.\n\n\n\n\n\nConfiguring your Identity Provider with RStudio\nIn order to use SAML with RStudio Workbench you also need to register your server with your IdP.\n\nSAML Attributes\n\n\n\n\n\n\nImportant\n\n\n\nYour IdP must return in the assertion at least one attribute (or NameID) matching the user’s local account username (lowercase).\n\n\nBy default, RStudio Workbench will look for an attribute called Username (case-sensitive). If you wish to use a different attribute or the assertion’s NameID value, add the option auth-saml-sp-attribute-username with the appropriate value.\n# /etc/rstudio/rserver.conf\nauth-saml-sp-attribute-username=NameID\n\n\nPreconfigured Setups\nRStudio Workbench has preconfigured entries in Okta, OneLogin and Azure. In some cases, all you need to provide is the URL to your server. Please refer to the documentation on these vendors for more information.\n\n\nService Provider Metadata Setup\nRStudio Workbench provides its own Service Provider (SP) SAML metadata at the /saml/metadata endpoint. For example, if your server is running at https://server.example.com, its metadata can be found at https://server.example.com/saml/metadata.\nYour IdP may ask for the metadata URL or the metadata file. For the latter, you should download the metadata file and upload it to your IdP.\n\n\nManual Service Provider Setup\nIf your IdP requires a manual configuration, the basic information about your server is in the SAML metadata.\n\n\n\n\n\n\nNote\n\n\n\nThe SAML metadata primarily contains information about the service name (EntityID) and the assertion consumer service (ACS) URL.\n\n\nIf you cannot start RStudio configured with SAML because your IdP must be configured first, you may be asked the following information:\n\nRStudio Entity ID: This value is the same URL as the metadata endpoint used for Service Provider Metadata Setup. For example, https://server.example.com/saml/metadata\nRStudio Assertion Consumer Service URL: RStudio expects SAML assertions at the /saml/acs endpoint. For example, https://server.example.com/saml/acs\nIf encryption is used, you will need to provide the encryption certificate used by RStudio, see SAML Encryption below. RStudio supports most common forms of encryption used with SAML.\nIf your Identity Provider expects signed requests from RStudio, you will need to provide the signing certificate used by RStudio, see SAML Request Signing below. Any signing algorithm you choose in your IdP must match RStudio’s configuration.\nSAML Attributes as mentioned above.\nAlso, information requested about Unsupported SAML Options in RStudio should be left blank.\n\n\n\n\nAdvanced Options\nDepending on your IdP capabilities you may need to add a few more options to your server:\n\nauth-saml-idp-post-binding: By default RStudio Workbench will redirect to your IdP for authentication requests. With the value 1, this option makes it use an HTTP POST instead. This option can also be used with a metadata file or URL if your IdP supports both redirect and POST.\nauth-saml-sso-initiation: By default RStudio Workbench will be able to initiate an authentication with SAML (SP-initiated) or to acceept an ad-hoc assertion (IdP-initiated). If you prefer just one of these flows, use this options with either sp or idp values. When set to idp users will be sent to the configured IdP SSO URL if a SP-initiated flow is attempted.\nauth-saml-sp-name-id-format: By default RStudio Workbench will accept any NameID Format. Add this options with the values persistent, transient, emailaddress, or unspecified to make RStudio Workbench request and expect a particular format from the IdP.\n\n\n\n\n\n\n\nWarning\n\n\n\nauth-saml-sp-name-id-format=transient and auth-saml-sp-attribute-username=NameID will not be accepted as a valid combination. It would lead to undetermined usernames in each attempt.\n\n\nHere are some examples of valid configurations of the aforementioned advanced options:\n# /etc/rstudio/rserver.conf\nauth-saml-idp-post-binding=1\nauth-saml-idp-sso-url=https://idp.example.com/saml/sso\n# /etc/rstudio/rserver.conf\nauth-saml-sso-initiation=idp\nauth-saml-idp-sso-url=https://idp.example.com/login\n# /etc/rstudio/rserver.conf\nauth-saml-sp-name-id-format=persistent\n\n\nSAML Encryption\nTo enable support for encrypted SAML assertions, you will need a key pair in the form of a public certificate file and a private RSA key, both in PEM format.\nThe following options should be added to your server:\n\nauth-saml-sp-encryption-key-path: The path to a PEM file containing the private RSA key for decrypting the assertion.\nauth-saml-sp-encryption-cert-path: The path to a PEM file containing the public certificate for encrypting the assertion. The contents of this file will be present in your server metadata after configured. You may also be asked to upload this certificate to the IdP instead.\n\n# /etc/rstudio/rserver.conf\nauth-saml-sp-encryption-key-path=/path/to/saml.key\nauth-saml-sp-encryption-cert-path=/path/to/saml.cert\n\n\n\n\n\n\nWarning\n\n\n\nThese key pair files are similar to the ones used for SSL/TLS. However, for security reasons you must never use your server’s own SSL/TLS key and certificate for SAML encryption.\n\n\nThis example allows the creation of a simple self-signed public certificate and private key pair that can be used for encryption for the server “localhost” (you should use your server public facing hostname instead):\nopenssl req -x509 -newkey rsa:2048 -keyout saml.key -out saml.cert -days 365 -nodes -subj \"/CN=localhost\"\n\n\nSAML Request Signing\n\n\n\n\n\n\nNote\n\n\n\nIn most situations, SAML authentication request signing is not required or even supported. Be sure your IdP requires signing before using this functionality.\n\n\nTo enable support for signed SAML authentication requests, you need to set a signing method in your server configuration with the option auth-saml-sp-request-signing-method. The algorithms sha1, sha256, or sha512 are supported. When in doubt, try sha256 first which offers a good balance between security and compatibility.\n# /etc/rstudio/rserver.conf\nauth-saml-sp-request-signing-method=sha256\n\n\n\n\n\n\nNote\n\n\n\nBy using one of the signing methods listed above the RStudio metadata will contain a \"signing\" certificate and will have the attribute AuthnRequestsSigned with the true value.\n\n\nYou will also need a key pair in the form of a public certificate file and a private RSA key, both in PEM format. If you are using SAML Encryption, the already configured encryption key pair will also be used for request signing.\n\n\n\n\n\n\nImportant\n\n\n\nRStudio only accepts a single key pair. You can use a key pair for both encryption and signing requests or one just for signing. Different key pairs for signing and encryption are not currently supported.\n\n\nIf you are not currently using SAML encryption, the following options should be added to your server:\n\nauth-saml-sp-signing-key-path - The path to a PEM file containing the private RSA key for decrypting the assertion.\nauth-saml-sp-signing-cert-path - The path to a PEM file containing the public certificate for encrypting the assertion. The contents of this file will be present in your server metadata after configured. You may also be asked to upload this certificate to the IdP instead.\n\n# /etc/rstudio/rserver.conf\nauth-saml-sp-signing-key-path=/path/to/signing.key\nauth-saml-sp-signing-cert-path=/path/to/signing.cert\n\n\n\n\n\n\nWarning\n\n\n\nThese key pair files are similar to the ones used for SSL/TLS. However, for security reasons you must never use your server’s own SSL/TLS key and certificate for SAML encryption.\n\n\nThis example allows the creation of a simple self-signed public certificate and private key pair that can be used for encryption for the server “localhost” (you should use your server public facing hostname instead):\nopenssl req -x509 -newkey rsa:2048 -keyout saml.key -out saml.cert -days 365 -nodes -subj \"/CN=localhost\"\n\n\nUnsupported SAML Options\nRStudio Workbench supports at least a subset of SAML called Interoperable SAML. Notably, certain functionalities are currently absent:\n\nSingle Logout\nCertificate chain validation\nRelayState URL handling (not part of the SAML standard)\n\n\n\nProxy Considerations\nIf you are running RStudio behind a proxy, you will need to configure your proxy in a way that RStudio can tell the SAML IdP to redirect back to the correct location. There are number of options to choose from as described in Running with a Proxy.\nThe use of the X-RStudio-Request header in your proxy is recommended and the only method which works behind a path-rewriting proxy. In this case, the proxy must set the X-RStudio-Request header to the exact complete URL as requested by the browser. For example if your proxy was set up to serve RStudio requests at https://testdomain.com/rstudio/ and an incoming request for /home came in, your proxy should set X-RStudio-Request: https://testdomain.com/rstudio/home which would allow RStudio to know about the added path prefix /rstudio.\nIf your proxy does not add path prefixes, RStudio is also compatible with two options using commonly available HTTP proxy headers:\n\nThe headers X-Forwarded-Host, X-Forwarded-Proto, and X-Forwarded-Port.\nOr the header Forwarded with host, and proto values.\n\nWhen using path-rewriting proxies, it’s also recommended to use either the header X-RStudio-Root-Path or the option www-root-path to indicate the path defined for RStudio by the proxy. For example, if your URL to RStudio is www.example.com/rstudio your proxy should send the header X-RStudio-Root-Path: /rstudio or you should use:\n# /etc/rstudio/rserver.conf\nwww-root-path=/rstudio\nIf none of the headers above are set by the proxy, RStudio will attempt to redirect back to the address present in the Host header and it will determine the protocol (http or https) based on its current configuration.\nIf you are running behind a proxy but cannot set headers for whatever reason, and www-root-path is not the right choice, you can use the auth-sp-saml-base-uri option in the RStudio configuration file to accomplish the same purpose:\n# /etc/rstudio/rserver.conf\nauth-saml-sp-base-uri=http://testdomain.com/rstudio/\n\n\nLoad Balancing Considerations\nBecause RStudio stores SAML authentication context in server memory during the authentication flow, the entire authentication flow must be completed on a single server. If you’re using an external load balancer in front of RStudio, you will experience authentication errors if the HTTP requests associated with the authentication flow are not all routed to the same server.\nFor this reason, you must enable sticky sessions in your external load balancer when using SAML authentication. This feature is sometimes called “sticky cookies” or “session affinity”. Consult the documentation for your load balancing software for details; for example if you’re using the Amazon Web Services Application Load Balancer (AWS ALB), more information can be found in Sticky Sessions for your Application Load Balancer.\n\n\nOutgoing Proxies\nSome SAML authentication features require RStudio to make a call to an external service over HTTP or HTTPS; for example, to perform provider metadata discovery. If your environment requires an HTTP or HTTPS proxy for outbound requests, you must set the appropriate proxy environment variables for RStudio’s server process so that it uses the proxy when making the request.\nOne way to do this is to add the variables to the env-vars file as follows:\n# /etc/rstudio/env-vars\nHTTP_PROXY=http://192.168.1.1:8080\nHTTPS_PROXY=http://192.168.1.1:8080\nNO_PROXY=localhost,192.168.1.10\n\n\nTroubleshooting\nAdditional information about the SAML flow and the received assertion may be written to the logs. Be sure to configure rserver logs to output info level messages in /etc/rstudio/logging.conf to see these entries."
  },
  {
    "href": "authenticating_users/google_accounts.html#google-accounts-deprecated",
    "title": "RStudio Workbench Administration",
    "section": "Google Accounts (deprecated)",
    "text": "Note\n\n\n\nWhile it is still possible to configure this authentication method, note that in future releases of RStudio, this authentication method will migrate to use OpenID Connect instead; Google itself uses OpenID as an underlying authentication mechanism. Additionally, RStudio Desktop Pro clients will be unable to connect to RStudio Workbench when it is configured to use Google Authentication due to new restrictions from Google - see Google’s Notice for more information.\n\n\nRStudio Workbench can be configured to authenticate users via Google Accounts. This enables users to log in with their existing Gmail or Google Apps credentials and to be automatically authenticated to RStudio whenever they are already logged into their Google account.\n\nRegistering with Google\nIn order to use Google Accounts with RStudio Workbench you need to register your server with Google for OAuth 2.0 Authentication. You do this by creating a new “Project” for your server in the Google Developer Console:\nhttps://console.developers.google.com/\nOnce you’ve created a project you go to the Credentials area of APIs and auth and choose to Create New Client ID:\n\n\n\nCreate Client Id\n\n\nYou’ll then be presented with a dialog used to create a new client ID:\n\n\n\nCreate Client Id\n\n\nYou should select “Web application” as the application type and provide two URLs that correspond to the server you are deploying on. The screenshot above uses https://www.example.com as the host, you should substitute your own domain and port (if not using a standard one like 80 or 443) in your configuration.\nThis will result in two values which you’ll need to provide as part of the RStudio Workbench configuration: client-id and client-secret (they’ll be displayed in the Google Developer Console after you complete the dialog).\n\n\nEnabling Google Accounts\nTo enable authentication with Google Accounts you add the auth-google-accounts option to the RStudio configuration file:\n# /etc/rstudio/rserver.conf\nauth-google-accounts=1\nOnce you enable authentication with Google Accounts that becomes the exclusive means of authentication (you can’t concurrently use both PAM and Google Account authentication).\nIn addition, you need to add a configuration file (/etc/rstudio/google-client-secret) containing the client-id and client-secret that you received when registering your site with Google. For example, the configuration file might look like this:\n# /etc/rstudio/google-client-secret\nclient-id=lllllllllllll-xxxxxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com\nclient-secret=BhCC6rK7Sj2ZtPH0ord7lO1w\nThe /etc/rstudio/google-client-secret file should have user read/write file permissions (i.e., 0600) to protect it’s contents from other users. You can ensure this as follows:\n$ sudo chmod 0600 /etc/rstudio/google-client-secret\n\n\n\n\n\n\nImportant\n\n\n\nThe above client-id and client-secret aren’t the actual values you’ll use. Rather, you should substitute the values that you obtained from Google when registering your site for OAuth authentication.\n\n\n\n\nTranslating to Local Accounts\n\nCreating Matching Accounts\nOnce a user is authenticated via Google Accounts it’s necessary to map their Google Accounts identity to a local system account. The default and most straightforward way to do this is to create a local account with a username identical to their Google email address.\nIf you choose to create local accounts that match Google email addresses, be sure to use only lowercase characters in the account name since Google email addresses are transformed to lower-case prior to matching them to local account names.\nOne problem with creating local accounts that match Google email addresses is that they often contain characters that are invalid by default within Linux usernames (e.g. @ or .). On Debian/Ubuntu systems it’s possible to force the system to create a user with these characters. Here’s an example of creating a user with a username that contains typically invalid characters:\n$ sudo adduser --force-badname <username>\n\n\n\n\n\n\nImportant\n\n\n\nThe --force-badname option is only available on Debian/Ubuntu systems and is not available on RedHat/CentOS or SLES systems.\n\n\nIf the users you are creating will only be accessing the server via RStudio, you may also want to disable their ability to log in as a normal interactive user and to specify that they have no password. For example:\n$ sudo adduser --force-badname --disabled-login --disabled-password <username>\n\n\nUsing an Account Mappings File\nAlternatively, you map create local accounts that do not match Google email addresses and then specify a mapping of Google accounts to local accounts via the /etc/rstudio/google-accounts configuration file. For example:\n# /etc/rstudio/google-accounts\njohn.smith@gmail.com=jsmith\nsally.jones@gmail.com=sjones\nNote that changes to the google-accounts configuration file take effect immediately and do not require a server restart.\n\n\n\nProxy Considerations\nIf you are running RStudio behind a proxy, you will need to configure your proxy in a way that RStudio can tell the Google Web Services to redirect back to the correct location. There are number of options to choose from as described in Running with a Proxy.\nThe use of the X-RStudio-Request header in your proxy is recommended and the only method which works behind a path-rewriting proxy. In this case, the proxy must set the X-RStudio-Request header to the exact complete URL as requested by the browser. For example if your proxy was set up to serve RStudio requests at https://testdomain.com/rstudio/ and an incoming request for /home came in, your proxy should set X-RStudio-Request: https://testdomain.com/rstudio/home which would allow RStudio to know about the added path prefix /rstudio.\nIf your proxy does not add path prefixes, RStudio is also compatible with two options using commonly available HTTP proxy headers:\n\nThe headers X-Forwarded-Host, X-Forwarded-Proto, and X-Forwarded-Port.\nOr the header Forwarded with host, and proto values.\n\nWhen using path-rewriting proxies, it’s also recommended to use either the header X-RStudio-Root-Path or the option www-root-path to indicate the path defined for RStudio by the proxy. For example, if your URL to RStudio is www.example.com/rstudio your proxy should send the header X-RStudio-Root-Path: /rstudio or you should use:\n# /etc/rstudio/rserver.conf\nwww-root-path=/rstudio\nIf none of the headers above are set by the proxy, RStudio will attempt to redirect back to the address present in the Host header and it will determine the protocol (http or https) based on its current configuration.\nIf you are running behind a proxy but cannot set headers for whatever reason, and www-root-path is not the right choice, you can use the auth-google-accounts-redirect-base-uri option in the RStudio configuration file to accomplish the same purpose:\n# /etc/rstudio/rserver.conf\nauth-google-accounts-redirect-base-uri=http://testdomain.com/rstudio/"
  },
  {
    "href": "authenticating_users/authorization_timeout.html#authorization-timeout",
    "title": "RStudio Workbench Administration",
    "section": "Authorization Timeout",
    "text": "Inactivity Timeout\nBy default, user authorization will expire after 60 minutes of inactivity, requiring the user to sign in again to continue using their sessions. This is configurable by changing the auth-timeout-minutes setting in /etc/rstudio/rserver.conf. For example, to sign users out after 20 minutes of inactivity instead:\n# /etc/rstudio/rserver.conf\nauth-timeout-minutes=20\nThis setting supersedes the auth-stay-signed-in-days setting discussed below in Stay Signed In, as it provides additional security by ensuring that users that are not actively using the system do not stay signed in. However, if you wish to allow users to stay signed in for many days at a time and disable the authorization timeout completely, set auth-timeout-minutes to 0, which will cause the auth-stay-signed-in-days setting’s behavior to be used instead.\nWhenever a user is signed out, the database will be updated to store recently logged out/invalidated cookies, preventing the use of credential replay attacks.\n\n\nStay Signed In\nUsers have an option to stay signed in across browser sessions when using PAM or Google authentication methods. By default when choosing the stay signed in option users will remain signed in for 30 days. You can modify this behavior using the auth-stay-signed-in-days setting. For example:\n# /etc/rstudio/rserver.conf\nauth-stay-signed-in-days=7\n\n\n\n\n\n\nWarning\n\n\n\nThis setting is deprecated in favor of the auth-timeout-minutes setting for additional security. See Inactivity Timeout above for more information.\n\n\nNote that for this setting to take effect, auth-timeout-minutes must be set to 0.\nIf you want to prevent users from being able to stay signed in, you can prevent the “Stay Signed In” option from being shown to them by using the auth-stay-signed-in setting. For example:\n# /etc/rstudio/rserver.conf\nauth-stay-signed-in=0\nSetting this option to 0 will result in users being prompted to log in each time they start a new browser session (i.e., logins will only be valid as long as the browser process in which they originated in remains running)."
  },
  {
    "href": "authenticating_users/customizing_signin.html#customizing-the-sign-in-page",
    "title": "RStudio Workbench Administration",
    "section": "Customizing the Sign-In Page",
    "text": "You can customize the content and appearance of the RStudio sign-in page by including custom HTML within the page. This is accomplished by either:\n\nProviding a file at /etc/rstudio/login.html that includes additional HTML to include within the login page; or\nSpecifying the auth-login-page-html option within the rserver.conf config file which points to an alternate location for the login HTML file. For example, the following specifies that the file located at /opt/config/rstudio-login.html should be included within the login page:\n# /etc/rstudio/rserver.conf\nauth-login-page-html=/opt/config/rstudio-login.html\n\nThe contents of the specified HTML file will be included after the standard login header and login username/password form. If you want to modify the appearance of the header and/or add content above the username/password form, you can use CSS and JavaScript within your login.html file to modify the page after it loads.\nThe same can be done to tweak the display of the sign in page for remote RDP sessions as well, with either the /etc/rstudio/rdplogin.html file, or the auth-rdp-login-page-html setting within rserver.conf."
  },
  {
    "href": "authenticating_users/pam_basics.html#pam-basics",
    "title": "RStudio Workbench Administration",
    "section": "PAM Basics",
    "text": "Local system accounts used by PAM must follow the system conventions for usernames. For example, usernames are case-sensitive.\nPAM profiles are are located in the /etc/pam.d directory. Each application can have their own profile, and there is also a default profile used for applications without one (the default profile is handled differently depending on which version of Linux you are running).\nTo learn more about PAM and the many options and modules available for it see the following:\n\nhttps://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/system-level_authentication_guide/pluggable_authentication_modules\nhttp://tldp.org/HOWTO/User-Authentication-HOWTO/x115.html\nhttp://linux.die.net/man/8/pam\n\n\nPAM & Provisioning\nPAM recommendations for user provisioning:\n\nIf you are using PAM authentication to connect to an external authentication provider, you can use a PAM module like pam_mkhomedir to automatically create the users’ home directories on login.\nUser provisioning requires PAM sessions to be used is most cases. See the PAM Sessions section for details on how RStudio can be configured to use those.\nIf you are using SAML, OpenID or Proxied authentication and local system accounts are automatically created by sssd, a PAM configuration with the module pam_rootok must be used, since PAM sessions will be started by RStudio using root in the behalf of the actual user."
  },
  {
    "href": "index.html",
    "title": "RStudio Workbench 23.12.5-17",
    "section": "",
    "text": "RStudio Server enables you to provide a browser based interface (the RStudio IDE) to a version of R running on a remote Linux server. Deploying R and RStudio on a server has a number of benefits, including:\n\nThe ability to access R sessions from any computer in any location;\nEasy sharing of code, data, and other files with colleagues;\nAllowing multiple users to share access to the more powerful compute resources (memory, processors, etc.) available on a well equipped server; and\nCentralized installation and configuration of R, R packages, TeX, and other supporting libraries.\n\nThis manual describes RStudio Workbench, which adds many enhancements to the open-source version of RStudio Server, including:\n\nThe ability to run multiple concurrent RStudio IDE sessions per-user.\nFlexible use of multiple versions of R on the same server.\nThe ability to run sessions on external cluster nodes, such as Kubernetes or Slurm.\nSupport for Jupyter, JupyterLab, and VS Code editor sessions.\nProject sharing for easy collaboration within workgroups.\nLoad balancing for increased capacity and higher availability.\nAn administrative dashboard that provides insight into active sessions, server health, and monitoring of system-wide and per-user performance and resource metrics;\nAuthentication using system accounts, ActiveDirectory, LDAP, SAML, OpenID, or Google Accounts;\nFull support for PAM (including PAM sessions for dynamically provisioning user resources);\nAbility to establish per-user or per-group CPU priorities and memory limits;\nHTTP enhancements including support for SSL and keep-alive for improved performance;\nAbility to restrict access to the server by IP;\nCustomizable server health checks; and\nSuspend, terminate, or assume control of user sessions; Impersonate users for assistance and troubleshooting.\n\nThe documentation applies to both RStudio Server (Open Source) and RStudio Workbench (Pro), unless the section is specifically marked Pro, in which case it only applies to RStudio Workbench."
  }
]